<apex:page standardController="Decision__c"   extensions="DecisionView" contentType="text/javascript"  > 
    
    var phaseArray = new Array('Draft', 'Share','Propose','Decide','Execute','Evaluate','Close');
    var currentPhase;   
    var rolgridTimeeAcceptanceStatusGolbal;
    var addCIMember; 
    var backUp;  
    var currentTaskEventSubject = '';
    var clickedOn = ''; 
    // ------------- Added for confirmation popup for re-share of the decision ------- sendil - 27-06-2014
    var backtoShare = false;
    var selectedPhaseId = '';
    // ------------- Ends confirmation popup for re-share of the decision ------- sendil - 27-06-2014
    var moodArrayOnCommandCenter = new Array('Not Given','Very Worried','Worried','Neutral','Happy','Very Happy');
    var starPositionStore = new Array('0','1','1.5','2','2.5','3','3.5','4','4.5','5');
    var starPosition = new Array('0','-36','-54','-72','-90','-108','-126','-144','-162','-180');
   
    // Save decision 
    var AccountableForActivities,BackupForActivities,RoleAcceptanceForBackupInActivities,responsibleForActivities; 
     
    function showFinancialsWarning() {
        var pos = phaseArray.indexOf(currentPhase); 
        if(3 > pos) {
            $('#financials-callout').css('display', 'block');
            $('#financials-arrow').css('display', 'block');
        }
    }
    function hideFinancialsWarning() {
        $('#financials-callout').css('display', 'none');
        $('#financials-arrow').css('display', 'none');
    }
     
     
    function saveDecision(){  
        
        var problemStatemnt = document.getElementById("kendoEditorProblemStatement").value;
        var decisionStatemnt = document.getElementById("kendoEditorDecision").value;
        
        saveDecisionRecords(problemStatemnt,decisionStatemnt); 
    }
    
    // Cancel decision
    function cancelDecision(){
        cancel();
    }
    
    // Edit decision
    function editDecision(){
        //var editor = document.getElementById('rtfEditor').value;
        //if(editor == '' || editor == null){
            //$("#editorProblemStatement").kendoEditor();
            //$("#editorDecision").kendoEditor();
            //document.getElementById('rtfEditor').value = 'fixed';
        //} 
        $('.decisionView').css('display','none');
        $('.decisionEdit').css('display','block');
        
    }
    
    // Cancel decision 
    function ViewDecision(){
        expandCollapse('custom-view','custom-btn');
        expandCollapse('custom-edit','custom-edit-btn');
        expandCollapse('classification-view','classification-btn');
        expandCollapse('financials-view','financials-btn');
        expandCollapse('timing-view','timing-btn');
        
        expandCollapse('classification-edit','classification-edit-btn');
        expandCollapse('financials-edit','financials-edit-btn');
        expandCollapse('timing-edit','timing-edit-btn');
        
        $('.decisionEdit').css('display','none');
        $('.decisionView').css('display','block');
        //setTimeout(function(){UpdateDueDateInCommandCenter()},2000);
        
    }
    
    //update due date in command center
    function UpdateDueDateInCommandCenter(){  
        //alert('UpdateDueDateInCommandCenter');
        var commandCenterDueDate = document.getElementById('pg:decisonViewState:decisionDueDate').innerHTML;
        var timingCenterDueDate  = document.getElementById('pg:timingCenterDueDate').innerHTML;
         
        var reg = new RegExp('[0-9]');
        if( ! reg.test(commandCenterDueDate)   )        
         document.getElementById('pg:commandCenterDueDate').innerHTML = 'N/A';    
        else
        document.getElementById('pg:commandCenterDueDate').innerHTML = commandCenterDueDate;
         
         if( ! reg.test(timingCenterDueDate)   )        
         document.getElementById('pg:timingCenterDueDate').innerHTML = 'N/A';    
        else
         document.getElementById('pg:timingCenterDueDate').innerHTML = timingCenterDueDate;
     }
    
    function UpdateDueDateInCommandCenterfromGenDetails(){  
  //  alert('UpdateDueDateInCommandCenterfromGenDetails');
        var commandCenterDueDate = document.getElementById('pg:decisonViewState:decisionDueDate').innerHTML;
        var timingCenterDueDate  = document.getElementById('pg:timingCenterDueDate').innerHTML;
        
         var reg = new RegExp('[0-9]');
        if( ! reg.test(commandCenterDueDate)   )        
         document.getElementById('pg:commandCenterDueDate').innerHTML = 'N/A';    
        else
        document.getElementById('pg:commandCenterDueDate').innerHTML = commandCenterDueDate;
        
        if( ! reg.test(timingCenterDueDate)   )        
         document.getElementById('pg:timingCenterDueDate').innerHTML = 'N/A';    
        else
        document.getElementById('pg:timingCenterDueDate').innerHTML = timingCenterDueDate  ;
     }
    
    // Save decision
    function getDecisionData(){
        
        var title = document.getElementById('pg:generalViewFrm:decisionTitle').value;
        
        var privateCheckbox = document.getElementById('pg:generalViewFrm:privateChecknBoxVal').checked; //pg:generalViewFrm:privateChecknBoxVal
        
        var problemStatemnt = document.getElementById('pg:generalViewFrm:editorProblemStatement').value;
        var decisionStatemnt = document.getElementById('pg:generalViewFrm:editorDecision').value;
        //var decisionStatemnt =  $('[id$=editorDecision]').val(); //document.getElementById('editorDecision').value;
        if(title =='') {
            alert('Please enter the decision Title');
            return false;
        }
        if(problemStatemnt == '' || problemStatemnt == ' '  || problemStatemnt == null ) {
            alert('Please Enter the Decision Description');
            return false;
        }
        if(problemStatemnt != '' || problemStatemnt != null){
            if(problemStatemnt.substring(1,40) == 'amp;lt;div style="text-align: justify; '){
                if(problemStatemnt.substring(42,49) == 'amp;gt;'){
                    if(problemStatemnt.substring(50,58) == 'amp;lt;p'){
                        if(problemStatemnt.substring(59,66) == 'amp;gt;'){
                            if(problemStatemnt.substring(67,76) == 'amp;lt;br'){
                                alert('Please Enter the Decision Description');
                                return false;
                            }
                        }
                    }
                }
            }
        }
       
        if(phaseArray.indexOf(currentPhase) > 1) {
            if(decisionStatemnt == '' || decisionStatemnt == ' ' || decisionStatemnt == null || 1 > decisionStatemnt.length) {
                alert('Please enter the decision ');
                return false;
            }
            if(decisionStatemnt != '' || decisionStatemnt != null){
            
                if(decisionStatemnt.substring(1,40) == 'amp;lt;div style="text-align: justify; '){
                    if(decisionStatemnt.substring(42,49) == 'amp;gt;'){
                        if(decisionStatemnt.substring(50,58) == 'amp;lt;p'){
                            if(decisionStatemnt.substring(59,66) == 'amp;gt;'){
                                if(decisionStatemnt.substring(67,76) == 'amp;lt;br'){
                                    alert('Please Enter the Decision Description');
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
        
        var  priority =  document.getElementById('pg:generalViewFrm:priorityValue').value;
        
        if(priority == '') {
            alert('Priority value should not be none');
            return false;
        }
        
        if(convertStringToBoolean(privateCheckbox)) {
            $('#privateImgSpan0').css('display','block');
            $('#privateImgSpan1').css('display','block');
            $('#privateImgSpan2').css('display','block');
            $('#privateImgSpan3').css('display','block');
            $('#privateImgSpan4').css('display','block');
            $('#privateImgSpan5').css('display','block');
        }
        else {
            $('#privateImgSpan0').css('display','none');
            $('#privateImgSpan1').css('display','none');
            $('#privateImgSpan2').css('display','none');
            $('#privateImgSpan3').css('display','none');
            $('#privateImgSpan4').css('display','none');
            $('#privateImgSpan5').css('display','none');
        }
        
        $('.title-container p').html(stripHTML(title));
        //$('.title-container p').html(title);
        
        var TopicMultiSelect = ''+$('#TopicMultiSelect').val();
        
        ProblemStatementOnClick(problemStatemnt,decisionStatemnt,TopicMultiSelect);
        ViewDecision();
        chatterRefresh(); 
    }
    
    //Batch update for Activities tab method
    function parseModifiedData(modifiedData,stringToBeSearched,decisionId){
        DecisionView.updateActivitesTab(modifiedData, stringToBeSearched,decisionId, function(result, event)
        {    
            if (event.status)
            {  
                var newTaskEvent = removeQuotes(result.taskEvent);
               var grid =$("#gridTaskEvent").data("kendoGrid");
               grid.dataSource.data(newTaskEvent );
               viewModel.ds.data(
                    viewModel.ds.options.schema.parse(newTaskEvent || []) //just in case thenew data is null
                );
               
               $('.task-tab').html('('+newTaskEvent.length+')');
               //kendoTaskEvent(newTaskEvent,'',AccountableForActivities,BackupForActivities,RoleAcceptanceForBackupInActivities);
               chatterRerender();
               isTaskDelay  = false;
                        if(newTaskEvent != null){
                            for(var i = 0;  newTaskEvent.length > i; i ++ ) {
                                if(newTaskEvent[i].delayTaskClass == 'delayTask' ) {
                                    isTaskDelay = true;
                                }
                            }
                        }
                        
                        if(isTaskDelay) {
                            $('#activityTab a').css('color','#ff0000 !important');
                        }
                        else {
                            $('#activityTab a').css('color','#222');
                        }
            }
        }, {escape:true});
    }    
    
    // save issues 
    function newIssues(){
        var title = document.getElementById('pg:popupforIssue:issuesName').value;
        if(title == '') {
            alert('Please enter the issue title');
            return false;
        }
        var descLength = document.getElementById('pg:popupforIssue:issueComment').value;
        if(descLength.length > 255){
            alert('Issue comment cannot be more than 255 chars');
            return false;
        }
        issuesSave();
    }
    
    function setTextAreaSize(){
        if(document.getElementById('pg:editTaskForm:editTask') != undefined ){
            document.getElementById('pg:editTaskForm:editTask').style.height = '80px';
            document.getElementById('pg:editTaskForm:editTask').style.width = '587px';
        }
        document.getElementById('pg:popupforEvent:editEvent').style.height = '80px';          
        document.getElementById('pg:popupforEvent:editEvent').style.width = '587px';
        
        document.getElementById('approvalComments').style.height = '80px';
        document.getElementById('approvalComments').style.width = '587px';
        
        document.getElementById('closeComments').style.height = '80px';
        document.getElementById('closeComments').style.width = '400px';
        
        document.getElementById('pg:popupforIssue:issueComment').style.height = '80px';
        document.getElementById('pg:popupforIssue:issueComment').style.width = '587px';
    }
    
    
    // Mood Slider
    
    var sliderTrackColor = new Array('#bbb', '#c00000','#ff0000','#feb80a','#92d050','#00b050 ');
    var effortSliderTrackColor = new Array('#bbb', '#00b050', '#92d050', '#feb80a', '#ff0000', '#c00000');
    //var sliderTrackColorEffort = new Array('#bbb','#00b050','#92d050','#feb80a','#ff0000','#c00000');
    var sliderHandleColor = new Array('#bbb','#a10000','#cb0000','#dfa003','#7bb53c','#00883e ');
    //var sliderHandleColorEffort = new Array('#bbb','#00883e ','#7bb53c','#dfa003','#cb0000','#a10000');
    function moodSlider (moodDefaultValue) {
        
        if(moodDefaultValue == '' || moodDefaultValue == null || moodDefaultValue == 'NaN') {
            moodDefaultValue = '0';
        }
        
        var moodDefaultValue = parseFloat(moodDefaultValue);  
        var moodDefault;
        moodDefault = parseFloat(moodDefaultValue);
        if(moodDefaultValue == 0 || moodDefaultValue == null) {
            moodDefault =3;
        }
        var slider = $("#moodSlider").kendoSlider({
            change: moodSliderOnChange,
            showButtons: false,
            min: 1,
            max: 5,
            value: moodDefault,
            smallStep: 1,
            largeStep: 1,
            tooltip:
              {
               enabled:false
              }
        }).data("kendoSlider");
        
        if(moodDefaultValue > 0) {
        
            $('#mood'+moodDefault).css('backgroundPosition','0 ' + (-25)* moodDefaultValue+'px');
            
            $('.mood-slider .k-draghandle').css('backgroundPosition', '0 ' + (-14)* (moodDefaultValue-1) +'px');
        }
        else {
            $('#mood'+moodDefault).css('backgroundPosition','0 -150px');
            
            $('.mood-slider .k-draghandle').css('backgroundPosition', '0 ' + (-14)* 5 +'px');
            
        }
        
     
        $('.mood-slider .k-slider-selection').css('background',sliderTrackColor[moodDefaultValue ]);
    }
    function moodSliderOnChange(e){                                       
        $('.mood').css('backgroundPosition', '0 0'); 
        socialCommand('Mood', e.value);
        $('#mood'+e.value).css('backgroundPosition','0 ' + (-25)* e.value+'px');
        
       // $('.mood-slider .k-draghandle').css('background-color',sliderHandleColor[e.value]);
     
        $('.mood-slider .k-slider-selection').css('background',sliderTrackColor[e.value]);
        
        $('.mood-slider .k-draghandle').css('backgroundPosition', '0 ' + (-14)* ((e.value)-1) +'px');
    }    
    
    // Effort Slider
    
    function effortSlider (effortDefaultValue) {
        
        
        if(effortDefaultValue == '' || effortDefaultValue == null || effortDefaultValue == 'NaN') {
            effortDefaultValue = '0';
        }
        
        var effortDefaultValue = Math.round(effortDefaultValue);  
        
        
        if(effortDefaultValue > 0) {
            $('#outcomeLink').css('display','block');
            
        }
        var effortDefault;
        if(effortDefaultValue == null) {
            effortDefaultValue = 0;
        }
        effortDefault = parseFloat(effortDefaultValue);
        if(effortDefaultValue == 0 || effortDefaultValue == null) {
            effortDefault =3;
        }
        var slider = $("#effortSlider").kendoSlider({
            change: effortSliderOnChange,
            showButtons: false,
            min: 1,
            max: 5,
            value: effortDefault,
            smallStep: 0.1,
            largeStep: 1,
            tooltip:
              {
               enabled:true
              }
        }).data("kendoSlider");
        
        $('.effort-slider .k-slider-selection').css('background',effortSliderTrackColor[effortDefaultValue ]);
        
        if(effortDefaultValue > 0) {
         $('.effort-slider .k-draghandle').css('background-image', 'url(' +'{!URLFOR($Resource.Images, 'newDecisionLifeCycle/image-sliderHandle-2-13x84.png')}' + ')'  );
            $('.effort-slider .k-draghandle').css('backgroundPosition', '0 '+ (-14)*(effortDefaultValue-1) + 'px');
        }
        else {
        $('.effort-slider .k-draghandle').css('background-image', 'url(' +'{!URLFOR($Resource.Images, 'newDecisionLifeCycle/image-sliderHandle-2-13x84.png')}' + ')'  );
            $('.effort-slider .k-draghandle').css('backgroundPosition', '0 ' + (-14)* (5) +'px');
        }
    }
    function effortSliderOnChange(e){                                       
       socialCommand('Effort', e.value);
        $("#resultSlider").val(3);
        
        var handClr = e.value;
        rounHandClr = Math.round(handClr);
        
        //--- added to change the colour-
        //$('.effort-slider .k-slider-selection').css('background',sliderTrackColorEffort[e.value ]);
        //-- end 
        
        $('.effort-slider .k-slider-selection').css('background',effortSliderTrackColor[rounHandClr ]);
        //$('.effort-slider .k-draghandle').css('background-color',sliderHandleColor[rounHandClr]);
        $('#outcomeLink').css('display','block'); //alert();
            $('.effort-slider .k-draghandle').css('background-image', 'url(' +'{!URLFOR($Resource.Images, 'newDecisionLifeCycle/image-sliderHandle-2-13x84.png')}' + ')'  );
            $('.effort-slider .k-draghandle').css('backgroundPosition', '0 '+ (-14)*(rounHandClr-1) + 'px');
    }
    
    // Result Slider
    
    function resultSlider (resultDefaultValue) {
        
        if(resultDefaultValue == '' || resultDefaultValue == null || resultDefaultValue == 'NaN') {
            resultDefaultValue = '0';
        }
        
        if(resultDefaultValue > 0) {
            $('#outcomeLink').css('display','block');
        }
        
        var resultDefault;
        resultDefaultValue = Math.round(resultDefaultValue);  
        resultDefault =parseInt(resultDefaultValue);  
        if(resultDefaultValue == 0 || resultDefaultValue == null) {
            resultDefault =3;
        }
        var slider = $("#resultSlider").kendoSlider({
            change: resultSliderOnChange,
            showButtons: false,
            min: 1,
            max: 5,
            value: resultDefault, 
            smallStep: 0.1,
            largeStep: 1,
            tooltip:
              {
               enabled:true,
              // template: kendo.template(templateString)
              }
        }).data("kendoSlider");
        
        
        $('.result-slider .k-slider-selection').css('background',sliderTrackColor[resultDefaultValue]);
        
        if(resultDefaultValue > 0) {
           $('.result-slider .k-draghandle').css('backgroundPosition', '0 '+ (-14)*(resultDefaultValue-1) + 'px');
        }
        else {
            $('.result-slider .k-draghandle').css('backgroundPosition', '0 ' + (-14)* (5) +'px');
        }
        
       
        
    }
    function resultSliderOnChange(e){                                       
        socialCommand('Result', e.value); 
        var handClr = e.value;
        rounHandClr = Math.round(handClr);
        $('.result-slider .k-slider-selection').css('background',sliderTrackColor[rounHandClr ]);
       // $('.result-slider .k-draghandle').css('background',sliderHandleColor[rounHandClr ]); 
        $('#outcomeLink').css('display','block');
       // console.log('e.value'+rounHandClr);
        //if(e.value == 5 || e.value == 4 || e.value == 3 || e.value == 2 || e.value == 1){
            $('.result-slider .k-draghandle').css('backgroundPosition', '0 '+ (-14)*(rounHandClr-1) + 'px');
        
    }
   
    // Star Rating
    var starValue;
    function starRate(starNum){  
        var starNumber = parseFloat(starNum);
        $('.star').css('backgroundPosition', '0 0');                     
        for(var i=starNumber ; i>0; i--){ 
            //$('#star'+i).css('backgroundPosition', '0 -16px'); 
            $('#star'+i).css('backgroundPosition', '0 -18px');                              
        }   
    }
   
    function starValueSet(starNum) {
        starValue = parseFloat(starNum);
    }
   
    function starUpdate(starNum) {   
        starValue = parseFloat(starNum);
        socialCommand('Rating',starNum);
    }
    
    function starOut(){
        for(var i=5; i>0; i--){        
            $('#star'+i).css('backgroundPosition', '0 0');    
        }            
        for(var j=starValue; j>0; j--){ 
            $('#star'+j).css('backgroundPosition', '0 -18px');                               
        } 
    }
    
    // Clone popup validation script
    function showRelationField(chkFld,enableFld){
        if(document.getElementById(chkFld).checked == true){
            document.getElementById(enableFld).style.display = 'block';
        } else{
            document.getElementById(enableFld).style.display = 'none';
        }
    }
    
    // Disable Right Panels
    
    function showDisablePanel(panelID, disableID, accountable, responsible, consultant, informed, roleAcceptance1){
       // alert(panelID);
        if(roleAcceptanceStatusGolbal != undefined) {
            roleAcceptance1 = roleAcceptanceStatusGolbal;
        }
      
        if(convertStringToBoolean(accountable) || convertStringToBoolean(responsible) || convertStringToBoolean(consultant) || convertStringToBoolean(informed) ) {
            if(currentPhase != 'Close') {
                if(roleAcceptance1 == 'Not Accepted' || roleAcceptance1 == 'Pending Approval') {
                   
                    var panelHeight = $('#panelRight').css('height');
                    var panelWidth  = $('#panelRight').css('width');
                   
                    if(panelID == 'popular-panel'){
                        panelHeight = '160px';
                        $('#'+disableID).css('margin-top','-27px');
                    }
                    if(panelID == 'social-panel')
                    {
                      $('#'+disableID).css('margin-top','-27px');     
                      $('#'+disableID).css('margin-left','-1px');                      
                    }
                    if(panelID == 'social-panel-phasetime'){
                      $('#'+disableID).css('margin-top','-73px');     
                      $('#'+disableID).css('margin-left','-1px');
                    }
                    $('#'+disableID).css('width',panelWidth);
                    $('#'+disableID).css('height',panelHeight);
                    $('#'+disableID).css('display','block');
                    $('#'+panelID+'-callout').css('display','block');
                    $('#'+panelID+'-arrow').css('display','block');
                    var msg = '';
                    if(panelID == 'popular-panel') {
                        msg = 'In order to perform this action, you need to accept your role.';
                    }
                    else if (panelID == 'social-panel') {
                        msg = 'In order to perform this action, you need to accept your role.';
                    }
                    else  if(panelID == 'tags-panel') {
                        msg = 'In order to perform this action, you need to accept your role.';
                    }
                    else  if(panelID == 'social-panel-phasetime') {
                        msg = 'In order to perform this action, you need to accept your role.';
                    }
                    else  if(panelID == 'classification-panel') {
                        msg = 'In order to perform this action, you need to accept your role.';
                    }
                    else {
                        msg = 'In order to perform this action, you need to accept your role.';
                    }
                    $('#'+panelID+'-content').html(msg);
                }
            }
            else {
                if(panelID != 'popular-panel' ) {
                
                 if(panelID != 'addnew-panel' ) {
                    
                   if(  panelID != 'outcome-panel' ) {
                    
                        if(  panelID != 'outcome-panel' ) {
                        
                            if (panelID != 'social-panel'){  
                                    
                                    var panelHeight = $('#panelRight').css('height');
                                    var panelWidth  = $('#panelRight').css('width');
                                    
                                     if(panelID == 'popular-panel'){
                                        panelHeight = '160px';
                                        $('#'+disableID).css('margin-top','-27px');  
                                     }
                                     if(panelID == 'social-panel')
                                     {
                                       $('#'+disableID).css('margin-top','-27px');     
                                       $('#'+disableID).css('margin-left','-1px');                      
                                     }
                                     if(panelID == 'social-panel-phasetime')
                                     {
                                       $('#'+disableID).css('margin-top','-73px');     
                                       $('#'+disableID).css('margin-left','-1px');                      
                                     }
                                     $('#'+disableID).css('width',panelWidth);
                                     $('#'+disableID).css('height',panelHeight);
                                     $('#'+disableID).css('display','block');
                                    
                                     $('#'+panelID+'-callout').css('display','block');
                                     $('#'+panelID+'-arrow').css('display','block');
                                   
                                    var msg = '';
                                    if(panelID == 'popular-panel') { 
                                        msg = 'In order to use the action, the decision needs to be re-shared.';
                                    }
                                    else if (panelID == 'social-panel') {
                                        msg = 'In order to use Social Tool, the decision needs to be re-shared.';
                                    }
                                    else  if(panelID == 'tags-panel') {
                                        msg = 'In order to use Tag Tool, the decision needs to be re-shared.';
                                    }
                                    else  if(panelID == 'addnew-panel') {
                                        msg = 'In order to use Add/New Tool, the decision needs to be re-shared.';
                                    }
                                     else  if(panelID == 'social-panel-phasetime') {
                                        msg = 'In order to use timing section, the decision needs to be re-shared.';
                                    }
                                    else {
                                        msg = 'In order to use the Outcome Tool, the decision needs to be re-shared.';
                                    }
                                    $('#'+panelID+'-content').html(msg);
                                 
                            }
                        }
                    }
                }
              }  
            }
            if(currentPhase == 'Close') {
                if(roleAcceptance1 == 'Not Accepted' || roleAcceptance1 == 'Pending Approval') {
                    var panelHeight = $('#panelRight').css('height');
                    var panelWidth  = $('#panelRight').css('width');
                    
                    if(panelID == 'popular-panel'){
                        panelHeight = '160px';
                        $('#'+disableID).css('margin-top','-27px');  
                    }
                    if(panelID == 'social-panel')
                    {
                      $('#'+disableID).css('margin-top','-27px');     
                      $('#'+disableID).css('margin-left','-1px');                      
                    }
                    if(panelID == 'outcome-panel')
                    {
                      $('#'+disableID).css('margin-top','-27px');     
                    }
                    $('#'+disableID).css('width',panelWidth);
                    $('#'+disableID).css('height',panelHeight);
                    $('#'+disableID).css('display','block');
                    
                    $('#'+panelID+'-callout').css('display','block');
                    $('#'+panelID+'-arrow').css('display','block');
                    var msg = '';
                    if(panelID == 'popular-panel') {
                        msg = 'In order to perform this action, you need to accept your role.';
                    }
                    else if (panelID == 'social-panel') {
                        msg = 'In order to perform this action, you need to accept your role.';
                    }
                    else  if(panelID == 'tags-panel') {
                        msg = 'In order to perform this action, you need to accept your role.';
                    }
                    else  if(panelID == 'classification-panel') {
                        msg = 'In order to perform this action, you need to accept your role.';
                    }
                    else {
                        msg = 'In order to perform this action, you need to accept your role.';
                    }
                    $('#'+panelID+'-content').html(msg);
                    
                }
            }
            
            if(panelID == 'classification-panel' )  
            {
                if( roleAcceptance1 == 'Approved/Accepted'){
                    if(!convertStringToBoolean(accountable)) {
                        if(!convertStringToBoolean(responsible)) {
                            
                            if( !convertStringToBoolean(document.getElementById('userBackup').value)   ) { 
                                var panelHeight = $('#'+panelID).css('height');
                                var panelWidth = $('#'+panelID).css('width');
                                panelHeight = parseInt(panelHeight)+ 20 +'px';
                                $('#'+disableID).css('height',panelHeight);
                                $('#'+disableID).css('width',panelWidth);
                                $('#'+disableID).css('display','block');
                                $('#'+panelID+'-callout').css('display','block');
                                $('#'+panelID+'-arrow').css('display','block');
                                var msg ='You need to be responsible,accountable or backup to use this feature.';
                                $('#'+panelID+'-content').html(msg);
                             }
                            
                        }
                    }
                }
            }
        }
        else {
            if(panelID != 'popular-panel') {
                if(panelID != 'addnew-panel'){
                    var panelHeight = $('#panelRight').css('height');
                    var panelWidth  = $('#panelRight').css('width');
                    if(panelID == 'popular-panel'){
                        panelHeight = '160px';
                        $('#'+disableID).css('margin-top','-27px');  
                    }
                    if(panelID == 'social-panel')
                    {
                      $('#'+disableID).css('margin-top','-27px');     
                      $('#'+disableID).css('margin-left','-1px');                      
                    }
                    if(panelID == 'social-panel-phasetime')
                    {
                      $('#'+disableID).css('margin-top','-73px');     
                      $('#'+disableID).css('margin-left','-1px');                      
                    }
                    $('#'+disableID).css('width',panelWidth);
                    $('#'+disableID).css('height',panelHeight);
                    $('#'+disableID).css('display','block');
                    $('#'+panelID+'-callout').css('display','block');
                    $('#'+panelID+'-arrow').css('display','block');
                    var msg ='You do not have permission to apply any action.'
                    $('#'+panelID+'-content').html(msg);
                    $('#outcomeLink').css('display','block');
                }
            }
        }
         
        // Outcome validation
        if(currentPhase != 'Close' ){
          if( currentPhase != 'Evaluate' ){
             if(panelID == 'outcome-panel') {
                    var panelHeight = $('#panelRight').css('height');
                    var panelWidth  = $('#panelRight').css('width');
                    $('#'+disableID).css('width',panelWidth);
                    $('#'+disableID).css('height',panelHeight);
                    $('#'+disableID).css('margin-top','-27px'); 
                    $('#'+disableID).css('display','block');
                    $('#'+panelID+'-callout').css('display','block');
                    $('#'+panelID+'-arrow').css('display','block');
                    var msg ='Outcome is available only after evaluate phase.'
                    $('#'+panelID+'-content').html(msg);
                    
                    $('#outcomeLink').css('display','block');
                    
                 }
            }
        }
    }
    
    function hideDisablePanel(panelID,disableID){
        $('#'+disableID).css('display','none');
        $('#'+panelID+'-callout').css('display','none');
        $('#'+panelID+'-arrow').css('display','none');
    }
    
    // ************* expand collapse ************ //
    
    function expandCollapse(toBeExpandCollapse, expandCollapseImage) {
                     
        var displayStyle = $('#'+toBeExpandCollapse).css('display');        
        if(displayStyle == 'block'){
            $('#'+expandCollapseImage).css('backgroundPosition','0 -8px');
            $('#'+toBeExpandCollapse).css('display','none');
        }else{
            $('#'+expandCollapseImage).css('backgroundPosition','0 0');
            $('#'+toBeExpandCollapse).css('display','block');
        }
        return true;
      
    }
    
    // ************* expand collapse right panel ************ //
    
    function expandCollapsePanel(expandCollapseContent, expandCollapseHead) {
        
        var displayStyle = $('#'+expandCollapseContent).css('display');        
        if(displayStyle == 'block'){
            $('#'+expandCollapseHead).css('backgroundPosition','0 0');
            $('#'+expandCollapseContent).css('display','none');
        }else{
            $('#'+expandCollapseHead).css('backgroundPosition','0 -25px');
            $('#'+expandCollapseContent).css('display','block');
        }
        //alert($('#'+expandCollapseHead).css('backgroundPosition'));
    }
    
    function changeBgPos(headId){
        
        var bgPos = $('#'+headId).css('backgroundPosition');
        if(bgPos == "0px -25px"){
            $('#'+headId).css('backgroundPosition','0 0');
        }else{
            $('#'+headId).css('backgroundPosition','0 -25px');
            $('#'+headId).css('color','#fff');
        }
    }
    
    function changeBgPos1(contentId, headId){
        var displayStyle = $('#'+contentId).css('display');
        var bgPos = $('#'+headId).css('backgroundPosition');
        if(displayStyle == 'block'){
            if(bgPos == "0px 0px"){
                $('#'+headId).css('backgroundPosition','0 -25px');




            }
        }else{
            $('#'+headId).css('backgroundPosition','0 0px');
        }    
    }
    
    
    // **************** Decision and Social Input Detail ********** //
    function decisionSocialInputDetail(decisionId, socialInputId, currentPhases, currentStatus, accountable, responsible, consultant, informed, backUpForAccountable, veto, roleAcceptanceStatus, finalApprovalStatus, stanceApprovalStatus, userRole, isApproved ) {
        roleAcceptanceStatusGolbal = roleAcceptanceStatus;
        
        AccountableForActivities = accountable;
        BackupForActivities = backUpForAccountable;
        RoleAcceptanceForBackupInActivities = roleAcceptanceStatus;
        responsibleForActivities = responsible;
        backUp = backUpForAccountable;
        var hotSpots = new Array('spot-share', 'spot-decide', 'spot-approve', 'spot-execute', 'spot-evaluate', 'spot-close');
        var pos = phaseArray.indexOf(currentPhases);        
        currentPhase = currentPhases;
        // Phases arrow 
        $('#phase-container').html('');
        $('#phase-container').addClass('ra') ;
        $('#topArrow').css('display', 'none');
        $('#bottomArrow').css('display', 'none');
        $('#topArrow-nonAccBackup').css('display', 'none');
        if(convertStringToBoolean(accountable) || convertStringToBoolean(backUpForAccountable)){
           if( roleAcceptanceStatus == 'Approved/Accepted' )
           $('#phase-container').attr('title','Follow the guiding arrows to progress the decision')
           else
           $('#phase-container').attr('title','Only Accountable/Backup can progress the decision')
        }
        else{
          $('#phase-container').attr('title','Only Accountable/Backup can progress the decision')
         }
        if(pos > 1){
            if(convertStringToBoolean(accountable) || convertStringToBoolean(backUpForAccountable)){
                if(roleAcceptanceStatusGolbal == 'Approved/Accepted'){
                    $('#phase-container').append('<a href = "javascript: void(0)" class = "spot-share" id = "'+decisionId+','+socialInputId+',Share" onclick = "decisionPhaseChange(this.id) " ondblclick="decisionPhaseChange(this.id)"></a>');
                }
            }
        }
        
        if(pos  != 6) {
            if(convertStringToBoolean(accountable) || convertStringToBoolean(backUpForAccountable)){
                if(roleAcceptanceStatusGolbal == 'Approved/Accepted'){
                    $('#phase-container').append('<a href = "javascript: void(0)" class = "spot-close" id = "'+decisionId+','+socialInputId+',Close" onclick = "decisionPhaseChange(this.id)" ondblclick="decisionPhaseChange(this.id)"></a>');
                }
            }
        }
        if(  pos  == 5  || pos == 6 ) {
            if(  ( currentStatus != 'Rejected' ) || pos == 6  ) {
                if(document.getElementById('pg:decisonViewState:approvedOrRejected').value == 'true'){
                    if(  convertStringToBoolean(accountable) || convertStringToBoolean(backUpForAccountable)){
                        if(roleAcceptanceStatusGolbal == 'Approved/Accepted'){
                            $('#phase-container').append('<a href = "javascript: void(0)" class = "spot-execute" id = "'+decisionId+','+socialInputId+',Execute" onclick = "decisionPhaseChange(this.id)" ondblclick="decisionPhaseChange(this.id)"></a>');
                        }
                    }
                }
            }
        }
        
         
        if(pos == 0){
            $('.ra').css('backgroundPosition', '0 '+pos*(-30)+'px');
            if(convertStringToBoolean(accountable) || convertStringToBoolean(backUpForAccountable)){
                if(roleAcceptanceStatusGolbal == 'Approved/Accepted'){
                    $('#phase-container').append('<a href = "javascript: void(0)" class = "'+hotSpots[pos]+'" id = "'+decisionId+','+socialInputId+','+phaseArray[pos+1]+'" onclick = "decisionPhaseChange(this.id)" ondblclick="decisionPhaseChange(this.id)"></a>');
                    
                    $('#topArrow').css('display', 'block');
                    $('#bottomArrow').css('display', 'block');
                    $('#topArrow').css('background-position', '0px 0px');
                    $('#bottomArrow').css('background-position', '0px 0px');
                }
            }
            else{    //Code to show top pins for non accountable or non backup
                    $('#topArrow-nonAccBackup').css('display', 'block');
                    $('#topArrow-nonAccBackup').css('background-position', '0px 0px');
            }
        }
        if(pos == 1){
            $('.ra').css('backgroundPosition', '0 '+pos*(-30)+'px');
            if(convertStringToBoolean(accountable) || convertStringToBoolean(backUpForAccountable)){
                if(roleAcceptanceStatusGolbal == 'Approved/Accepted'){
                    $('#phase-container').append('<a href = "javascript: void(0)" class = "'+hotSpots[pos]+'" id = "'+decisionId+','+socialInputId+','+phaseArray[pos+1]+'" onclick = "decisionPhaseChange(this.id)" ondblclick="decisionPhaseChange(this.id)"></a>');
                    
                    $('#topArrow').css('display', 'block');
                    $('#bottomArrow').css('display', 'block');
                    $('#topArrow').css('background-position', '0px -34px');
                    $('#bottomArrow').css('background-position', '0px -42px');
                }
            }
            else{    //Code to show top pins for non accountable or non backup
                    $('#topArrow-nonAccBackup').css('display', 'block');
                    $('#topArrow-nonAccBackup').css('background-position', '0px -34px');
            }
        }
        if(pos == 2){
            $('.ra').css('backgroundPosition', '0 '+pos*(-30)+'px');
            if(convertStringToBoolean(accountable) || convertStringToBoolean(backUpForAccountable)){
                if(roleAcceptanceStatusGolbal == 'Approved/Accepted'){
                    $('#phase-container').append('<a href = "javascript: void(0)" class = "'+hotSpots[pos]+'" id = "'+decisionId+','+socialInputId+','+phaseArray[pos+1]+'" onclick = "decisionPhaseChange(this.id)" ondblclick="decisionPhaseChange(this.id)"></a>');
                    $('#topArrow').css('display', 'block');
                    $('#bottomArrow').css('display', 'block');
                    $('#topArrow').css('background-position', '0px -68px');
                    $('#bottomArrow').css('background-position', '0px -84px');
                }
            }
            else{  //Code to show top pins for non accountable or non backup
                    $('#topArrow-nonAccBackup').css('display', 'block');
                    $('#topArrow-nonAccBackup').css('background-position', '0px -68px');
            }
        }
        if(pos == 3){
            
             $('.ra').css('backgroundPosition', '0 '+pos*(-30)+'px');
            if(currentStatus == 'Rejected') {
                if(convertStringToBoolean(accountable) || convertStringToBoolean(backUpForAccountable)){
                    if(roleAcceptanceStatusGolbal == 'Approved/Accepted'){      
                        $('#phase-container').append('<a href = "javascript: void(0)" class = "spot-evaluate" id = "'+decisionId+','+socialInputId+',Evaluate" onclick = "decisionPhaseChange(this.id)" ondblclick="decisionPhaseChange(this.id)"></a>');
                        $('#topArrow').css('display', 'block');
                        $('#bottomArrow').css('display', 'block');
                        $('#topArrow').css('background-position', '0px -102px');
                        $('#bottomArrow').css('background-position', '0px -168px');
                    }
                }
                else{   //Code to show top pins for non accountable or non backup
                    $('#topArrow-nonAccBackup').css('display', 'block');
                    $('#topArrow-nonAccBackup').css('background-position', '0px -102px');
               }  
            }
            if(currentStatus == 'Approved') {
                $('.ra').css('backgroundPosition', '0 '+4*(-30)+'px');
                if(convertStringToBoolean(accountable) || convertStringToBoolean(backUpForAccountable)){
                    if(roleAcceptanceStatusGolbal == 'Approved/Accepted'){      
                        $('#phase-container').append('<a href = "javascript: void(0)" class = "'+hotSpots[pos]+'" id = "'+decisionId+','+socialInputId+','+phaseArray[pos+1]+'" onclick = "decisionPhaseChange(this.id)" ondblclick="decisionPhaseChange(this.id)"></a>');
                        $('#topArrow').css('display', 'block');
                        $('#bottomArrow').css('display', 'block');
                        $('#topArrow').css('background-position', '0px -136px');
                        $('#bottomArrow').css('background-position', '0px -168px');
                    }
                }
                else{  //Code to show top pins for non accountable or non backup
                    $('#topArrow-nonAccBackup').css('display', 'block');
                    $('#topArrow-nonAccBackup').css('background-position', '0px -136px');
                }
            }
        }
        if(pos == 4){
            $('.ra').css('backgroundPosition', '0 '+5*(-30)+'px');
            if(convertStringToBoolean(accountable) || convertStringToBoolean(backUpForAccountable)){
                if(currentStatus == 'Approved'){        
                    $('#phase-container').append('<a href = "javascript: void(0)" class = "'+hotSpots[pos]+'" id = "'+decisionId+','+socialInputId+','+phaseArray[pos+1]+'" onclick = "decisionPhaseChange(this.id)" ondblclick="decisionPhaseChange(this.id)"></a>');  
                    $('#topArrow').css('display', 'block');
                    $('#bottomArrow').css('display', 'block');
                    $('#topArrow').css('background-position', '0px -170px');
                    $('#bottomArrow').css('background-position', '0px -210px'); 
                }
                else{
                    $('#phase-container').append('<a href = "javascript: void(0)" class = "'+hotSpots[pos]+'" id = "'+decisionId+','+socialInputId+','+phaseArray[pos+1]+'" onclick = "decisionPhaseChange(this.id)" ondblclick="decisionPhaseChange(this.id)"></a>');  
                    $('#topArrow').css('display', 'block');
                    $('#bottomArrow').css('display', 'block');
                    $('#topArrow').css('background-position', '0px -170px');
                    $('#bottomArrow').css('background-position', '0px -210px');
                
                }
                
            }
            else{   //Code to show top pins for non accountable or non backup
                    $('#topArrow-nonAccBackup').css('display', 'block');
                    $('#topArrow-nonAccBackup').css('background-position', '0px -170px');
            }
        }
        if(pos==5){
            
            if(convertStringToBoolean(accountable) || convertStringToBoolean(backUpForAccountable)){
                if(currentStatus != 'Rejected'){   
                    $('.ra').css('backgroundPosition', '0 '+6*(-30)+'px');
                    $('#phase-container').append('<a href = "javascript: void(0)" class = "'+hotSpots[pos]+'" id = "'+decisionId+','+socialInputId+','+phaseArray[pos+1]+'" onclick = "decisionPhaseChange(this.id)" ondblclick="decisionPhaseChange(this.id)"></a>');
                    $('#topArrow').css('display', 'block');
                    $('#bottomArrow').css('display', 'block');
                    $('#topArrow').css('background-position', '0px -204px');
                    $('#bottomArrow').css('background-position', '0px -252px');
                }
                else
                {    $('.ra').css('backgroundPosition', '0 '+7*(-30)+'px');
                   // $('#phase-container').append('<a href = "javascript: void(0)" class = "'+hotSpots[pos]+'" id = "'+decisionId+','+socialInputId+','+phaseArray[pos+1]+'" onclick = "decisionPhaseChange(this.id)" ondblclick="decisionPhaseChange(this.id)"></a>');
                    $('#topArrow').css('display', 'block');
                    $('#bottomArrow').css('display', 'block');
                    $('#topArrow').css('background-position', '0px -204px');
                    $('#bottomArrow').css('background-position', '0px -294px');
                }
            }
            else{   //Code to show top pins for non accountable or non backup
                    if(currentStatus != 'Rejected'){
                        $('.ra').css('backgroundPosition', '0 '+6*(-30)+'px');
                    }
                    else{
                        $('.ra').css('backgroundPosition', '0 '+7*(-30)+'px');
                    
                    }
                    $('#topArrow-nonAccBackup').css('display', 'block');
                    $('#topArrow-nonAccBackup').css('background-position', '0px -204px');
            }
        }
        if(pos==6){
            if(convertStringToBoolean(accountable) || convertStringToBoolean(backUpForAccountable)){
                if(document.getElementById('pg:decisonViewState:approvedOrRejected').value == 'true'){
                    //$('#topArrow').css('display', 'block');
                    $('#bottomArrow').css('display', 'block');
                    //$('#topArrow').css('background-position', '0px 0px');
                    $('#bottomArrow').css('background-position', '0px -336px');
                    $('.ra').css('backgroundPosition', '0 '+8*(-30)+'px');
                } else {
                    //$('#topArrow').css('display', 'block');
                    $('#bottomArrow').css('display', 'block');
                    //$('#topArrow').css('background-position', '0px 0px');
                    $('#bottomArrow').css('background-position', '0px -375px');
                    $('.ra').css('backgroundPosition', '0 '+9*(-30)+'px');
                }
            } else {
                 $('.ra').css('backgroundPosition', '0 '+9*(-30)+'px');
             }
        }
        
        // **********//////////
        
        if(pos >= 1) {
            
            document.getElementById('pg:generalViewFrm:privateChecknBoxVal').disabled = true;
        }
                    
        // ****** command center ********** //
        // status
        var statusArray = new Array('Undecided', 'Approved','Rejected','Executed','Evaluated','Withdrawn','Cancelled', 'Duplicate', 'Closed' );
        var statusColorArray = new Array('#ffba00', '#23a554','#c00000','#0f7e39','#003f75','#f273af','#fed46c', '#1ab39f', '#373737' );
        var statusPos = statusArray.indexOf(currentStatus); 
        
        //assign color code and text
        $('#status-block').html(currentStatus);
        $('#statusColor').css('background',statusColorArray[statusPos]);
        var myStace = 'N/A';        
        //My Stance
        var stanceArray = new Array('Approved', 'Supported', 'Rejected','Opposed', 'Pending','Not Given','N/A');
        var stanceColorArray = new Array('#23a554','#23a554', '#e81b05','#e81b05', '#ff7800','#ff6600','#ffba00');
        

         
       
        
        //stanceApprovalStatus
        // To change my stance value once the collaborater gives his my stance other then draft or share phase. 
        if(currentPhases != 'Draft') {
            if(currentPhases != 'Share') {
                if(stanceApprovalStatus == 'Approved') {
                    myStace = 'Supported';
                }
                if(stanceApprovalStatus == 'Rejected') {
                    myStace = 'Opposed';
                }
            }
            
        }
        if(stanceApprovalStatus == 'Pending Approval') {
            myStace = 'Pending';
        }
        if (currentPhases == 'Propose' ) {
            if(convertStringToBoolean(accountable) || convertStringToBoolean(responsible) || convertStringToBoolean(consultant)) {
              //  myStace = 'Not Given';
            } 
        }
         
        //assign color code and text 
         var stancePos = stanceArray.indexOf(myStace); 
         
        $('#stance-block').html(myStace);
        
        $('#mystanceColor').css('background',stanceColorArray[stancePos]);
        
        // hide backup and veto boxes if role pending and show approve icon else display backup and veto if role accepted or close phase or not accepted
         
        if(roleAcceptanceStatusGolbal == 'Approved/Accepted' || currentPhases == 'Close'  || roleAcceptanceStatusGolbal == 'Not Accepted' )
        {
          $('#backupVeto').css('display','block')
          $('#roleApproveIcon').css('display','none')  
        }
        else
        if(roleAcceptanceStatusGolbal == 'Pending Approval' )
        {
           $('#roleApproveIcon').css('display','block')  
           $('#glyphOverview').css('display','block')                             
           $('#roleApproveIcon').click(function(){showDecisionApprovalModal( decisionId ,approvalJson[0].id ,'Role Acceptance','fromTab')})

        }
        // if socialinput is for a group
        else
        {
          $('#backupVeto').css('display','block')
          $('#roleApproveIcon').css('display','none') 
        }
        // RACI block
        var raciBlockArray = new Array('Approved/Accepted', 'Not Accepted','Pending Approval','');
        var raciBlockColorArray = new Array('#373737', '#c00000','#ff6600','#d9d9d9');
        
        var raciBlockPos = raciBlockArray.indexOf(roleAcceptanceStatus); 
        if(convertStringToBoolean(backUpForAccountable)) {
            $('#b-block').css('background',raciBlockColorArray[raciBlockPos]);
           // $('#b-block').bind('click',function(){  showCurrentTab('actionsTab','lifeCycleActions'); });
        }
        if(convertStringToBoolean(accountable)) {
            $('#a-block').css('background',raciBlockColorArray[raciBlockPos]);
           // $('#a-block').bind('click',function(){  showCurrentTab('actionsTab','lifeCycleActions'); }); 
        }
        if(convertStringToBoolean(responsible)) {
            $('#r-block').css('background',raciBlockColorArray[raciBlockPos]);
           // $('#r-block').bind('click',function(){  showCurrentTab('actionsTab','lifeCycleActions'); });
        }
        if(convertStringToBoolean(consultant)) {
            $('#c-block').css('background',raciBlockColorArray[raciBlockPos]);
          //  $('#c-block').bind('click',function(){  showCurrentTab('actionsTab','lifeCycleActions'); });
        }
        if(convertStringToBoolean(informed)) {
            $('#i-block').css('background',raciBlockColorArray[raciBlockPos]);
           // $('#i-block').bind('click',function(){  showCurrentTab('actionsTab','lifeCycleActions'); });
        }
        if(convertStringToBoolean(veto)) {
            $('#v-block').css('background',raciBlockColorArray[raciBlockPos]);
           // $('#v-block').bind( 'click', function(){  showCurrentTab('actionsTab','lifeCycleActions'); } );  
        }
        
        
        
        // ************* financials-actual **********************//
        if(3 > pos) {
            $('.financials-actual input').attr('readonly','readonly');
        }
        else {
            $('.financials-actual input').removeAttr('readonly');
        }
        
       // $("#j_id0:j_id59:financials-actual").onkeypress(function() {
      //          return false;
      //  });
       
        // ************  popular button RACI permission ******************* //
        
        // ****** Delete and Share Button Enable Sys ****** //
         if(chkRecPermission == true) {
            $('#popularDelete').removeClass('btn-disabled');
            $("#popularDelete").click(function() {
                deleteDecision();
            });
            
            $('#generalDelete').removeClass('btn-disabled');
            $("#generalDelete").click(function() {
                deleteDecision();
            });
            
            $('#generalBtmDelete').removeClass('btn-disabled');
            $("#generalBtmDelete").click(function() {
                deleteDecision();
            });
            
            $('#popularShare').removeClass('btn-disabled');
            $("#popularShare").click(function() {
                addShare();
            });
        }
        else {
            $('#popularDelete').addClass('btn-disabled');
            $("#popularDelete").attr('onclick','').unbind('click');
            
            $('#generalDelete').addClass('btn-disabled');
            $("#generalDelete").attr('onclick','').unbind('click');
            
            $('#generalBtmDelete').addClass('btn-disabled');
            $("#generalBtmDelete").attr('onclick','').unbind('click');
            
            $('#popularShare').addClass('btn-disabled');
            $("#popularShare").attr('onclick','').unbind('click');
        
            $('.popular-del-share').css('display','none');
        }
        
        
        var roleAcceptanceResponsible = false;
        var roleAcceptanceBackUp = false;
        var roleAcceptanceConsultan = false;
        var roleAcceptanceInformed = false;
        var roleAcceptanceVeto = false;
        
        if(convertStringToBoolean(responsible)) {
            if(roleAcceptanceStatus == 'Not Accepted' || roleAcceptanceStatus == 'Pending Approval'){
                roleAcceptanceResponsible = false;
            }
            else {
                roleAcceptanceResponsible = true;
            }
        }
        
        if(convertStringToBoolean(backUpForAccountable)) {
            if(roleAcceptanceStatus == 'Not Accepted' || roleAcceptanceStatus == 'Pending Approval'){
                roleAcceptanceBackUp = false;
            }
            else {
                roleAcceptanceBackUp = true;
            }
        }
        
        if(convertStringToBoolean(consultant)) {
            if(roleAcceptanceStatus == 'Not Accepted' || roleAcceptanceStatus == 'Pending Approval'){
                roleAcceptanceConsultan = false;
            }
            else {
                roleAcceptanceConsultan = true;
            }
        }
        
        if(convertStringToBoolean(informed)) {
            if(roleAcceptanceStatus == 'Not Accepted' || roleAcceptanceStatus == 'Pending Approval'){
                roleAcceptanceInformed = false;
            }
            else {
                roleAcceptanceInformed = true;
            }
        }
        
        if(convertStringToBoolean(veto)) {
            if(roleAcceptanceStatus == 'Not Accepted' || roleAcceptanceStatus == 'Pending Approval'){
                roleAcceptanceVeto = false;
            }
            else {
                roleAcceptanceVeto = true;
            }
        }
        
        // ****** Clone Button Enable for RA/Sys/ CI ****** //
        //if(convertStringToBoolean(accountable) || convertStringToBoolean(roleAcceptanceResponsible) || convertStringToBoolean(roleAcceptanceBackUp) ||  || chkRecPermission == true) {
            
            
        //}
        /*else {
            $('#popularClone').addClass('btn-disabled');
            $("#popularClone").attr('onclick','').unbind('click');
            
            $('#generalClone').addClass('btn-disabled');
            $("#generalClone").attr('onclick','').unbind('click');
            $('#generalBtmClone').addClass('btn-disabled');
            $("#generalBtmClone").attr('onclick','').unbind('click');
        }*/
        
       
        
         // ****** Edit Button  Disable for all ****** //
        $('#popularEdit').addClass('btn-disabled');
        $("#popularEdit").attr('onclick','').unbind('click');
        
        $('#generalEdit').addClass('btn-disabled');
        $("#generalEdit").attr('onclick','').unbind('click');
        $('#generalBtmEdit').addClass('btn-disabled');
        $("#generalBtmEdit").attr('onclick','').unbind('click');
        $('#generalClone').addClass('btn-disabled');
        $("#generalClone").attr('onclick','').unbind('click');
        $('#generalBtmClone').addClass('btn-disabled');
        $("#generalBtmClone").attr('onclick','').unbind('click'); 
        
        
         // ****** People  Button  Disable for all ****** //
        $('#popularPeople').addClass('btn-disabled');
        $("#popularPeople").attr('onclick','').unbind('click');
      
        $('#generalPeople').addClass('btn-disabled');
        $("#generalPeople").attr('onclick','').unbind('click');
        
        
        // ****** Relation  Button  Disable for all ****** //
        $('#popularRelation').addClass('btn-disabled');
        $("#popularRelation").attr('onclick','').unbind('click');
      
        $('#generalRelation').addClass('btn-disabled');
        $("#generalRelation").attr('onclick','').unbind('click');
        
        // ****** Decision  Button  Disable for all ****** //
        $('#popularDecision').addClass('btn-disabled');
        $("#popularDecision").attr('onclick','').unbind('click');
        
        
        // ****** Decision  Button  Disable for all ****** //
        $('#popularIssue').addClass('btn-disabled');
        $('#popularIssue').attr('onclick','').unbind('click');
        
        
        // ****** Issues  Button  Disable for all ****** //
        $('#popularIssue').addClass('btn-disabled');
        $('#popularIssue').attr('onclick','').unbind('click');
        
        $('#generalIssue').addClass('btn-disabled');
        $('#generalIssue').attr('onclick','').unbind('click');
        
        
        // ****** Task  Button  Disable for all ****** //
        $('#popularTask').addClass('btn-disabled');
        $('#popularTask').attr('onclick','').unbind('click');
        
        $('#generalTask').addClass('btn-disabled');
        $('#generalTask').attr('onclick','').unbind('click');
        
        $('#editTask').addClass('btn-disabled');
        $('#editTask').attr('onclick','').unbind('click');
        
        
        // ****** Event  Button  Disable for all ****** //
        $('#popularEvent').addClass('btn-disabled');
        $('#popularEvent').attr('onclick','').unbind('click');
        
        $('#generalEvent').addClass('btn-disabled');
        $('#generalEvent').attr('onclick','').unbind('click');
        
        // *********** popular clone for all ******************** //
        $('#popularClone').addClass('btn-disabled');
        $('#popularClone').attr('onclick','').unbind('click');
        
        // *********** popular add to plan for all ******************** //
        $('#addToPlan').addClass('btn-disabled');
        $('#addToPlan').attr('onclick','').unbind('click');
        
        // ****** Log A Call and Email   Button  Disable for all ****** //
        $('#generalLogACall').addClass('btn-disabled');
        $('#generalLogACall').attr('onclick','').unbind('click');
        
        $('#generalEmail').addClass('btn-disabled');
        $('#generalEmail').attr('onclick','').unbind('click');
        
        // ****** Note and Attachment Button  Disable for all ****** //
        $('#generalNote').addClass('btn-disabled');
        $('#generalNote').attr('onclick','').unbind('click');
        
        $('#generalAttachment').addClass('btn-disabled');
        $('#generalAttachment').attr('onclick','').unbind('click');
        
        
        // *************** PDF Button Disable ********////////
        
        $('#generalPdf').addClass('btn-disabled');
        $('#generalPdf').attr('onclick','').unbind('click');
        
        $('#generalBtmPdf').addClass('btn-disabled');
        $('#generalBtmPdf').attr('onclick','').unbind('click');
        
        
        if(convertStringToBoolean(accountable) || convertStringToBoolean(roleAcceptanceResponsible) || convertStringToBoolean(roleAcceptanceConsultan) || convertStringToBoolean(roleAcceptanceInformed) || chkRecPermission == true) {
            $('#generalPdf').removeClass('btn-disabled');
            $("#generalPdf").click(function() {
                 pdfGenerate();
            });
            
            $('#generalBtmPdf').removeClass('btn-disabled');
            $("#generalBtmPdf").click(function() {
                 pdfGenerate();
            });
            
        }
       
        // ****** People Button  Enable  for RA/SYS/ CIMember ****** //
         if( chkRecPermission == true ) {
                $('#popularPeople').removeClass('btn-disabled');
                $("#popularPeople").click(function() {
                    addEditPeople();
                });
                
                $('#generalPeople').removeClass('btn-disabled');
                $("#generalPeople").click(function() {
                    addEditPeople();
                });
         }
      
        if(currentPhases != 'Close') {
            // ****** Edit Button  Enable  for RA/SYS ****** //
            if(convertStringToBoolean(accountable) || convertStringToBoolean(roleAcceptanceResponsible) || convertStringToBoolean(roleAcceptanceBackUp) || chkRecPermission == true) {
                $('#popularEdit').removeClass('btn-disabled');
                $("#popularEdit").click(function() {
                    openEdit();
                });
                
                $('#generalEdit').removeClass('btn-disabled');
                $("#generalEdit").click(function() {
                    editDecision();
                });
                $('#generalBtmEdit').removeClass('btn-disabled');
                $("#generalBtmEdit").click(function() {
                    editDecision();
                });
                
                $('#addToPlan').removeClass('btn-disabled');
                $("#addToPlan").click(function() {
                    getPlanList();
                });
                
                /*$('#generalClone').removeClass('btn-disabled');
                $("#generalClone").click(function() {
                    showModal('clone-header','clone-body','clone-footer');
                });
                $('#generalBtmClone').removeClass('btn-disabled');
                $("#generalBtmClone").click(function() {
                    showModal('clone-header','clone-body','clone-footer');
                });*/
                
                
            }
            
            // ****** People Button  Enable  for RA/SYS/ CIMember ****** //
            if(convertStringToBoolean(accountable) || convertStringToBoolean(roleAcceptanceResponsible) || convertStringToBoolean(roleAcceptanceBackUp)  || chkRecPermission == true || convertStringToBoolean(addCIMember)) {
                $('#popularPeople').removeClass('btn-disabled');
                $("#popularPeople").click(function() {
                    addEditPeople();
                });
                
                $('#generalPeople').removeClass('btn-disabled');
                $("#generalPeople").click(function() {
                    addEditPeople();
                });
            }
            
            // ******************** ***********//
            if(convertStringToBoolean(addCIMember)) {
                if(roleAcceptanceStatus == 'Not Accepted' || roleAcceptanceStatus == 'Pending Approval'){
                    if(chkRecPermission != true) {
                        $('#popularPeople').addClass('btn-disabled');
                        $("#popularPeople").attr('onclick','').unbind('click');
                      
                        $('#generalPeople').addClass('btn-disabled');
                        $("#generalPeople").attr('onclick','').unbind('click');
                    }
                }
            }
            
            // ****** Relation Button  Enable  for RA/SYS ****** //
            if(convertStringToBoolean(accountable) || convertStringToBoolean(roleAcceptanceResponsible) || convertStringToBoolean(roleAcceptanceBackUp)  || chkRecPermission == true) {
                $('#popularRelation').removeClass('btn-disabled');
                $("#popularRelation").click(function() {
                    existingRelations();
                    //addRelations();
                });
                
                $('#generalRelation').removeClass('btn-disabled');
                $("#generalRelation").click(function() {
                    existingRelations();
                    //addRelations();
                });
                
            }
            
            // ****** Decision  Button  Enable  for RA/SYS ****** //
            if(convertStringToBoolean(accountable) || convertStringToBoolean(roleAcceptanceResponsible) || convertStringToBoolean(roleAcceptanceBackUp)  || chkRecPermission == true) {
                $('#popularDecision').removeClass('btn-disabled');
                $("#popularDecision").click(function() {
                    addSubDecision();
                });
            }
            
            // ****** Issues  Button  Enable  for RA/SYS ****** //
            if(convertStringToBoolean(accountable) || convertStringToBoolean(roleAcceptanceResponsible) || convertStringToBoolean(roleAcceptanceConsultan) || convertStringToBoolean(roleAcceptanceBackUp) || convertStringToBoolean(roleAcceptanceInformed)  || chkRecPermission == true) {
                $('#popularIssue').removeClass('btn-disabled');
                $("#popularIssue").click(function() {
                    showModal('issue-header','issue-body','issue-footer');
                });
                
                $('#generalIssue').removeClass('btn-disabled');
                $("#generalIssue").click(function() {
                    showModal('issue-header','issue-body','issue-footer');
                });
            }
            
            
            // ****** Task  Button  Enable  for RA/SYS ****** //
            if(convertStringToBoolean(accountable) || convertStringToBoolean(roleAcceptanceResponsible) || convertStringToBoolean(roleAcceptanceConsultan) || convertStringToBoolean(roleAcceptanceBackUp) || convertStringToBoolean(roleAcceptanceInformed)  || chkRecPermission == true) {
               $('#popularTask').removeClass('btn-disabled');
               $("#popularTask").click(function() {
                   //addTask();
                   //showModal('task-header','task-body','task-footer');
                   //newTaskForActivity();
                   newTaskPopupComp();
               });
               
               $('#generalTask').removeClass('btn-disabled');
               $("#generalTask").click(function() {
                   //addTask();
                   //showModal('task-header','task-body','task-footer');
                   newTaskPopupComp();
               });
               
               // ----------------- Added for Mass task edit popup ------------- sendil - 10-07-2014
               if(selectedTasks.length == 0){ 
                   $('#deleteTask').addClass('btn-disabled');
                   $('#deleteTask').attr('onclick','').unbind('click');
                   $('#editTask').addClass('btn-disabled');
                   $('#editTask').attr('onclick','').unbind('click');
               }
               
               // ----------------- Added for Mass task edit popup ------------- sendil - 10-07-2014
            }
            
            // ****** Event  Button  Enable  for RA/SYS ****** //
            if(convertStringToBoolean(accountable) || convertStringToBoolean(roleAcceptanceResponsible) || convertStringToBoolean(roleAcceptanceConsultan) || convertStringToBoolean(roleAcceptanceBackUp) || convertStringToBoolean(roleAcceptanceInformed)  || chkRecPermission == true) {
                $('#popularEvent').removeClass('btn-disabled');
                $("#popularEvent").click(function() {
                    newEvent();
                });
                
                $('#generalEvent').removeClass('btn-disabled');
                $("#generalEvent").click(function() {
                    newEvent();
                });
            }
            
            // ****** Log A Call and Email   Button  Enable  for RA/SYS ****** //
            if(convertStringToBoolean(accountable) || convertStringToBoolean(roleAcceptanceResponsible) || convertStringToBoolean(roleAcceptanceConsultan) || convertStringToBoolean(roleAcceptanceBackUp) || convertStringToBoolean(roleAcceptanceInformed)  || chkRecPermission == true) {
                $('#generalLogACall').removeClass('btn-disabled');
                $("#generalLogACall").click(function() {
                    logCall();
                });
                
                $('#generalEmail').removeClass('btn-disabled');
                $("#generalEmail").click(function() {
                    sendEmail();
                });
            }
            
            // ****** Attachment and Notes  Button  Enable  for RA/SYS ****** //
            if(convertStringToBoolean(accountable) || convertStringToBoolean(roleAcceptanceResponsible) || convertStringToBoolean(roleAcceptanceBackUp) || chkRecPermission == true) {
                $('#generalNote').removeClass('btn-disabled');
                $("#generalNote").click(function() {
                    addNote();
                });
                
                $('#generalAttachment').removeClass('btn-disabled');
                $("#generalAttachment").click(function() {
                    addAttach();
                });
            }
            
            
        }
        
        // ***** Copy Button Enable for All users ***** //
            
            if(convertStringToBoolean(accountable) || convertStringToBoolean(roleAcceptanceResponsible) || convertStringToBoolean(roleAcceptanceConsultan) || convertStringToBoolean(roleAcceptanceBackUp) || convertStringToBoolean(roleAcceptanceInformed)  || chkRecPermission == true) {
                $('#generalClone').removeClass('btn-disabled');
                $("#generalClone").click(function() {
                    showModal('clone-header','clone-body','clone-footer');
                });
                $('#generalBtmClone').removeClass('btn-disabled');
                $("#generalBtmClone").click(function() {
                    showModal('clone-header','clone-body','clone-footer');
                });
                
                $('#popularClone').removeClass('btn-disabled');
                $("#popularClone").click(function() {
                    showModal('clone-header','clone-body','clone-footer');
                });
            }
            
            if(convertStringToBoolean(roleAcceptanceResponsible)){
                $('#popularPdf').removeClass('btn-disabled');
            } else if(convertStringToBoolean(roleAcceptanceInformed)){
                $('#popularPdf').removeClass('btn-disabled');
            } else if(convertStringToBoolean(roleAcceptanceBackUp)){
                $('#popularPdf').removeClass('btn-disabled');
            } else if(convertStringToBoolean(roleAcceptanceConsultan)){
                $('#popularPdf').removeClass('btn-disabled');
            } else if(convertStringToBoolean(accountable)) {
                $('#popularPdf').removeClass('btn-disabled');
            }  else if(userId == '') {
                $('#popularPdf').removeClass('btn-disabled');
            } else {
                $('#popularPdf').addClass('btn-disabled');
            }
            
       // placeHoldersForFinancialFields(); 
        
    }
    
    // *******************  Show people callout *******************//
    function showInformationOnPeople(accountable, responsible, consultant, informed, addCIMember,backup){
        if(!convertStringToBoolean(addCIMember) ){
            if((convertStringToBoolean(accountable) || convertStringToBoolean(backup) || convertStringToBoolean(responsible) || chkRecPermission == true)) {
                $('#people-content').html('Consulted or Informed people cannot add/edit others to be Consulted or Informed.');
                $('.people-hover').css('display','block');
            }
            else if((convertStringToBoolean(consultant) || convertStringToBoolean(informed))) {
                $('#people-content').html('You need permission to add/edit other Consulted or Informed members.');
                $('.people-hover').css('display','block');
            }
        }
        else if(convertStringToBoolean(addCIMember)){
            if((convertStringToBoolean(accountable) || convertStringToBoolean(backup) || convertStringToBoolean(responsible) || chkRecPermission == true)) {
                $('#people-content').html('Consulted or Informed people can add/edit others to be Consulted or Informed.');
                $('.people-hover').css('display','block');
            }
            else if((convertStringToBoolean(consultant) || convertStringToBoolean(informed))) {
                $('#people-content').html('You can add/edit other Consulted or Informed members.');
                $('.people-hover').css('display','block');
            }
        }
        
        if(convertStringToBoolean(addCIMember)) {
            if(roleAcceptanceStatus == 'Not Accepted' || roleAcceptanceStatus == 'Pending Approval'){
                if(chkRecPermission != true) {
                    $('#people-content').html('You can not  add/edit other Consulted or Informed members.');
                    $('.people-hover').css('display','block');
                }
            }
        }
        
        //else if(chkRecPermission == true) {
            //$('#people-content').html('You can add/edit other members to this decision');
            //$('.people-hover').css('display','block');
        //}
        
    }
       
    function hideInformationOnPeople(){
        $('.people-hover').css('display','none');
    }
    
    // ******************** popular panel callout (Add-new /Action )  ***********************//
     
    function showPopularBtnsCallout(btnName, btnId ,accountable, responsible, consultant, informed, addCIMember) {
        var calssName =  $('#'+btnId).attr('class');
        if(currentPhase == 'Close') {   
            if(btnName == 'edit'  || btnName == 'addplan') {
                $('#actions-panel-content').html('In order to perform this action,the decision needs to be re-shared.');
                $('#actions-panel-arrow').css('display','block');
                $('#actions-panel-callout').css('display','block');
              
            }
            if(btnName == 'people' || btnName== 'relation' || btnName == 'decision' || btnName == 'issue' || btnName== 'task' || btnName== 'event') {
                $('#addnew-panel-content').html('In order to perform this action, the decision needs to be re-shared.');
                $('#addnew-panel-arrow').css('display','block');
                $('#addnew-panel-callout').css('display','block');
            }
        }
        else {
            if(calssName.indexOf("btn-disabled") !=-1) {
                if(btnName == 'people' || btnName== 'relation' || btnName == 'decision' || btnName == 'issue' || btnName== 'task' || btnName== 'event') {
                    $('#addnew-panel-content').html('You do not have the rights to perform this action.');
                    $('#addnew-panel-arrow').css('display','block');
                    $('#addnew-panel-callout').css('display','block');
                }
                else {
                    $('#actions-panel-content').html('You do not have the rights to perform this action.');
                    $('#actions-panel-arrow').css('display','block');
                    $('#actions-panel-callout').css('display','block');
                }
            }
        }
    }
    function hidePopularBtnsCallout() {
        $('#actions-panel-arrow').css('display','none');
        $('#actions-panel-callout').css('display','none');
        $('#addnew-panel-arrow').css('display','none');
        $('#addnew-panel-callout').css('display','none');
    } 
    
    // ******************** Title callout  ***********************//
    function showSFCallout(e) {
        //var leftPosition  = document.getElementById('pg:titlePopupFrm:visibleDecisionTitle').offsetWidth;
        //leftPosition = leftPosition - 20;
        //leftPosition = leftPosition > 200 ? e.clientX - 380 : leftPosition; 
        //$('#titleCallout').css({ 'display':'block','left': leftPosition});
        $('#titleCallout').show().css('top', e.pageY -35).css('left', e.pageX + 40).appendTo('body');
        
    }
    
    function hideSFCallout() {
        $('#titleCallout').css('display','none');
    }
    
    // ***************** Tab Section for bold and unbold *********** //
    function decisionTabControll(socialInputId, peopleTab, taskTab, activitiesTab, relationTab, attachmentTab, qualityTab, historyTab  ) {
        
        if(convertStringToBoolean(peopleTab)) {
            $('.people-tab').css('font-weight','bold');
            
        }
        else {
            $('.people-tab').css('font-weight','normal');
        }
        
        // Task tab 
        if(convertStringToBoolean(taskTab)) {
            $('.task-tab').css('font-weight','bold');
        }
        else {
            $('.task-tab').css('font-weight','normal');
        }   
        
        // Activities tab   
        if(convertStringToBoolean(activitiesTab)) {
            $('.activities-tab').css('font-weight','bold');
        }
        else {
            $('.activities-tab').css('font-weight','normal');
        }
        
        // Approvals
       // if(convertStringToBoolean(approvalsTab)) {
      //      $('.approvals-tab').css('font-weight','bold');
     //   }
     //   else {
     //       $('.approvals-tab').css('font-weight','normal');
    //    }
        
        
        // Relationship tab 
        if(convertStringToBoolean(relationTab)) {
            $('.relation-tab').css('font-weight','bold');
        }
        else {
            $('.relation-tab').css('font-weight','normal');
        }
        
        // Attachment tab   
        if(convertStringToBoolean(attachmentTab)) {
            $('.attachment-tab').css('font-weight','bold');
        }
        else {
            $('.attachment-tab').css('font-weight','normal');
        }
        
        // History tab  
        if(convertStringToBoolean(historyTab)) {
            $('.history-tab').css('font-weight','bold');
        }
        else {
            $('.history-tab').css('font-weight','normal');
        }   
        
        
        // Quality Tab tab  
        if(convertStringToBoolean(qualityTab)) {
            $('.quality-tab').css('font-weight','bold');
        }
        else {
            $('.quality-tab').css('font-weight','normal');
        }       
    }
    
    
    // convert string to boolean 
    function convertStringToBoolean(srcValue) {
        
        var destinationValue;
        if(srcValue == 'true') {
            destinationValue = true;
        }
        else if (srcValue == 'True') {
            destinationValue = true;
        }
        else if  (srcValue == true) {
            destinationValue = true;
        }
        else if  (srcValue == '1') {
            destinationValue = true;
        }
        else if  (srcValue == '0') {
            destinationValue = false;
        }
        else if(srcValue == 'false') {
            destinationValue = false;
        }
        else if (srcValue == 'False') {
            destinationValue = false;
        }
        else if  (srcValue == false) {
            destinationValue = false;
        }
        return destinationValue;
    } 
    
    // Decision Approval Popup
    
    function showDecisionApprovalModal(decisionId, approvalId, step, fromLoc){   
        var problemStatemnt = $('#editorProblemStatement').val();
        var decisionStatemnt = $('#editorDecision').val();
        clickedOn = fromLoc; 
        var headerTitle ; 

     
        
     
        $('#approvalValues').val(approvalId);   
        $('body').css('overflow','hidden');
        $('.bg-fade').fadeIn('slow');
        
        if(step == 'Role Acceptance') {
            $('#approveAcceptBtn').html('Accept');
            $('#opposeRejectBtn').html('Reject');
            var backupandveto = false;
            if( $('#userBackup').val() == 'true' )
            if( $('#userVeto').val()  == 'true' )
            backupandveto  = true;
            headerTitle = 'Accept / Reject your role as '+$('#userRoleId').val()+' '+ ( ( $('#userBackup').val() == 'true' || $('#userVeto').val()  == 'true' ) ? ' with ' :'' ) +  ( $('#userBackup').val() == 'true' ? 'Backup' : '' ) + ( backupandveto   ? ' and ' :' ' ) +  ( $('#userVeto').val() == 'true' ? 'Veto' : '' )  ; 
        } 
        else if(step == 'My Stance'){  
            // create stance approval header with the role and if veto " with Veto"
            headerTitle = 'Provide your stance as "'+$('#userRoleId').val()+ ( $('#userVeto').val() == 'true' ? '\" with \"Veto' : '' ) +  '" to the following proposal';
            $('#approveAcceptBtn').html('Support');
            $('#opposeRejectBtn').html('Oppose');
            
        }else{
            $('#approveAcceptBtn').html('Approve');
            $('#opposeRejectBtn').html('Reject');
            headerTitle = 'Provide the verdict for the decision proposal';
        }
        
        $('#approve-header').html(headerTitle);  
        $('.modal-window-approve').data("kendoWindow").center().title(headerTitle).open().setOptions({width: 816});
        setTimeout(function(){ $('.modal-window-approve').data("kendoWindow").center()  },10)
        $('body').css('overflow','hidden');
        $('.bg-fade').fadeIn('slow'); 
    
    }
    function hideDecisionApprovalModal(){       
        $('.modal-approval-content :input').val(''); 
        $(".modal-window-approve") .data("kendoWindow").close();            
        $('.bg-fade').fadeOut('slow');
        $('body').css('overflow','auto');
        setTextAreaSize();
    }
    
    function hideNewTaskPopup(){
        $('#modal-newTask').css('display','none');                
        $('.bg-fade').fadeOut('slow');
        $('body').css('overflow','auto');
    }
    
    // Add Relation Popup
    function showModalRelation(){   
        // ---------------- implemented to have kendo popup ---------
        var headerTitle = $('#relation-header').html(); 
        $('.modal-window-relation').data("kendoWindow").center().title("Add Relation").open().setOptions({width:1088});  
        setTimeout(function(){ $('.modal-window-relation').data("kendoWindow").center();$('.k-widget.k-window').css('top','100px');  },10)
        //$('.k-widget.k-window').css('top','100px');
        // ---------------- Ends implemented to have kendo popup --------- 
        $('body').css('overflow','hidden');
        $('.bg-fade').fadeIn('slow');       
                
    }
    function hideRelationModal(){       
        $('#relation-body :input').val('');
        $(".modal-window-relation").data("kendoWindow").close();      
        $('.bg-fade').fadeOut('slow');
        $('body').css('overflow','auto');
        setTextAreaSize();
    }
    
    
    // Show, Hide Modal Window
   
    function showModal(header,body,footer){  
        $('.modal-decision-header').hide();
        $('.modal-decision-content').hide();
        $('.modal-footer').hide();           
        $('#'+body).show();
        $('#'+footer).show(); 
        $('body').css('overflow','hidden');
        $('.bg-fade').fadeIn('slow');   
        var headerTitle = $('#'+header).html(); 
      
        $('.modal-window').data("kendoWindow").center().title(headerTitle).open().setOptions({width: 816});
        setTimeout(function(){ $('.modal-window').data("kendoWindow").center()  },10)
       
        // ---------------- Ends implemented to have kendo popup --------- 
        $("#pepleClone").prop('checked', true);
        $("#resetDateClone").prop('checked', true);
        $('#decide-body .k-state-disabled').fadeTo('slow',.5); 
       
    }
    function hideModal(){
        $(".modal-window").data("kendoWindow").close(); 
        document.getElementById('assignTaskToMe').style.display = 'none';
        document.getElementById('showRelationValue').style.display = 'none';
        selectedPlans = new Array(); 
        //$('.modal-content :input:not(.lookupinput input)').val('');
        //document.getElementById('pg:popupforIssue:issueStatus').value = 'Raised';
        //document.getElementById('pg:popupforIssue:issueAssignedTo').value = '';
        //$('#issueStatus').val('Raised');
        $('.modal-content :checkbox').removeAttr('checked');
        //$('.modal-window').css('display','none'); 
        $('.bg-fade').fadeOut('slow');
        $('body').css('overflow','auto'); 
        setTextAreaSize();
    }
    
    // ***************** Displays delete task warning popup **** //
    function deleteTaskEventWarning(decisionId, taskEventId,isDeletable, type){
        if(isDeletable == 'true'){ 
            $('.modal-window-activitywarning').data("kendoWindow").center().title("Warning!").open().setOptions({width: 500});
            setTimeout(function(){ $('.modal-window-activitywarning').data("kendoWindow").center()  },10)
            $('.bg-fade').fadeIn('slow');
            $('body').css('overflow','hidden');
            document.getElementById('decisionIdOnActivities').value = '';
            document.getElementById('taskEventIdOnActivities').value = '';
            document.getElementById('isDeletableOnActivities').value = '';
            document.getElementById('typeOnActivities').value = '';
            document.getElementById('decisionIdOnActivities').value = decisionId;
            document.getElementById('taskEventIdOnActivities').value = taskEventId;
            document.getElementById('isDeletableOnActivities').value = isDeletable;
            document.getElementById('typeOnActivities').value = type;
        }
    }
    
    // Call delete function on click of ok button on Activities warning popup 
    function deleteActivity(){
        deleteTaskEvent(document.getElementById('decisionIdOnActivities').value,document.getElementById('taskEventIdOnActivities').value,document.getElementById('isDeletableOnActivities').value,document.getElementById('typeOnActivities').value);
    }  
    
    // Cancel veto rejection popup
    function cancelVetoRejectPopup(){
        $('.modal-window-vetorejection').data("kendoWindow").close(); 
        
        $('.bg-fade').fadeOut('slow');
        $('body').css('overflow','auto'); 
    }
    
    function cancelDeletePopup(){
        $('.modal-window-activitywarning').data("kendoWindow").close(); 
        $('.bg-fade').fadeOut('slow');
        $('body').css('overflow','auto'); 
    }
    
    // ------------- Added for confirmation popup for re-share of the decision ------- sendil - 27-06-2014
       function cancelPhasePopup(){
        $('.modal-window-phasewarning').data("kendoWindow").close();
        $('.bg-fade').fadeOut('slow');
        $('body').css('overflow','auto'); 
    }

    function checkPhaseMovement(){
          
            $('.bg-fade').fadeIn('slow');
            $('body').css('overflow','hidden');  
            $('.modal-window-phasewarning').data("kendoWindow").center().title("Warning!").open().setOptions({width: 500});
            setTimeout(function(){ $('.modal-window-phasewarning').data("kendoWindow").center()  },10)
     }
    function choseSharePhase(){
        backtoShare = true;
        decisionPhaseChange(selectedPhaseId);
        cancelPhasePopup(); 
    }
    
    // ------------- Ends confirmation popup for re-share of the decision ------- sendil - 27-06-2014
    // ----------------- Added for Mass task edit popup ------------- sendil - 10-07-2014
        
    function cancelMassEditPopup(){
        $('.modal-window-massEditing').data("kendoWindow").close();
        $('.bg-fade').fadeOut('slow'); 
        $('body').css('overflow','auto');
    }
    function openEditMassTask(){ 
            $('.bg-fade').fadeIn('slow');
            $('body').css('overflow','hidden');  
            $('.modal-window-massEditing').data("kendoWindow").center().title("Edit Tasks").open().setOptions({width: 500});
            setTimeout(function(){ $('.modal-window-massEditing').data("kendoWindow").center()  },10)
    }
    function editMassTask(decisionId){
        var assignedTo = document.getElementById('pg:taskFormId:assignTo_lkid').value;
        var assignedToName = document.getElementById('pg:taskFormId:assignTo').value;
        if(assignedTo == '' || assignedTo == '000000000000000'){
            if(assignedToName != ''){   
                alert('Please select user from lookup.');
                return false;
            }
        }
        var updateDueDate = document.getElementById('pg:taskFormId:updateDueDate').value;
        var updateStatus = document.getElementById('updateStatus').value;
        var updatePriority = document.getElementById('updatePriority').value;
        var selectedTaskStr = selectedTasks.toString();
        var searchTextActivity = $('#searchActivity').val();
        DecisionView.massEditTaskRecords(selectedTaskStr,decisionId,searchTextActivity,assignedTo,updateDueDate,updateStatus,updatePriority, function(result, event)
        {
            if (event.status)
            {
                var newTaskEvent = removeQuotes(result.taskEvent);                
                grid = $("#gridTaskEvent").data("kendoGrid");
                viewModel.ds.data(
                    viewModel.ds.options.schema.parse(newTaskEvent || []) //just in case thenew data is null
                );
                grid.dataSource.data(newTaskEvent);
                document.getElementById('pg:taskFormId:assignTo_lkid').value = '';
                document.getElementById('pg:taskFormId:assignTo').value = '';
                document.getElementById('pg:taskFormId:updateDueDate').value = '';
                document.getElementById('updateStatus').value = '--None--';
                document.getElementById('updatePriority').value = '--None--';
                selectedTasks = new Array();
                $('#deleteTask').addClass('btn-disabled');
                $('#deleteTask').attr('onclick','').unbind('click');
                $('#editTask').addClass('btn-disabled');
                $('#editTask').attr('onclick','').unbind('click');
                chatterRerender();
                cancelMassEditPopup();
                isTaskDelay  = false;
                if(newTaskEvent != null){
                    for(var i = 0;  newTaskEvent.length > i; i ++ ) {
                        if(newTaskEvent[i].delayTaskClass == 'delayTask' ) {
                            isTaskDelay = true;
                        }
                    }
                }
                
                if(isTaskDelay) {
                    $('#activityTab a').css('color','#ff0000 !important');
                }
                else {
                    $('#activityTab a').css('color','#222');
                }
            }
        }, {escape:true});
    }
    
    function dropDownColor(){
        if(document.getElementById('updateStatus').value == '--None--'){
            $('#updateStatus').css('color','grey');
        } else {
            $('#updateStatus').css('color','black');
        }
        if(document.getElementById('updatePriority').value == '--None--'){
            $('#updatePriority').css('color','grey');
        } else {
            $('#updatePriority').css('color','black');
        }
    }
    
    function cancelMassDeletePopup(){
        $('.modal-window-massDelete').data("kendoWindow").close();
        $('.bg-fade').fadeOut('slow'); 
        $('body').css('overflow','auto');
    }
    function cancelPermissionAlertPopup(){
        $('.modal-window-noPermission').data("kendoWindow").close();
        $('.bg-fade').fadeOut('slow'); 
        $('body').css('overflow','auto');
    }
    function openPermissionAlertTask(){
          
            $('.bg-fade').fadeIn('slow');
            $('body').css('overflow','hidden'); 
            $('.modal-window-noPermission').data("kendoWindow").center().title("Warning!").open().setOptions({width: 500});
            setTimeout(function(){ $('.modal-window-noPermission').data("kendoWindow").center()  },10)
            
    }
    
    function openDeleteMassTask(){  
        var idx = chkMassDeletePermission.indexOf('false');
        if(idx == -1){  
            $('.modal-window-massDelete').data("kendoWindow").center().title('Warning!').open().setOptions({width: 500});
            setTimeout(function(){ $('.modal-window-massDelete').data("kendoWindow").center()  },10)
            $('.bg-fade').fadeIn('slow');  
            $('body').css('overflow','hidden');
            return null;
        } else {
            openPermissionAlertTask();
            return null;
        }
    }
    
    function deleteMassTask(decisionId){
        var searchTextActivity = $('#searchActivity').val();
        var selectedTaskStr = selectedTasks.toString();
        DecisionView.massDeleteTaskRecords(selectedTaskStr,decisionId,searchTextActivity,function(result, event)
        {
            if (event.status)
            {
                var newTaskEvent = removeQuotes(result.taskEvent);                
                grid = $("#gridTaskEvent").data("kendoGrid");
                grid.dataSource.data(newTaskEvent);
                viewModel.ds.data(
                    viewModel.ds.options.schema.parse(newTaskEvent || []) //just in case thenew data is null
                );
                $('#deleteTask').addClass('btn-disabled');
                $('#deleteTask').attr('onclick','').unbind('click');
                $('#editTask').addClass('btn-disabled');
                $('#editTask').attr('onclick','').unbind('click');
                selectedTasks = new Array();
                cancelMassDeletePopup();
                $('.task-tab').html('('+newTaskEvent.length+')');
            }
        }, {escape:true});
    }
    
    // ----------------- Ends Added for Mass task edit popup ------------- sendil - 10-07-2014
    
    function cancelApprovalWarningPopup(){ 
        $('.modal-window-approval').data("kendoWindow").close()
        $('.bg-fade').fadeOut('slow'); 
        $('body').css('overflow','auto');  
    }
    // ***************** get data from issues ***** ///
    
    function issesGetRecords(decisionId) {
        DecisionView.issuesQuality(decisionId, '' , function(result, event)
        {
            if (event.status)
            {
                $('.quality-tab').css('font-weight','bold');
                // update issues quality
                var newIssues = removeQuotes(result);
                var grid = $("#gridIssues").data("kendoGrid");
                grid.dataSource.data( newIssues ); 
                $('.quality-tab').html('('+newIssues.length+')');
            }
        }, {escape:true});
    }
    
    // ************** update nearest due date after decision approval or rejection ************ //
    
    function updateDecisionNearestDueDate(decisionId) {
        DecisionView.updateDecisionNearestDueDate(decisionId, function(result, event)
        {
            if (event.status)
            {
                //$('.quality-tab').css('font-weight','bold');
                // update issues quality
                //var newIssues = removeQuotes(result);
                //kendoIssues(newIssues);
            }
        }, {escape:true});
    }
    
    
    // ************** Click on populur action **************//
    function openEdit(){
        //$("#tabs").tabs( "select", "tabs-gen");
        var activeTab = $("#detailsTab"); //$( "#tabs" ).tabs({ active: 1 });
        $("#tabs").kendoTabStrip().data("kendoTabStrip").activateTab(activeTab); // changed to kendo tab
        editDecision();
    }
    
    //************************** Action function  *******************//
    
    // ************ Java script remote scripting ************ //
    
    // approval process execution //
    
    function approvedReject(decisionId, action) {
        var processInstanceitemId =  $('#approvalValues').val();
        var comment =  $('#approvalComments').val();
        var vetoRightsLocal;
        var approvalHeader = document.getElementById('approve-header').innerHTML;
        var backupforAccountableLocal ;
        if( ( approvalHeader.indexOf('Stance') != -1 ) || ( approvalHeader.indexOf('stance') != -1 ) ){
            //Approval process execution for only my stance
            DecisionView.approvedReject(decisionId , processInstanceitemId, action, comment , function(result, event)
            {
                  
                if (event.status)
                {   
                    
                    $('#approveRejectionText').html(action);
                    $('#approveRejectionHidden').val(action);
                    if(result.errorMsg == 'Please re-share the decision') {
                        alert(result.errorMsg);
                        return false; 
                    }
                   
                    vetoRightsLocal = result.socialIndividual.Veto_Rights__c;
                    backupforAccountableLocal = result.socialIndividual.Backup_for_Accountable__c;
                    // for close the approval popup 
                    if(clickedOn == 'fromPhase') {    
                         $(".modal-window-approve") .data("kendoWindow").close(); 
                        $('#approvalComments').val('');                        
                        
                    } else {                           
                        if(vetoRightsLocal == false){      
                            $(".modal-window-approve") .data("kendoWindow").close(); 
                            $('.bg-fade').fadeOut('slow');
                            $('body').css('overflow','auto'); 
                        }
                        $('#approvalComments').val('');
                    }
                    // update phases arrow
                    decisionSocialInputDetail(result.decisionObject.Id,
                                                result.socialIndividual.Id,
                                                    result.decisionObject.Phase__c, 
                                                        result.decisionObject.Status__c, 
                                                            result.socialIndividual.Accountable__c, 
                                                                result.socialIndividual.Responsible__c, 
                                                                    result.socialIndividual.Consulted__c, 
                                                                        result.socialIndividual.Informed__c, 
                                                                            result.socialIndividual.Backup_for_Accountable__c, 
                                                                                result.socialIndividual.Veto_Rights__c,
                                                                                    result.socialIndividual.Role_Acceptance_Status__c,
                                                                                        result.socialIndividual.Final_Approval_Status__c,
                                                                                            result.socialIndividual.Stance_Approval_Status__c,
                                                                                                result.socialIndividual.Role__c,
                                                                                                    result.decisionObject.test__c);  
                    
                    // update timing tab
                    //if(contentLoadChkForTiming == 'statefull'){ 
                        var newtimingObject = removeQuotes(result.timingObject);
                        var grid = $("#gridTime").data("kendoGrid");                  
                        grid.dataSource.data(newtimingObject);
                        viewModelTiming.ds.data(
                            viewModelTiming.ds.options.schema.parse(newtimingObject || []) //just in case thenew data is null
                        );
                    //}
                    
                    //Update comand center timing minitab
                    updateTimerCountdown(newtimingObject)
                     
                    // get updated history records 
                    if(contentLoadChkForHistory == 'statefull'){    
                        historyTabRefresh(decisionId);
                    }
                    
                    
                    // update nearest due date after decide phase
                    updateDecisionNearestDueDate(decisionId);
                    
                    // update people tab
                    var newPeople = removeQuotes(result.peopleObject);                    
                    grid = $("#gridPeople").data("kendoGrid");
                    grid.dataSource.data(newPeople);
                    $(".people-tab").html('('+ newPeople.length+')')
                     // update tab structure
                    decisionTabControll(result.socialIndividual.Id,result.socialIndividual.SYS_Tab_View_Social_Input__c,result.socialIndividual.SYS_Tab_View_Tasks__c,result.socialIndividual.SYS_Tab_View_Activites__c,result.socialIndividual.SYS_Tab_View_Relations__c,result.socialIndividual.SYS_Tab_View_Attachments__c,result.socialIndividual.SYS_Tab_View_Quality__c,result.socialIndividual.SYS_Tab_View_History__c );
                   
                    //If role approved hide approval icon and show backup veto boxes
                    if(result.socialIndividual.Role_Acceptance_Status__c == 'Approved/Accepted')
                    { 
                      $('#backupVeto').css('display','block')
                      $('#roleApproveIcon').css('display','none');
                      $('#glyphOverview').css('display','none')                             
                      roleAcceptanceStatusGolbal = 'Approved/Accepted';
                    
                    }                    
                    else
                    {
                      $('#backupVeto').css('display','none')
                      $('#roleApproveIcon').css('display','block')   
                      $('#glyphOverview').css('display','block')                             
                    }
                    if(result.socialIndividual.Role_Acceptance_Status__c == 'Not Accepted')
                    { 
                       $('#glyphOverview').css('display','none');
                       $('#glyphSocial').css('display','none');
                       $('#glyphTiming').css('display','none');
                       $('#glyphEvaluation').css('display','none');
                    } 
                    
                    if(result.socialIndividual.Stance_Approval_Status__c == 'Pending Approval'){
                        if(result.socialIndividual.Accountable__c || result.socialIndividual.Backup_for_Accountable__c || result.socialIndividual.Responsible__c || result.socialIndividual.Consulted__c){  
                            document.getElementById('myStanceApprovalIcon').style.display = 'block';
                            document.getElementById('glyphOverview').style.display = 'block';

                        } else {
                            document.getElementById('myStanceApprovalIcon').style.display = 'none';
                            document.getElementById('glyphOverview').style.display = 'none';

                        }
                    } else {
                        document.getElementById('myStanceApprovalIcon').style.display = 'none';
                        document.getElementById('glyphOverview').style.display = 'none';

                    }
                    if(result.socialIndividual.Final_Approval_Status__c == 'Pending Approval'){
                        if(result.socialIndividual.Accountable__c || result.socialIndividual.Backup_for_Accountable__c){
                            document.getElementById('statusApprovalIcon').style.display = 'block';
                            document.getElementById('glyphOverview').style.display = 'block';

                        } else {
                            document.getElementById('statusApprovalIcon').style.display = 'none';
                            document.getElementById('glyphOverview').style.display = 'none';

                        }
                    } else {
                        document.getElementById('statusApprovalIcon').style.display = 'none';
                         if( result.socialIndividual.Stance_Approval_Status__c != 'Pending Approval')
                        document.getElementById('glyphOverview').style.display = 'none';

                    }
                    // update approval tab
                    var newApproval = removeQuotes(result.approvalObject);
                    DecisionView.approvalTab(decisionId , function(result, event) {
                        if (event.status)
                        {   
                            var approvalTabToBeRefreshed = removeQuotes(result);
                            if(approvalTabToBeRefreshed != undefined){
                                if(approvalTabToBeRefreshed != ''){
                                    $('#approvalValues').val(approvalTabToBeRefreshed[0].id);
                                } 
                            }
                            //kendoApproval(approvalTabToBeRefreshed);
                            //var grid = $("#gridApproval").data("kendoGrid");
                            //grid.dataSource.data(approvalTabToBeRefreshed);
                            //$('.approvals-tab').html('('+approvalTabToBeRefreshed.length+')');
                            if(approvalTabToBeRefreshed.length > 0){
                                if(approvalTabToBeRefreshed[0].step != null){
                                    decisionApprovals(decisionId,approvalTabToBeRefreshed);
                                }
                            }else{
                                $('#btnApproveReject').addClass('role-AcceptanceCommandCenter-BtnDisabled');
                                $("#btnApproveReject").attr('onclick','').unbind('click');
                            }
                            if(vetoRightsLocal == true){
                                $(".modal-window-approve") .data("kendoWindow").close(); 
                                $('.modal-window-vetorejection').data("kendoWindow").close();  
                                if(clickedOn != 'fromPhase'  )
                                $('.bg-fade').fadeOut('slow'); 
                                $('body').css('overflow','auto');    
                            }
                            if(clickedOn == 'fromPhase'  ){   
                               if(  vetoRightsLocal  == false  )
                               {        
                                        $(".modal-window-approve") .data("kendoWindow").close(); 
                                        $('.modal-window-approval').data("kendoWindow").center().open().setOptions({width: 500});
                                        setTimeout(function(){ $('.modal-window-approval').data("kendoWindow").center()  },10)
                                        $('.bg-fade').fadeIn('slow',function(){ $('#approve-header').html('');} );
                                }
                                if(  vetoRightsLocal  == true ) 
                                {    
                                     if( backupforAccountableLocal == true   )   
                                     {   
                                        if( action == 'Approve'  )
                                        {
                                            $(".modal-window-approve") .data("kendoWindow").close(); 
                                            $('.modal-window-approval').data("kendoWindow").center().open().setOptions({width: 500});
                                            setTimeout(function(){ $(".modal-window-approve").data("kendoWindow").center()  },10)
                                            $('.bg-fade').fadeIn('slow',function(){ $('#approve-header').html('');} );
                                        }
                                         else
                                         $('.bg-fade').fadeOut('slow',function(){ $('#approve-header').html('');} );
                                     }
                                     else
                                     $('.bg-fade').fadeOut('slow',function(){ $('#approve-header').html('');} );
                                } 
                                 
                             } 
                        }
                    }, 
                    {escape: true}); 
                    chatterRefresh();
                    refreshContribution();
                }
             }, {escape:true});
             /*if(clickedOn == 'fromPhase'){
                 //hideDecisionApprovalModal();
                 $('#modal-decision-approve').css('display','none');
                 $('.modal-window-approval').show();
                 $('.bg-fade').fadeIn('slow',function(){ $('#approve-header').html('');} );
             }*/
            
        } else { 
            //Approval process execution for role and decision
            DecisionView.approvedReject(decisionId , processInstanceitemId, action, comment , function(result, event)
            {
                
                if (event.status)
                {
                    if(action == 'Approve')
                    if( (  ( roleString.indexOf('Accountable') != -1 ) || ( roleString.indexOf('Responsible') != -1 ) || ( backupForAcc == true)  ) )
                    enableMatrix();          
                    if(result.errorMsg == 'Please re-share the decision') {
                        alert(result.errorMsg);
                        return false;
                    }
                    
                    // update phases arrow
                    decisionSocialInputDetail(result.decisionObject.Id,
                                                result.socialIndividual.Id,
                                                    result.decisionObject.Phase__c, 
                                                        result.decisionObject.Status__c, 
                                                            result.socialIndividual.Accountable__c, 
                                                                result.socialIndividual.Responsible__c, 
                                                                    result.socialIndividual.Consulted__c, 
                                                                        result.socialIndividual.Informed__c, 
                                                                            result.socialIndividual.Backup_for_Accountable__c, 
                                                                                result.socialIndividual.Veto_Rights__c,
                                                                                    result.socialIndividual.Role_Acceptance_Status__c,
                                                                                        result.socialIndividual.Final_Approval_Status__c,
                                                                                            result.socialIndividual.Stance_Approval_Status__c,
                                                                                                result.socialIndividual.Role__c,
                                                                                                    result.decisionObject.test__c);  
                    
                    setApprovalButtonName(result.socialIndividual.Role_Acceptance_Status__c,result.socialIndividual.Stance_Approval_Status__c,result.socialIndividual.Final_Approval_Status__c);
                    
                    // update timing tab
                    //if(contentLoadChkForTiming == 'statefull'){ 
                        var newtimingObject = removeQuotes(result.timingObject);
                        var grid = $("#gridTime").data("kendoGrid");                  
                        grid.dataSource.data(newtimingObject);
                        viewModelTiming.ds.data(
                            viewModelTiming.ds.options.schema.parse(newtimingObject || []) //just in case thenew data is null
                        );
                    //}
                    
                    //Update comand center timing minitab
                    updateTimerCountdown(newtimingObject)
                     
                    
                    // get updated history records 
                    if(contentLoadChkForHistory == 'statefull'){    
                        historyTabRefresh(decisionId);
                    }
                    
                    // update nearest due date after decide phase
                   // if(convertStringToBoolean(AccountableForActivities) || convertStringToBoolean(BackupForActivities) || convertStringToBoolean(responsibleForActivities) )
                    updateDecisionNearestDueDate(decisionId);
                    
                    // update people tab
                    var newPeople = removeQuotes(result.peopleObject);
                    grid = $("#gridPeople").data("kendoGrid");
                    grid.dataSource.data(newPeople);
                    $(".people-tab").html('('+ newPeople.length+')')

                    // update tab structure
                    decisionTabControll(result.socialIndividual.Id,result.socialIndividual.SYS_Tab_View_Social_Input__c,result.socialIndividual.SYS_Tab_View_Tasks__c,result.socialIndividual.SYS_Tab_View_Activites__c,result.socialIndividual.SYS_Tab_View_Relations__c,result.socialIndividual.SYS_Tab_View_Attachments__c,result.socialIndividual.SYS_Tab_View_Quality__c,result.socialIndividual.SYS_Tab_View_History__c );
                   
                     // enable or disable only for RACI roles
                    if(result.socialIndividual.Accountable__c || result.socialIndividual.Backup_for_Accountable__c || result.socialIndividual.Responsible__c || result.socialIndividual.Consulted__c || result.socialIndividual.Informed__c){
                    
                        if(  ( result.socialIndividual.Rating__c == undefined ) || ( result.socialIndividual.Mood__c == undefined ) || (  result.socialIndividual.Like__c  == undefined ||  result.socialIndividual.Dislike__c == undefined ) )  
                        {
                                document.getElementById('glyphSocial').style.display = 'block'
                        }
                        else
                        {
                                document.getElementById('glyphSocial').style.display = 'none';
                        } 
                        //enable or disable glyph in evaluation.            
                        if( (  ( result.socialIndividual.Effort__c == undefined ) || ( result.socialIndividual.Result__c == undefined  )  )    )  
                        {      if( result.socialIndividual.Decision__r.phase__c == 'Evaluate' || result.socialIndividual.Decision__r.phase__c == 'Close' ) 
                                document.getElementById('glyphEvaluation').style.display = 'block';
                        }
                        else
                        {
                                document.getElementById('glyphEvaluation').style.display = 'none';
                        }
                     }
                     else{
                                document.getElementById('glyphEvaluation').style.display = 'none';
                                document.getElementById('glyphSocial').style.display = 'none';
                     }
                     
                   if(result.socialIndividual.Stance_Approval_Status__c == 'Pending Approval'){
                        if(result.socialIndividual.Accountable__c || result.socialIndividual.Backup_for_Accountable__c || result.socialIndividual.Responsible__c || result.socialIndividual.Consulted__c){  
                            document.getElementById('myStanceApprovalIcon').style.display = 'block'
                            document.getElementById('glyphOverview').style.display = 'block';

                        } else {
                            document.getElementById('myStanceApprovalIcon').style.display = 'none';
                            document.getElementById('glyphOverview').style.display = 'none';

                        }
                    } else {
                        document.getElementById('myStanceApprovalIcon').style.display = 'none';
                        document.getElementById('glyphOverview').style.display = 'none';

                    }
                    
                    if(result.socialIndividual.Final_Approval_Status__c == 'Pending Approval'){
                        if(result.socialIndividual.Accountable__c || result.socialIndividual.Backup_for_Accountable__c){
                            document.getElementById('statusApprovalIcon').style.display = 'block';
                            document.getElementById('glyphOverview').style.display = 'block';

                        } else {
                            document.getElementById('statusApprovalIcon').style.display = 'none';
                            document.getElementById('glyphOverview').style.display = 'none';

                        }
                    } else {
                        document.getElementById('statusApprovalIcon').style.display = 'none';
                        if( result.socialIndividual.Stance_Approval_Status__c != 'Pending Approval')
                        document.getElementById('glyphOverview').style.display = 'none';

                    }
                    if(result.socialIndividual.Role_Acceptance_Status__c == 'Not Accepted')
                    { 
                       $('#glyphOverview').css('display','none');
                       $('#glyphSocial').css('display','none');
                       $('#glyphTiming').css('display','none');
                       $('#glyphEvaluation').css('display','none');
                    }
                   // render set timing link
                   
                   if(result.socialIndividual.Accountable__c || result.socialIndividual.Backup_for_Accountable__c || result.socialIndividual.Responsible__c){
                        if(result.socialIndividual.Role_Acceptance_Status__c == 'Approved/Accepted'){   
                            $('#enabledSetTiming').css('display','block');
                            $('#disabledSetTiming').css('display','none');
                            if(imageURLonDecision.length == 0){
                                $('#updateImageId').css('display','block');
                                $('#changeImageId').css('display','none');
                            } else {
                                $('#changeImageId').css('display','block');
                                $('#updateImageId').css('display','none');
                            }
                        } else {
                            $('#enabledSetTiming').css('display','none');
                            $('#updateImageId').css('display','none');
                            $('#changeImageId').css('display','none');
                            $('#disabledSetTiming').css('display','block');
                        }
                   } else {
                        $('#updateImageId').css('display','none');
                        $('#enabledSetTiming').css('display','none');
                        $('#changeImageId').css('display','none');
                        $('#disabledSetTiming').css('display','block');
                   }
                   
                    // update approval tab
                    var newApproval = removeQuotes(result.approvalObject);
                    DecisionView.approvalTab(decisionId , function(result, event) {
                        if (event.status)
                        {
                            var approvalTabToBeRefreshed = removeQuotes(result);
                            //kendoApproval(approvalTabToBeRefreshed);
                           // var grid = $("#gridApproval").data("kendoGrid");
                           // grid.dataSource.data(approvalTabToBeRefreshed);
                            if(approvalTabToBeRefreshed.length > 0){
                                if(approvalTabToBeRefreshed[0].step != null){
                                    decisionApprovals(decisionId,approvalTabToBeRefreshed);
                                }
                            }else{
                                $('#btnApproveReject').addClass('role-AcceptanceCommandCenter-BtnDisabled');
                                $("#btnApproveReject").attr('onclick','').unbind('click'); 
                            }
                            $('.approvals-tab').html('('+approvalTabToBeRefreshed.length+')');
                            if(clickedOn == 'fromPhase') {
                                $(".modal-window-approve") .data("kendoWindow").close(); 
                                $('#approvalComments').val('');
                            } else {
                                $(".modal-window-approve") .data("kendoWindow").close(); 
                               
                                $(".modal-window-approval") .data("kendoWindow").close(); 
                                $('.bg-fade').fadeOut('slow');
                                $('#approvalComments').val('');
                                
                            }
                            $('body').css('overflow','auto'); 
                        }
                    }, 
                    {escape: true});
                }
                chatterRefresh();
                refreshContribution();
             }, {escape:true});
             clickedOn = '';
             $('.modal-window-approval').data("kendoWindow").close()
             DecisionView.activitiesTabWithSearch(decisionId, null, '', function(result, event)
             {
                 if (event.status)
                 {
                     //update Activities tab
                    var newTaskEvent = removeQuotes(result.taskEvent);
                    kendoTaskEvent(newTaskEvent,'',AccountableForActivities,BackupForActivities,RoleAcceptanceForBackupInActivities,responsibleForActivities);
                 }
             }, {escape:true});
             
        }
        //Refresh chatter after creating approval/rejection chatter post
    }
    
    
    // Changes phases values
    
    function decisionPhaseChange(clickPhaseId) {
        //alert(clickPhaseId);
        selectedPhaseId = clickPhaseId;
        var clickPhaseIdArray = clickPhaseId.split(",");
        decisionId = clickPhaseIdArray[0];
        socialInputId = clickPhaseIdArray[1];
        phasesValue = clickPhaseIdArray[2];
        // Tool tip should not display onhover on status when phase is other than close phase.
        $('#status-block').attr('title','');
         
        if(phasesValue == 'Propose') {
            document.getElementById('pg:formId:editorDecide').value = document.getElementById('pg:generalViewFrm:editorDecision').value;
            var decisionStatemnt = document.getElementById('pg:generalViewFrm:editorDecision').value;
                // To show decision popup onclick of propose phase.
                showModal('decide-header','decide-body','decide-footer');
                return null;
        }
        
         //popup for approve click on phases arrow
        if(phasesValue == 'Decide') {
            DecisionView.approvalFromPhasesArrow(decisionId, socialInputId, function(result, event)
            {
                if (event.status)
                {
                    showDecisionApprovalModal(decisionId, result.id, result.step,'fromPhase');
                    refreshContribution();
                }
            }, {escape:true});
        }
        else if(phasesValue == 'Close') {
            if(currentPhase == 'Decide') {
                $('#reasonForClose').val($("#reasonForClose option:contains('Cancelled')").val());
            }
            else if(currentPhase == 'Execute') {
                $('#reasonForClose').val($("#reasonForClose option:contains('Executed')").val());
            }
            else if(currentPhase == 'Evaluate') {
                $('#reasonForClose').val($("#reasonForClose option:contains('Evaluated')").val());
            }
            else {
                $('#reasonForClose').val($("#reasonForClose option:contains('Withdrawn')").val());
            }
            showModal('close-header', 'close-body','close-footer'); 
          
            
                
            
            
        }
        else { 
        
        // ------------- Added for confirmation popup for re-share of the decision ------- sendil - 27-06-2014
       // alert(currentPhase+ " and " +phasesValue);
       if(!backtoShare){
            if(phasesValue == "Share"){
                if( currentPhase != "Draft" ){
                    checkPhaseMovement();
                    return false;
                }
            }
        }
        backtoShare = false;
        // ------------- Ends confirmation popup for re-share of the decision ------- sendil - 27-06-2014
          
            DecisionView.decisionPhaseChange(decisionId , socialInputId, phasesValue, '' , '' , function(result, event)
            {
                if (event.status)
                {         
                
                        if(phasesValue == 'Share' || phasesValue == 'Propose' || phasesValue == 'Execute' || phasesValue == 'Evaluate') {
                             chatterRefresh(); 
                          } 
                        // update phases arrow
                        decisionSocialInputDetail(result.decisionObject.Id,
                                                    result.socialIndividual.Id,
                                                        result.decisionObject.Phase__c, 
                                                            result.decisionObject.Status__c, 
                                                                result.socialIndividual.Accountable__c, 
                                                                    result.socialIndividual.Responsible__c, 
                                                                        result.socialIndividual.Consulted__c, 
                                                                            result.socialIndividual.Informed__c, 
                                                                                result.socialIndividual.Backup_for_Accountable__c, 
                                                                                    result.socialIndividual.Veto_Rights__c,
                                                                                        result.socialIndividual.Role_Acceptance_Status__c,
                                                                                            result.socialIndividual.Final_Approval_Status__c,
                                                                                                result.socialIndividual.Stance_Approval_Status__c,
                                                                                                    result.socialIndividual.Role__c,
                                                                                                        result.decisionObject.test__c);  
                        
                        setApprovalButtonName(result.socialIndividual.Role_Acceptance_Status__c,result.socialIndividual.Stance_Approval_Status__c,result.socialIndividual.Final_Approval_Status__c);
                      
                             //enable or disable glyph in evaluation.            
                            if(   ( result.socialIndividual.Effort__c ==  undefined ) || ( result.socialIndividual.Result__c ==  undefined )  )  
                            {       if ( phasesValue == 'Evaluate' ||  phasesValue == 'Close'  ) 
                                    document.getElementById('glyphEvaluation').style.display = 'block';
                                    else
                                    document.getElementById('glyphEvaluation').style.display = 'none';                            
                            }
                           //enable or disable glyph in timing.            
                           if ( result.decisionObject.Nearest_Due_Date__c  ==  undefined   ) 
                                  document.getElementById('glyphTiming').style.display = 'block';
                           else
                           document.getElementById('glyphEvaluation').style.display = 'none';                            
                               
                        
                        // update timing tab
                        //if(contentLoadChkForTiming == 'statefull'){ 
                            var newtimingObject = removeQuotes(result.timingObject);
                            var grid = $("#gridTime").data("kendoGrid");
                            grid.dataSource.data(newtimingObject);
                            viewModelTiming.ds.data(
                             viewModelTiming.ds.options.schema.parse(newtimingObject || []) //just in case thenew data is null
                            );
                        //}
                        refreshContribution();
                        //Update comand center timing minitab
                        updateTimerCountdown(newtimingObject)
                      
                        //var newApproval = removeQuotes(result.approvalObject);
                        // grid = $("#gridApproval").data("kendoGrid");
                        // grid.dataSource.data(newApproval);
                        
                        // update people tab
                        var newPeople = removeQuotes(result.peopleObject);
                        grid = $("#gridPeople").data("kendoGrid");
                        grid.dataSource.data(newPeople);
                        $(".people-tab").html('('+ newPeople.length+')')

                        // update approval tab
                        var newApproval = removeQuotes(result.approvalObject);
                        //kendoApproval(newApproval);
                        //grid = $("#gridApproval").data("kendoGrid");
                        //grid.dataSource.data(newApproval);
                        $('.approvals-tab').html('('+newApproval.length+')');
                        if(newApproval.length > 0){
                            if(newApproval[0].step != null){
                                decisionApprovals(result.decisionObject.Id,newApproval);
                            }
                        }else{
                            $('#btnApproveReject').addClass('role-AcceptanceCommandCenter-BtnDisabled');
                            $("#btnApproveReject").attr('onclick','').unbind('click');
                        }
                        
                        if(result.socialIndividual.Stance_Approval_Status__c == 'Pending Approval'){
                            if(result.socialIndividual.Accountable__c || result.socialIndividual.Backup_for_Accountable__c || result.socialIndividual.Responsible__c || result.socialIndividual.Consulted__c){  
                                document.getElementById('myStanceApprovalIcon').style.display = 'block';
                                document.getElementById('glyphOverview').style.display = 'block';

                            } else {
                                document.getElementById('myStanceApprovalIcon').style.display = 'none';
                                document.getElementById('glyphOverview').style.display = 'none';

                            }
                        } else {
                            document.getElementById('myStanceApprovalIcon').style.display = 'none';
                            document.getElementById('glyphOverview').style.display = 'none';

                        }
                        if(result.socialIndividual.Final_Approval_Status__c == 'Pending Approval'){
                            if(result.socialIndividual.Accountable__c || result.socialIndividual.Backup_for_Accountable__c){
                                document.getElementById('statusApprovalIcon').style.display = 'block';
                                document.getElementById('glyphOverview').style.display = 'block';

                            } else {
                                document.getElementById('statusApprovalIcon').style.display = 'none';
                                document.getElementById('glyphOverview').style.display = 'none';

                            }
                        } else {
                            document.getElementById('statusApprovalIcon').style.display = 'none';
                            document.getElementById('glyphOverview').style.display = 'none';

                        }
                        
                        // get updated history records 
                        if(contentLoadChkForHistory == 'statefull'){    
                            historyTabRefresh(decisionId);
                        }
                        
                        //update neaest due date
                        //updateDecisionNearestDueDate(decisionId); 
                        
                        // update tab structure 
                        decisionTabControll(result.socialIndividual.Id,result.socialIndividual.SYS_Tab_View_Social_Input__c,result.socialIndividual.SYS_Tab_View_Tasks__c,result.socialIndividual.SYS_Tab_View_Activites__c,result.socialIndividual.SYS_Tab_View_Relations__c,result.socialIndividual.SYS_Tab_View_Attachments__c,result.socialIndividual.SYS_Tab_View_Quality__c,result.socialIndividual.SYS_Tab_View_History__c );
                       
                      if(phasesValue == 'Share' || phasesValue == 'Propose' || phasesValue == 'Execute' || phasesValue == 'Evaluate') {
                         chatterRefresh(); 
                      } 
                      if( phasesValue == 'Share' || phasesValue == 'Execute' ) 
                      enableMatrix(); 
                }
            }, {escape:false});
        }
         //var decisionWindows = $(".modal-window");
         //decisionWindows.data("kendoWindow").center();        
    }
    
    // Close the decision 
    function decisionClose() {
        var reasonForClose = $('#reasonForClose').val();
        var comments = $('#closeComments').val(); 
        
        // Code to hover on status block. The reason for close should be displayed on hover.
        $('#status-block').attr('title', reasonForClose);
                    document.getElementById('glyphTiming').style.display = 'none'; 
       //alert(                    document.getElementById('glyphTiming').style.display ); 
       
       
        DecisionView.decisionPhaseChange(decisionId , socialInputId, phasesValue, reasonForClose, comments , function(result, event)
            {
                if (event.status)
                {
                    document.getElementById('statusApprovalIcon').style.display = 'none';
                    document.getElementById('myStanceApprovalIcon').style.display = 'none';
                    document.getElementById('glyphOverview').style.display = 'none';
                    document.getElementById('glyphEvaluation').style.display = 'block';                    
                        // close the close popup !!!
                        hideModal();
                        
                        // update phases arrow
                        decisionSocialInputDetail(result.decisionObject.Id,
                                                    result.socialIndividual.Id,
                                                        result.decisionObject.Phase__c, 
                                                            result.decisionObject.Status__c, 
                                                                result.socialIndividual.Accountable__c, 
                                                                    result.socialIndividual.Responsible__c, 
                                                                        result.socialIndividual.Consulted__c, 
                                                                            result.socialIndividual.Informed__c, 
                                                                                result.socialIndividual.Backup_for_Accountable__c, 
                                                                                    result.socialIndividual.Veto_Rights__c, 
                                                                                        result.socialIndividual.Role_Acceptance_Status__c,
                                                                                            result.socialIndividual.Final_Approval_Status__c,
                                                                                                result.socialIndividual.Stance_Approval_Status__c,
                                                                                                    result.socialIndividual.Role__c,
                                                                                                        result.decisionObject.test__c);   
                        
                        // update timing tab
                        //if(contentLoadChkForTiming == 'statefull'){ 
                            var newtimingObject = removeQuotes(result.timingObject);
                            grid = $("#gridTime").data("kendoGrid");
                            grid.dataSource.data(newtimingObject);
                            viewModelTiming.ds.data(
                                viewModelTiming.ds.options.schema.parse(newtimingObject || []) //just in case thenew data is null
                            );
                        //}
                         
                        //Update comand center timing minitab
                        updateTimerCountdown(newtimingObject)
                         document.getElementById('glyphTiming').style.display = 'none'; 
                        // update people tab
                        var newPeopleTab = removeQuotes(result.peopleObject);
                        grid = $("#gridPeople").data("kendoGrid");
                        grid.dataSource.data(newPeopleTab);
                        $(".people-tab").html('('+ newPeopleTab.length+')')

                        // get updated history records 
                        if(contentLoadChkForHistory == 'statefull'){    
                            historyTabRefresh(decisionId);
                        }
                        
                        //update neaest due date
                        //updateDecisionNearestDueDate(decisionId); 
                        refreshContribution();
                        // update tab structure
                        decisionTabControll(result.socialIndividual.Id,result.socialIndividual.SYS_Tab_View_Social_Input__c,result.socialIndividual.SYS_Tab_View_Tasks__c,result.socialIndividual.SYS_Tab_View_Activites__c,result.socialIndividual.SYS_Tab_View_Relations__c,result.socialIndividual.SYS_Tab_View_Attachments__c,result.socialIndividual.SYS_Tab_View_Quality__c,result.socialIndividual.SYS_Tab_View_History__c );
                       
                       chatterRefresh();
                       disableMatrix();
                       //  approval table refresh
                       DecisionView.approvalTab(decisionId , function(result, event) {
                            if (event.status)
                            {
                                var approvalTabToBeRefreshed = removeQuotes(result);
                                //kendoApproval(approvalTabToBeRefreshed);
                               // var grid = $("#gridApproval").data("kendoGrid");
                               // grid.dataSource.data(approvalTabToBeRefreshed);
                               // $('.approvals-tab').html('('+approvalTabToBeRefreshed.length+')');
                                if(approvalTabToBeRefreshed.length > 0){
                                    if(approvalTabToBeRefreshed[0].step != null){
                                        decisionApprovals(decisionId,approvalTabToBeRefreshed);
                                    }
                                }else{
                                    $('#btnApproveReject').addClass('role-AcceptanceCommandCenter-BtnDisabled');
                                    $("#btnApproveReject").attr('onclick','').unbind('click');
                                }
                            }
                       },{escape: true});
                }
            }, {escape:true});
             
             
    }
    
    // *****************  Decision Decide ****************//
    
    function decideSave(decisionId) {
    
        var reasonForClose = '';
        var comments = '';
        var problemStatemnt = document.getElementById('pg:generalViewFrm:editorProblemStatement').value;
        var decisionStatemnt = document.getElementById('pg:formId:editorDecide').value;
        
        if(decisionStatemnt =='' || decisionStatemnt ==' ' || decisionStatemnt == null) {
            alert('Please enter the decision '); 
            
            return false;
        }
        
         if(decisionStatemnt != '' || decisionStatemnt != null){
             if(decisionStatemnt.substring(1,40) == 'amp;lt;div style="text-align: justify; '){
                 if(decisionStatemnt.substring(42,49) == 'amp;gt;'){
                     if(decisionStatemnt.substring(50,58) == 'amp;lt;p'){
                         if(decisionStatemnt.substring(59,66) == 'amp;gt;'){
                             if(decisionStatemnt.substring(67,76) == 'amp;lt;br'){
                                 alert('Please Enter the Decision Description');
                                 return false;
                             }
                         }
                     }
                 }
             }
            
         } 
        
          
        
        var phasesValue1 = 'Propose'; 
        DecisionView.decisionPhaseChangewithRTF(problemStatemnt,decisionStatemnt,decisionId , socialInputId, phasesValue1, reasonForClose, comments , function(result, event) 
        {  
            if (event.status)
            {        
                    // update phases arrow
                        decisionSocialInputDetail(result.decisionObject.Id,
                                                    result.socialIndividual.Id,
                                                        result.decisionObject.Phase__c, 
                                                            result.decisionObject.Status__c, 
                                                                result.socialIndividual.Accountable__c, 
                                                                    result.socialIndividual.Responsible__c, 
                                                                        result.socialIndividual.Consulted__c, 
                                                                            result.socialIndividual.Informed__c, 
                                                                                result.socialIndividual.Backup_for_Accountable__c, 
                                                                                    result.socialIndividual.Veto_Rights__c,
                                                                                        result.socialIndividual.Role_Acceptance_Status__c,
                                                                                            result.socialIndividual.Final_Approval_Status__c,
                                                                                                result.socialIndividual.Stance_Approval_Status__c,
                                                                                                    result.socialIndividual.Role__c,
                                                                                                        result.decisionObject.test__c);  
                        
                        // update timing tab
                        //if(contentLoadChkForTiming == 'statefull'){ 
                            var newtimingObject = removeQuotes(result.timingObject);
                            var grid = $("#gridTime").data("kendoGrid");
                            grid.dataSource.data(newtimingObject);
                            viewModelTiming.ds.data(
                                viewModelTiming.ds.options.schema.parse(newtimingObject || []) //just in case thenew data is null
                            );
                        //}                    
                        
                        //Update comand center timing minitab
                        updateTimerCountdown(newtimingObject)
                        // update people tab
                        var newPeople = removeQuotes(result.peopleObject);
                        grid = $("#gridPeople").data("kendoGrid");
                        grid.dataSource.data(newPeople);
                        $(".people-tab").html('('+ newPeople.length+')')

                        if(result.socialIndividual.Stance_Approval_Status__c == 'Pending Approval'){
                            if(result.socialIndividual.Accountable__c || result.socialIndividual.Backup_for_Accountable__c || result.socialIndividual.Responsible__c || result.socialIndividual.Consulted__c){  
                                document.getElementById('myStanceApprovalIcon').style.display = 'block';
                                document.getElementById('glyphOverview').style.display = 'block';

                            } else {
                                document.getElementById('myStanceApprovalIcon').style.display = 'none';
                                document.getElementById('glyphOverview').style.display = 'none';

                            }
                        } else {
                            document.getElementById('myStanceApprovalIcon').style.display = 'none';
                            document.getElementById('glyphOverview').style.display = 'none';

                        }
                        
                        // update approval tab
                        var newApproval = removeQuotes(result.approvalObject);
                        //kendoApproval(newApproval);
                       // grid = $("#gridApproval").data("kendoGrid");
                       // grid.dataSource.data(newApproval);
                        
                        $('.approvals-tab').html('('+newApproval.length+')');
                        if(newApproval.length > 0){
                            if(newApproval[0].step != null){
                                decisionApprovals(decisionId,newApproval);
                            }
                        }else{
                            $('#btnApproveReject').addClass('role-AcceptanceCommandCenter-BtnDisabled');
                            $("#btnApproveReject").attr('onclick','').unbind('click');
                        }
                        // get updated history records 
                        if(contentLoadChkForHistory == 'statefull'){    
                            historyTabRefresh(decisionId);
                        }
                        
                        // update tab structure
                        decisionTabControll(result.socialIndividual.Id,result.socialIndividual.SYS_Tab_View_Social_Input__c,result.socialIndividual.SYS_Tab_View_Tasks__c,result.socialIndividual.SYS_Tab_View_Activites__c,result.socialIndividual.SYS_Tab_View_Relations__c,result.socialIndividual.SYS_Tab_View_Attachments__c,result.socialIndividual.SYS_Tab_View_Quality__c,result.socialIndividual.SYS_Tab_View_History__c );
                        ProblemStatementOnClickDecide(problemStatemnt,decisionStatemnt);
                        hideModal();
                        chatterRefresh();
                        refreshContribution();
            }
        }, {escape:true}); 
        expandCollapse('classification-view','classification-btn');
        
    }
    
    // JS method to call decision clone
    function decisionClone(decisionId) { 
        // Declaring variable for the objects/tab to be cloned
        var pepleClone = $("#pepleClone").prop('checked');
        var resetDateClone = $("#resetDateClone").prop('checked');
        var taskClone = $("#taskClone").prop('checked');
        var relationsClone = $("#relationsClone").prop('checked');
        var relatedToDecision = $("#relatedToDecision").prop('checked');
        var assignToMeChkBox = $("#assignToMeChkBox").prop('checked');
        var relatedToRelation =  $('#relatedToRelation').val();
        var attachmentsClone = $('#attachmentsClone').prop('checked');
        // Remote script to call decisionCopy method
        
        DecisionView.decisionCopy(decisionId, convertStringToBoolean(pepleClone), convertStringToBoolean(resetDateClone), convertStringToBoolean(taskClone), convertStringToBoolean(relationsClone), convertStringToBoolean(relatedToDecision), convertStringToBoolean(assignToMeChkBox), relatedToRelation, convertStringToBoolean(attachmentsClone), function(result, event)
        {
            if (event.status)
            {
                window.location ='/' +result;
            }
        }, {escape:true});
        
    }
    
    // Call History Tab
    function historyTabRefresh(decisionId) {
            DecisionView.viewHistory(decisionId , function(result, event) 
            {
                if (event.status)
                {
                    if(contentLoadChkForHistory == 'statefull'){    
                        var newHistotry = removeQuotes(result);
                        kendoHistory(newHistotry);
                    }
                }
            }, {escape:true});
     
    }
    
    // Call Approval Tab 
    function approvalTabRefresh() {
         DecisionView.approvalTab(decisionId , function(result, event) 
        {
            if (event.status)
            {
                //var newApproval = removeQuotes(result);
                //kendoApproval(newApproval);
               // var grid = $("#gridApproval").data("kendoGrid");
               // grid.dataSource.data(newApproval);
                $('.approvals-tab').html('('+newApproval.length+')');
                if(newApproval.length > 0){
                    if(newApproval[0].step != null){
                        decisionApprovals(decisionId,newApproval);
                    }
                }else{
                    $('#btnApproveReject').addClass('role-AcceptanceCommandCenter-BtnDisabled');
                    $("#btnApproveReject").attr('onclick','').unbind('click');
                }
            }
        }, {escape:true});
    }
    
    // Call People Tab. This is not used. For now this is a dummy method.
    function peopleTabRefresh(decisionId) {
        var dummyparam = '';
        DecisionView.viewSocialPeopleTabWithSearch(decisionId, dummyparam, '', function(result, event) 
        {
            if (event.status)
            {
                var newApproval = removeQuotes(result);
                var grid = $("#gridPeople").data("kendoGrid");
                grid.dataSource.data(newApproval);
                $(".people-tab").html('('+ newApproval.length+')')

            }
        }, {escape:true});
    }
    
    
    // Delete Realtionship
    
    function deleteRelationship(decisionId, relationshipId , isDeletable) {
        if(convertStringToBoolean(isDeletable)) {
            DecisionView.viewAllRelationships(decisionId , relationshipId , function(result, event) 
            {
                if (event.status)
                {
                    
                    var newRelationshipJson = removeQuotes(result);
                    var grid = $("#gridRelationship").data("kendoGrid");
                    grid.dataSource.data(newRelationshipJson );
                    $('.relation-tab').html('('+newRelationshipJson.length+')');
                  //  kendoRelationship(newRelationshipJson);
                }
            }, {escape:true});
            
        }
    }
    
    // Delete Collabrotor
    function deleteItemCollab(decisionId, socialInputId , isDeletable) {
        if(convertStringToBoolean(isDeletable)) {
            DecisionView.viewSocialPeopleTabWithSearch(decisionId , socialInputId , '', function(result, event) 
            {
                if (event.status)
                {
                    
                     var newCollabrotorJson = removeQuotes(result);
                     var grid = $("#gridPeople").data("kendoGrid");
                     grid.dataSource.data(newCollabrotorJson);
                     $('.people-tab').html('('+newCollabrotorJson.length+')');
                }
            }, {escape:true}); 
        }
    }
    
    // Delete Attachments 
    function deleteNotesAttachment(decisionId, attacmentId,isDeletable, type) {
        if(convertStringToBoolean(isDeletable)) {
            DecisionView.deleteNotesAttachments(decisionId,attacmentId, type, function(result, event) 
            {
                if (event.status)
                {
                    var newNotesAttachmentJson = removeQuotes(result);
                    
                    kendoAttachmentNote(newNotesAttachmentJson);
                }
            }, {escape:true});
        }
     }
    
    // update  timing value of phases
    function changetimingValue(phasesId,plannedStartDate,plannedEndDate, comments ) { 
    console.log('phasesIdphasesId'+plannedEndDate);
        DecisionView.upateTimingTab(phasesId,plannedStartDate,plannedEndDate, comments , function(result, event)
        {
            if (event.status)
            {
                //if(contentLoadChkForTiming == 'statefull'){
                    var newTimingJson =  removeQuotes(result);
                    var grid = $("#gridTime").data("kendoGrid");
                    document.getElementById('pg:commandCenterDueDate').innerHTML = newTimingJson[2].plannedEnd;
                    grid.dataSource.data(newTimingJson);
                    viewModelTiming.ds.data(
                            viewModelTiming.ds.options.schema.parse(newTimingJson || []) //just in case thenew data is null
                    );
                    updateTimerCountdown(newTimingJson);
                    refreshTimigPanel();
                //}
            }
        }, {escape:false});
    }
    
    
    // Delete task and event 
    function deleteTaskEvent(decisionId, taskEventId,isDeletable, type) {
        if(convertStringToBoolean(isDeletable)) {
            DecisionView.activitiesTabWithSearch(decisionId , taskEventId,'', function(result, event)
            {
                if (event.status)
                {
                    var newTaskEvent = removeQuotes(result.taskEvent);
                    var grid =$("#gridTaskEvent").data("kendoGrid");
                    grid.dataSource.data(newTaskEvent );
                    viewModel.ds.data(
                      viewModel.ds.options.schema.parse(newTaskEvent || []) //just in case thenew data is null
                    );
                    $('.task-tab').html('('+newTaskEvent.length+')');
                    //var newActivitiesTaskEvent = removeQuotes(result.activitiesTaskEvent);
                    //kendoTaskEvent(newTaskEvent,'');
                    cancelDeletePopup();
                      isTaskDelay  = false;
                        if(newTaskEvent != null){
                            for(var i = 0;  newTaskEvent.length > i; i ++ ) {
                                if(newTaskEvent[i].delayTaskClass == 'delayTask' ) {
                                    isTaskDelay = true;
                                }
                            }
                        }
                        
                        if(isTaskDelay) {
                            $('#activityTab a').css('color','#ff0000 !important');
                        }
                        else {
                            $('#activityTab a').css('color','#222');
                        }
                            //kendoActivitiesTaskEvent(newActivitiesTaskEvent);
                        }
            }, {escape:true});
        }
    } 
    
    // search tasks and event based on subject
    function searchEventTask(decisionId, searchText ){
        DecisionView.activitiesTabWithSearch(decisionId , '',searchText, function(result, event)
        {
            if (event.status)
            {
                var newTaskEvent = removeQuotes(result.taskEvent);
                //var newActivitiesTaskEvent = removeQuotes(result.activitiesTaskEvent);
                //kendoTaskEvent(newTaskEvent,'',AccountableForActivities,BackupForActivities,RoleAcceptanceForBackupInActivities,responsibleForActivities);
                grid = $("#gridTaskEvent").data("kendoGrid");
                viewModel.ds.data(
                    viewModel.ds.options.schema.parse(newTaskEvent || []) //just in case thenew data is null
                );
                grid.dataSource.page(1);
                grid.dataSource.data(newTaskEvent );
                $('.task-tab').html('('+newTaskEvent.length+')');
                //kendoActivitiesTaskEvent(newActivitiesTaskEvent);
            }
        }, {escape:true});
    }
    
    function selectTaskFunc(taskId,isDelete,isSelect){
        var idx = selectedTasks.indexOf(taskId);
        if(idx == -1){
            selectedTasks.push(taskId);
            chkMassDeletePermission.push(isDelete);
        } else {
            chkMassDeletePermission.indexOf(isDelete);
            chkMassDeletePermission.splice(idx, 1);
            selectedTasks.splice(idx, 1); // Remove it if really found!
        }
        if(selectedTasks.length == 0){
            $('#deleteTask').addClass('btn-disabled');
            $('#deleteTask').attr('onclick','').unbind('click');
            $('#editTask').addClass('btn-disabled');
            $('#editTask').attr('onclick','').unbind('click');
        } else {
            $('#deleteTask').removeClass('btn-disabled');
            $("#deleteTask").click(function() {
                 openDeleteMassTask();
            });
            $('#editTask').removeClass('btn-disabled');
            $("#editTask").click(function() {
                   openEditMassTask();
           });
        }
    }
    
    // Display scatter chart //
    
    function scatterChart (decisionId) {
        DecisionView.kendoScatter(decisionId, function(result,event)
        {
            if (event.status)
            {
                showModal('outcome-header','outcome-body','outcome-footer');
                var newScatter = removeQuotes(result);
                createChart(newScatter);
            }
        }, {escape:true});
    }
    
    // ************* store tag ********************** //
    function insertTag(decisionId) {
        var insertTag = document.getElementById('inputTag').value;
        DecisionView.insertTag(decisionId,insertTag, function(result,event)
        {
            if (event.status)
            {
                refreshTag();
                hideModal();
            }
        }, {escape:true});
        
    }
    
    // ************** ********************//
    function deleteIssues(decisionId, issuesId, isDeletable) {
        if(convertStringToBoolean(isDeletable)) {
            DecisionView.issuesQuality(decisionId , issuesId, function(result, event)
            {
                
                if (event.status)
                {
                    var newIssues = removeQuotes(result);
                    var grid = $("#gridIssues").data("kendoGrid");
                    grid.dataSource.data(newIssues );
                    $('.quality-tab').html('('+newIssues.length+')');
                }
            }, {escape:true});
        }
    }
    
    //****************** Enter Key Press ******************//
    
    function pressedEnterKey(e){
        if(e.keyCode == 13){
            getPlanList();
        }
    }
    
    // ***************** refresh timing tab ***************//
    
    function timingTabRefresh(decisionId){
        DecisionView.timingTab(decisionId, function(result, event)
            {
                if (event.status)
                {  
                    //if(contentLoadChkForTiming == 'statefull'){
                        var newTiming = removeQuotes(result);
                        grid = $("#gridTime").data("kendoGrid");
                        grid.dataSource.data(newTiming);
                        viewModelTiming.ds.data(  
                                viewModelTiming.ds.options.schema.parse(newTiming || []) //just in case thenew data is null
                        );
                        //Update comand center timing minitab
                         updateTimerCountdown(newTiming)
                     //}
                 }
            }, {escape:true});
    }
      
    
    
    // Popover on Add/Edit People
   
   // ***************** Gruop Member Popup  ********************//
    function groupMemberPopup(groupId,groupName, isGroup) {  
    
        if(convertStringToBoolean(isGroup)) {
            DecisionView.retrieveGroupMember(groupId, function(result,event)
            {
                if (event.status)
                {
                    
                    showModal('groupmember-header','groupmember-body','groupmember-footer');
                    $('.group-name').html(groupName);
                    var newGroupMember = removeQuotes(result);
                    kendoGroupMember(newGroupMember);
                        
                }
            }, {escape:true});
        }
    }
   
    // Get deafault plan list 
    function getPlanList() {
        selectedPlans = new Array();
        var searchPlan =  $('#searchPlanId').val();
        DecisionView.getPlanListItem(searchPlan,function(result,event) 
        {
            if (event.status)
            {
                kendoPlanList(removeQuotes(result));
                showModal('toplan-header','toplan-body','toplan-footer');
            }
        }, {escape:true});
    }
    
    // Get Plan Ids
    var selectedPlans = new Array();
    function selectPlanFunc(planId){
        var idx = selectedPlans.indexOf(planId);
        if(idx == -1){
            selectedPlans.push(planId);
        }else{
            selectedPlans.splice(idx, 1); // Remove it if really found!
        }
    }
    
   // Adding Selected Plan Records from Add to Plan Button
    function addPlans(descId,DescTitle){
        var DescTitle = document.getElementById('pg:generalViewFrm:decisionTitle').value;
        if(selectedPlans.length == 0){
            alert('Please select plans');
            return false;
        } else {
            var selectedPlanStr = selectedPlans.toString();
            var descIdstr = descId.toString();
            var DescTitlestr = DescTitle.toString();
            DecisionView.addSelectedPlan(selectedPlanStr,descIdstr,DescTitlestr,function(result,event) 
            {
            if (event.status)
                {
                    selectedPlans = new Array();
                    hideModal();
                    refreshRelationship(descId);
                    refreshContribution();
                }
            }, {escape:true});
        }
    }
    
    // Adding existing relation //
    
    function existingRelations() {
        showLoader();
        existingRelationsAddToSet();
    }
    
    // Adding Selected Plan Records from Add to Plan Button
    function refreshRelationship(descId){
        DecisionView.viewAllRelationships(descId,'', function(result,event) 
        {
        if (event.status)
            {
                var newTiming = removeQuotes(result);
                var grid = $("#gridRelationship").data("kendoGrid");
                grid.dataSource.data(newTiming );
                $('.relation-tab').html('('+newTiming.length+')'); 
                refreshContribution();
            }
        }, {escape:true});
    }
    
    function editTaskonPopup(recordId,isEditable){
        if(isEditable){
            editTaskRec(recordId);
        }
    }
    
    function editTaskRec(recId){
        DecisionView.updateTaskRec(recId,function(result, event) 
        {
            if (event.status)
            {
                var taskWrapper = removeQuotes(result);
              
                //$('#taskSubject').val(taskWrapper[0].Subject);
                //$('#taskdueDate').val(taskWrapper[0].body);
                //$('#taskComments').val(taskWrapper[0].Description);
                
                showModal('task-header','task-body','task-footer');
                
            }
        }, {escape:true}); 
    }
    
    // placeholders for financial fields
    function placeHoldersForFinancialFields(){
        var pos = phaseArray.indexOf(currentPhase);
        if(3 > pos) {
            var text_box = document.getElementById('pg:generalViewFrm:actualInvestment');   
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:actualDirectCost');   
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:actualNPV');   
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:actualPeopleInvolved');   
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:actualFTE');   
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:actualRevenue');   
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:actualInvestmentDesc');   
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:actualInvestmentDesc');
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:actualDirectCostDesc');
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:actualNPVDesc');
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:actualPeopleDesc');
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:actualFTEDesc');  
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:actualRevenueDesc');
            text_box.setAttribute('readonly', 'readonly'); 
        } 
        /*if(pos > 1) {
            var text_box = document.getElementById('pg:generalViewFrm:estimatedInvestment');   
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:estimatedInvestmentDesc');   
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:estimatedDirectCost');   
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:estimatedDirectCostDesc');   
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:estimatedRevenue');   
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:estimatedRevenueDesc');   
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:estimatedNPV');   
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:estimatedNPVDesc');
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:estimatedPeople');
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:estimatedPeopleDesc');
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:estimatedFTE');
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:estimatedFTEDesc');  
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:decisionTitle');
            text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:identifierId');
            text_box.setAttribute('readonly', 'readonly'); 
            //var text_box = document.getElementById('pg:generalViewFrm:editorProblemStatement');
            //text_box.setAttribute('readonly', 'readonly'); 
            //var text_box = document.getElementById('pg:generalViewFrm:editorDecision');
            //text_box.setAttribute('readonly', 'readonly'); 
            var text_box = document.getElementById('pg:generalViewFrm:dueDateId');  
            text_box.setAttribute('readonly', 'readonly'); 
        }*/
        document.getElementById('pg:generalViewFrm:estimatedInvestmentDesc').placeholder = 'Enter Text...';
        document.getElementById('pg:generalViewFrm:estimatedDirectCostDesc').placeholder = 'Enter Text...';
        document.getElementById('pg:generalViewFrm:estimatedNPVDesc').placeholder = 'Enter Text...';
        document.getElementById('pg:generalViewFrm:estimatedPeopleDesc').placeholder = 'Enter Text...';
        document.getElementById('pg:generalViewFrm:estimatedFTEDesc').placeholder = 'Enter Text...';
        document.getElementById('pg:generalViewFrm:estimatedRevenueDesc').placeholder = 'Enter Text...';
        document.getElementById('pg:generalViewFrm:actualInvestmentDesc').placeholder = 'Enter Text...';
        document.getElementById('pg:generalViewFrm:actualDirectCostDesc').placeholder = 'Enter Text...';
        document.getElementById('pg:generalViewFrm:actualNPVDesc').placeholder = 'Enter Text...';
        document.getElementById('pg:generalViewFrm:actualPeopleDesc').placeholder = 'Enter Text...';
        document.getElementById('pg:generalViewFrm:actualFTEDesc').placeholder = 'Enter Text...';
        document.getElementById('pg:generalViewFrm:actualRevenueDesc').placeholder = 'Enter Text...';
        
       
    }
    
        //adding new task for decisions in items
    function saveNewTaskForDecision(){
       var subject = document.getElementById('pg:newtaskForm:subjectForTask').value;
       if(subject == ''){
           alert('Please enter subject');
           return false;
       }
       var assignTo = document.getElementById('pg:newtaskForm:assignTo').value;
       if(assignTo == ''){
           alert('Please enter Assigned To');
           return false;
       }
       var sendingNotification = document.getElementById('sendingNotification').checked;
       saveThisTask(sendingNotification);
       hideModal();
       //setTextAreaSize();
    } 
    
    // Edit Task and Event 
    function editTaskEvent(Id, isEditable, isTask,modeType) {
        if(modeType == 'EditMode'){
            if(convertStringToBoolean(isEditable)) {
                showLoader();
                if(isTask == 'Task') {
                    // Opens task popup in edit mode
                    $('body').css('overflow','hidden')
                    editThisTask(Id,isEditable,modeType);
                }
                else {
                    // Opens event popup in edit mode
                    editThisEvent(Id);
                }
            }
        } else {
            showLoader();
            if(isTask == 'Task') {
                // Opens task popup in read mode
                $('body').css('overflow','hidden')
                editThisTask(Id,isEditable,modeType);
            }
            else {
                editThisEvent(Id);
            }
        }
    }
    // New Task popup to call component
    function newTaskPopupComp(){
        showLoader();  
        newTaskPopupComponent();
        
    }
    
    function updateValidateTask() {
        var subject = document.getElementById('pg:editTaskForm:subjectForTask').value;
       if(subject == ''){
           alert('Please enter subject');
           return false;
       }
       var assignTo = document.getElementById('pg:editTaskForm:assignTo').value;
       if(assignTo == ''){
           alert('Please enter Assigned To');
           return false;
       }
       currentTaskEventSubject = subject;
       var sendingNotification = document.getElementById('sendingNotification').checked;
      
        updateTask(sendingNotification);
    }
    
    function updateValidateEvent(){
        var subjectEvent = document.getElementById('pg:popupforEvent:subject').value;
        if (subjectEvent == ''){
            alert('Please enter subject');
            return false;
        }
        var assignTo = document.getElementById('pg:popupforEvent:assignTo').value;
        if(assignTo == ''){
            alert('Please enter Assigned To');
            return false;
        }
        var startDateTime = document.getElementById('pg:popupforEvent:eventStartDateTime').value;
        if(startDateTime == ''){
            alert('Please enter Start Date Time');
            return false;
        }
        var endDateTime = document.getElementById('pg:popupforEvent:eventEndDateTime').value;
        if(endDateTime == ''){
            alert('Please enter End Date Time');
            return false;
        }
        currentTaskEventSubject = subjectEvent;
        updateEvent();hideModal();
    }
    
    function count(txt){
        if(txt.value.length > 255)
            return false;
        return true;
    }
    
    // Remote function call for search feature in people tab
    function searchPeople(decisionId, searchPhrase){
        DecisionView.viewSocialPeopleTabWithSearch(decisionId , '',searchPhrase, function(result, event)
        {
            if (event.status)
            {
                var newPeople = removeQuotes(result);
                var grid = $("#gridPeople").data("kendoGrid");
                grid.dataSource.data(newPeople);
                $(".people-tab").html('('+ newPeople.length+')')

            }
        }, {escape:true});
    }

    //********************* Start - Decision Matrix - to add / remove columns and rows *************************//
     var addEvent_;
    if (document.addEventListener) {
        addEvent_ = function(element, type, handler) {
            element.addEventListener(type, handler, null);
        }
    }
    else if (document.attachEvent) {
        addEvent_ = function(element, type, handler) {
        element.attachEvent("on" + type, handler);
        }
    }
    else {
        addEvent_ = new Function; // not supported
    }
     
    function getTarget(e) {
        if (window.event){
            if (window.event.srcElement)
                return window.event.srcElement ;
            }
        if (e){
            if(e.target)
                return e.target ;
            }
        if (!e)
            return false ;
    }
    
    function climbDom(e, tag_type) {
        while ( e.nodeName.toLowerCase() != tag_type )
        if( e.nodeName.toLowerCase() != 'html' )
        e = e.parentNode ;
        return (e.nodeName.toLowerCase() == 'html') ? null : e ;
    }
     
    function setup() {
        // All fields within td-s in the table body should clean up on change..
      
        if( getBody() == undefined)
        return;
       
        var myCells = getBody().getElementsByTagName('td') ;
        // Loop through all cells, and find any input inside
        // Add event to any inputs found in td-s
        var myInput ;
        for (var nCell=0; myCells.length > nCell; nCell++) {
            myInput = myCells[nCell].getElementsByTagName('input')[0] ;
            if (myInput) {
                myInput.title ="Edit"
                addEvent_(myInput, 'change', validateVal, false) ;
               
            }
        }
        
        // Add a click event to all anchors in the thead, calling removeColumn
        var myHeadLinks = document.getElementById('items').getElementsByTagName('a') ; 
       
        for (var nHeadLink=0;  myHeadLinks.length > nHeadLink; nHeadLink++) {
            myHeadLinks[nHeadLink].removeAttribute('class');
            myHeadLinks[nHeadLink].setAttribute('class','gridLinkEnabled');
            addEvent_(myHeadLinks[nHeadLink], 'click', removeColumn, false) ;
        }
        
        var myHeadInputs = document.getElementById('items').getElementsByTagName('input') ; 
        for (var nHeadInput =0;  myHeadInputs.length > nHeadInput; nHeadInput++) {
            myHeadInputs[nHeadInput].removeAttribute('disabled');
            if(  myHeadInputs[nHeadInput].type != 'button' )
            myHeadInputs[nHeadInput].title ="Edit"; 
            
            addEvent_(myHeadInputs[nHeadInput], 'keyup', onKeyDownHeaderFunction, false) ;
            addEvent_(myHeadInputs[nHeadInput], 'change', saveMatrixDataTab, false) ;
            addEvent_(myHeadInputs[nHeadInput], 'change', setChartOptions, false) ;
        }
        
        var addCriteria = document.getElementById('addCriteria')  ; 
        addCriteria.removeAttribute('class');
        addCriteria.setAttribute('class','gridLinkEnabled');
        addEvent_(addCriteria, 'click', addRow, false) ;
        
        var addOption = document.getElementById('addOption')  ; 
        addOption.removeAttribute('class');
        addOption.setAttribute('class','gridLinkEnabled'); 
        addEvent_(addOption, 'click', addColumn, false) ;  
        
        
        // Add click event to anchors in rows
        var myBodyLinks = getBody().getElementsByTagName('a') ;
        for (var nBodyLink=0; myBodyLinks.length > nBodyLink; nBodyLink++) {
            myBodyLinks[nBodyLink].removeAttribute('class');
            myBodyLinks[nBodyLink].setAttribute('class','gridLinkEnabled');     
            addEvent_(myBodyLinks[nBodyLink], 'click', removeRow, false) ;
        }  
        
        //  select all input elemnts from body enable and attach change and keyup events        
        var myBodyInputs = getBody().getElementsByTagName('input') ; 
        for (var nBodyInput =0;  myBodyInputs.length > nBodyInput; nBodyInput++) {
            myBodyInputs[nBodyInput].removeAttribute('disabled');
            myBodyInputs[nBodyInput].title ="Edit";
            addEvent_(myBodyInputs[nBodyInput], 'change', saveMatrixDataTab, false) ;
            addEvent_(myBodyInputs[nBodyInput], 'keyup', validateScores, false) ;
            
            
        } 
        //enable all rows criteria lable and attach  saveMatrixDataTab event
        var myBodyInputs = getBody().getElementsByTagName('textarea') ; 
        for (var nBodyInput =0;  myBodyInputs.length > nBodyInput; nBodyInput++) {
            myBodyInputs[nBodyInput].removeAttribute('disabled');
            myBodyInputs[nBodyInput].title ="Edit";
            addEvent_(myBodyInputs[nBodyInput], 'keyup', saveMatrixDataTab, false) ;
        }
        
        // Add recalculate event to every select
        var mySelects = document.getElementsByTagName('select') ;
        for (var nSelect=0; mySelects.length > nSelect; nSelect++) {
            mySelects[nSelect].removeAttribute('disabled');            
            addEvent_(mySelects[nSelect], 'change', calcTotals, false) ;
        }
        
        //Enable title field which is disabled initially
        document.getElementById('gridTitle').removeAttribute('disabled');
        document.getElementById('gridTitle').title = "Edit"
        

            
    }
    
    function decodeInputValues() {
        // thsi mathod not used 
        var urlArgs = getArgs() ;
        for (nCol=0; urlArgs['c'] > nCol; nCol++) {
            addColumn(true) ;
        }
        
        for (nRow=0; urlArgs['r'] > nRow; nRow++) {
            addRow(true) ;
        }
        var mySelects = getSelects() ;
        var mySelectVals = urlArgs['w'].split('|') ;
        for (nSel=0; mySelectVals.length > nSel; nSel++) {
            mySelects[nSel].value = mySelectVals[nSel] ;
        }
        var myInputs = getInputs() ;
        var myInputVals = urlArgs['i'].split('|') ;
        for (nInp=0; myInputs.length > nInp; nInp++) {
            if (myInputs[nInp].type != 'button')
                myInputs[nInp].value = myInputVals[nInp+1] ;
        }
        showPermaLink() ;
    }
    
    function getArgs() {
        var args = new Object();
        var query = unescape(location.search.substring(1)) ;
        var pairs = query.split('&amp;') ;
        for (var i = 0;  pairs.length > i; i++) {
            var pos = pairs[i].indexOf('=') ;
            if (pos == -1) continue ;
            var argname = pairs[i].substring(0,pos) ;
            var value = pairs[i].substring(pos+1) ;
            args[argname] = unescape(value) ;
        }
        return args;                               // Return the object.
    }
    
    function getRows() {
        //return the rows from body matrix ie tbody
        var tRows = getBody().getElementsByTagName('tr') ;
        return tRows ;
    }
    
    function getBody() {
        //returns the tbody element from matrix
        return document.getElementById('matrixTable').getElementsByTagName('tbody')[0] ;
    }
    
    function countRows() {
        //calculate number of rows
        return getRows().length ;
    }
    
    function countCols() {
        // returns number of columns from thead which items element
        return document.getElementById('items').getElementsByTagName('th').length - 2 ;
    }
    
    function getInputs() {
        // get all inputs
        return document.getElementById('gridForm').getElementsByTagName('input') ;
    }
    
    function getSelects() {
        // get all weight drop downs
        return document.getElementById('gridForm').getElementsByTagName('select') ;
    }
    
    function calcTotals() {                                                    
    
        //method to calculate totals
        var myVals = new Object ;
        var myRows = getRows() ;
        var nRows = myRows.length ;
        var nCols = countCols() ;
        var maxScore = 0 ;
        var categories = []
        var series = []
        // Initialise tally
        for (var colN=0; nCols > colN; colN++) {
            myVals[colN] = 0 ;
            
        }
        var index = 0; 
       
        for (var i=0;    document.getElementById('items').querySelectorAll('.transp').length > i ;i++) { 
            categories[i] = document.getElementById('items').querySelectorAll('.transp')[i].value;
           
        }
        // Loop through rows, get weighting of current row, then add weighting * score to relevant place in myVals
        for (var rowN=0; nRows > rowN; rowN++) {
            var rowWeight = myRows[rowN].getElementsByTagName('select')[0].value ;
            maxScore += parseFloat(rowWeight) ;
            var currRow = myRows[rowN] ;
            for (var colN=0; nCols > colN; colN++) {
                myVal = parseInt(currRow.getElementsByTagName('td')[colN].getElementsByTagName('input')[0].value) ;
                if (isNaN(myVal)) myVal = 0 ;
                myVals[colN] += myVal * rowWeight ;
            }
        }
         var graph = {series:[],categories:[],title:''};
        // Put values into final row
        if (!maxScore > 0)
        { 
            graph.series = [];
            graph.categories  = categories;
            createChartMatrix(graph);   
            return false ;
        
        }
        var myTotals = document.getElementsByTagName('tfoot')[0].getElementsByTagName('input') ;
        for (totN=0; myTotals.length > totN; totN++) {
            myTotals[totN].value = roundNumber(myVals[totN]*100/(maxScore*10),1) + '%' ;
            series[totN]= roundNumber(myVals[totN]*100/(maxScore*10),1)  ;
        }
       
        graph.series = series;
        graph.categories  = categories;
        if(  document.getElementById('gridTitle').value != 'Put your title here...')
        graph.title  =  document.getElementById('gridTitle').value;
        else
        graph.title  =  ''; 
        console.log(graph);  
        createChartMatrix(graph);      
        saveMatrixDataTab();   
    }
    
    function permitChars(inVal) {
        var returnString = "";
        for (var i = 0;  inVal.length > i; i++) {
            var c = inVal.charAt(i);
            if ('0123456789.'.indexOf(c) != -1) returnString += c;
        }
        return returnString;
    }
    
    function roundNumber(rNum,dPlaces) {
        if (rNum > 8191){
            if( 10485 > rNum  ) {
                rNum = rNum-5000;
                var newnumber = Math.round(rNum * Math.pow(10,dPlaces)) / Math.pow(10,dPlaces);
                newnumber = newnumber+5000;
            }
        }
        else {
            var newnumber = Math.round(rNum*Math.pow(10,dPlaces))/Math.pow(10,dPlaces);
        }
        return newnumber ;
    }
    
    function validateVal(e) {
        // if non numenric then set as zero
        var fieldObj = getTarget(e) ;
        var cleanVal = parseInt(permitChars(fieldObj.value)) ;
        if (isNaN(cleanVal)) cleanVal = 0 ;
        else if (cleanVal > 10) cleanVal = 10 ;
        fieldObj.value = cleanVal ;
        calcTotals() ;
    }
    
   function validateScores(e) {
       //validate the scores if non numeric then make as zero
        var fieldObj = getTarget(e) ;
        if (isNaN(fieldObj.value))
        {  fieldObj.value = 0 ;
           return false;
        }    
    }
    
    
    function addColumn(dontFocus) {
        // Create a new th in the table head (penultimate place), containing an input for the option
        var myHead = document.getElementById('items') ;
        var numCols = countCols() ;
        var myRows = getRows() ;
        var numRows = myRows.length ;
        
        var newTH = document.createElement('th') ;
        var newChoice = document.createElement('input') ;
        newChoice.setAttribute("maxlength","40"); 
        newChoice.title = 'Edit1'
        //array containing the options possible
        letters = ['Option-A', 'Option-B', 'Option-C', 'Option-D', 'Option-E', 'Option-F', 'Option-G', 'Option-H', 'Option-I', 'Option-J', 'Option-K', 'Option-L', 'Option-M', 'Option-N', 'Option-O', 'Option-P', 'Option-Q', 'Option-R', 'Option-S', 'Option-T', 'Option-U', 'Option-V', 'Option-W', 'Option-X', 'Option-Y', 'Option-Z'];       
        var $headers = $('#items').find("th:not('.blank')");
       
         var tempindex = -1;
         var option = '';
         var number  = 0
         // for each header row check the the option names
         $headers.each(function(cellIndex){
          // first replace  all characters from 0-9 and check string contains in  letters array
          if( letters.indexOf( $(this).find('input,button').val().replace(/[0-9]/g, '') ) != -1  )
          {   //if contains without a number eg: Option-A ,Option-B
             if( letters.indexOf( $(this).find('input').val() ) != -1  )  
             {  
                // if no option label is like Option-A1 then  'option' variable will be empty string
                if(option == '')  
                if(  letters.indexOf( $(this).find('input').val() ) > tempindex   )
                {
                    tempindex = letters.indexOf( $(this).find('input').val() );                         
                }  
                  
                    
                            
             }
             // in case option label is like Option-A1,Option-B1 then calculate tempindex,option,number
             else  
             {
               
               if( ( letters.indexOf( $(this).find('input').val().replace(/[0-9]/g, '') ) >  letters.indexOf( option.replace(/[0-9]/g, '') )) || (  $(this).find('input').val().replace(/[^0-9]+/g, '')   >=   option.replace(/[^0-9]+/g, '') ) )
               {    
                   if(     $(this).find('input').val().replace(/[^0-9]+/g, '')   >=   option.replace(/[^0-9]+/g, '')  )
                   {  
                      option    =  $(this).find('input').val()
                      tempindex = letters.indexOf( $(this).find('input').val().replace(/[0-9]/g, '')  );
                      number    =   option.replace(/[^0-9]+/g, '')  
                   }  
               } 
             }   
          }  
        }); 
      
        // set new choice properties value and class
        newChoice.value =  ( tempindex >24 ?( letters[  0  ] ) :   ( letters[ tempindex +1  ] ) ) ;
        newChoice.value =  tempindex >24 ?   newChoice.value + (    parseInt(number) + 1 ) : newChoice.value + ( number == 0 ? '': number ); 
        newChoice.type = 'text' ;         
        newChoice.className = 'transp' ;
        //attach  saveMatrixDataTab on change of the option label
        addEvent_(newChoice, 'change', saveMatrixDataTab, false) ;
        addEvent_(newChoice, 'change', setChartOptions, false) ;
        addEvent_(newChoice, 'keyup', onKeyDownHeaderFunction, false) ;
        //create new link to remove column
        var newLink = document.createElement('a') ;
        newLink.title="Delete" ;        
        addEvent_(newLink, 'click', removeColumn, false) ;
        
        //append X to new link
        var newLinkText = document.createTextNode("X") ;
        newLink.appendChild(newLinkText) ;
        
        newTH.appendChild(newLink) ; 
        newTH.appendChild(newChoice) ; 
        
        //append  the new option end of the other columns
        myHead.getElementsByTagName('tr')[0].insertBefore(newTH, myHead.getElementsByTagName('th')[numCols+1]) ; ;
        
        for (nRow=0; numRows > nRow; nRow++) {
            myRows[nRow].appendChild(createCell()) ; 
        }
        
        // Add a new th in the final foot
        var newTH2 = document.createElement('th') ;
        var newTotal = document.createElement('input') ;
        newTotal.type = 'text' ;
        newTotal.disabled = 'disabled' ;
        newTH2.appendChild(newTotal) ;
        
        document.getElementById('footRow').appendChild(newTH2) ;
        
        if (!dontFocus)
            newChoice.focus() ;
    
        showFoot() ;
        calcTotals();
        saveMatrixDataTab()
        setChartOptions(); 
    }
    
    function removeColumn(e) {   
        
        // Which column?
        var callingCell = climbDom(getTarget(e), 'th') ;
        var myTHead = document.getElementById('items') ;
        // Loop through all this in head to find current one
        var myTHs = myTHead.getElementsByTagName('th') ;
        if(myTHs.length == 3)
        {
          alert('Atleast one option required');
          return;
        }
        for (nTH=0; myTHs.length > nTH; nTH++) {
            if (myTHs[nTH] == callingCell) {
                
                // Remove the th from the thead
                myTHs[nTH].parentNode.removeChild(myTHs[nTH]) ;
                
                // Remove th from tfoot
                myFootTR = document.getElementById('theFoot').getElementsByTagName('tr')[0] ;
                myFootTHs = myFootTR.getElementsByTagName('th') ;
                myFootTR.removeChild(myFootTHs[nTH]) ;
                
                // Now, loop through the rows and remove the relevant td from each row
                var myRows = getRows() ;
                for (nRow=0; myRows.length > nRow; nRow++) {
                    myRowTDs = myRows[nRow].getElementsByTagName('td') ;
                    myRows[nRow].removeChild(myRowTDs[nTH-1]) ;
                }
                
            }
        }
        calcTotals();
        saveMatrixDataTab();
    }
    
    function addRow(dontFocus) {    
        // Create new select group
        var newSelect = document.createElement('select') ;
        for (var a=0; 10 >= a; a++) {
            var newOption = document.createElement('option') ;
            newOption.value = a ;
            if (a==0) {
                newOption.appendChild(document.createTextNode('Weight')) ;
            }
            else {
                newOption.appendChild(document.createTextNode(a)) ;
            }
            newSelect.appendChild(newOption) ;
        }
        addEvent_(newSelect, 'change', calcTotals, false) ;
        // Create new criteria name field
        var newCriteriaField = document.createElement('textarea') ;
        newCriteriaField.value = 'Criteria '+ ( countRows() + 1 ) ;
        newCriteriaField.className = 'transp' ;
        newCriteriaField.setAttribute("maxlength","40"); 
        newCriteriaField.title = 'Edit' ;
        addEvent_(newCriteriaField, 'keyup', saveMatrixDataTab, false) ; 
        
        // Create new anchor
        var newLink = document.createElement('a') ;
        newLink.title="Delete" ;
        addEvent_(newLink, 'click', removeRow, false) ;
        var newLinkText = document.createTextNode("X") ;
        newLink.appendChild(newLinkText) ;
        
        // Create new th and put other children in it
        var newTH = document.createElement('th') ;
        newTH.appendChild(newLink) ;
        newTH.appendChild(newCriteriaField) ;
        newTH.appendChild(newSelect) ;
        
        // Create new row and append new th
        var newRow = document.createElement('tr') ;
        newRow.appendChild(newTH) ;
        // Create appropriate number of tds with inputs in
        for (nNewCol=0; countCols() > nNewCol; nNewCol++) {
            newRow.appendChild(createCell()) ;
        }
        // Insert new row
        getBody().appendChild(newRow) ; 
        
        if (!dontFocus)
            newCriteriaField.focus();
    
        showFoot() ;
        calcTotals();
        saveMatrixDataTab(); 
    }
    
    function removeRow(e) {  
        //Function used to remove row from tbody element
        if( countRows() == 1 )
        {
         alert('Atleast one criteria required');        
         return;
        }
        var callingRow = climbDom(getTarget(e), 'tr') ;
        getBody().removeChild(callingRow) ;
        calcTotals();   
        saveMatrixDataTab();
    }
    
    function createCell() {
        //this function is used to create cells 
        var newTD = document.createElement('td') ;
        var newInput = document.createElement('input') ;
        newInput.className = 'userScore' ;
        newInput.title = 'Edit' ;
        //add change and keyup events to new cell
        addEvent_(newInput, 'change', validateVal, false) ;
        addEvent_(newInput, 'keyup', validateScores, false) ;

        newTD.appendChild(newInput) ;
        return newTD ;
    }
    
    function showFoot() {
        if (countCols()>0){
            if(countRows()>0) {
                // Disaply footer row
                document.getElementById('theFoot').className = '' ;
            }
        }
    }
    
    function showPermaLink() {
      //This function is not used currently
        var pL = '' ;
        // Show how many columns there should be
        pL += 'c=' + countCols() ;
        // Indicate number of rows
        pL += '&amp;'+'r=' + countRows();
        // Get all select values
        var mySelects = getSelects() ;
        pL += '&amp;'+'w=' ;
        for (nSel=0; mySelects.length > nSel; nSel++) {
            if (nSel>0) pL += '|' ;
            pL += mySelects[nSel].value ;
        }
        // Get all input values
        var myInputs = getInputs() ;
        pL += '&amp;'+'i=' ;
        for (nInp=0; myInputs.length > nInp; nInp++) {
            if (nSel>0) pL += '|' ;
            if (myInputs[nInp].type == 'button')
                pL += '' ;
            else
                pL += myInputs[nInp].value ;
        }
        
        document.getElementById('permaLink').getElementsByTagName('a')[0].href = '?' + escape(pL) ;
        document.getElementById('permaLink').className = '' ;
    }
    function saveMatrixDataTab()
    {      
            var myRows = [];
            var jsonData = {"title":"","matrix":""};
            var $headers = $('#items').find("th");
            var optionArray = [];
            //validate  gridTitile
            if(document.getElementById('gridTitle').value == ''){
            alert('Please enter title');
            return false;
            }
            
            //validate for special characters and duplicate otion
            $headers.each(function(cellIndex) { 
            
            if($(this).attr("id") != "add") 
            {   if( $(this).find('input').val() == '')
                {   
                 alert('Please enter option name'); 
                 return false;  
                }
                else
                { 
                    if(/^[a-zA-Z0-9- ]*$/.test($(this).find('input').val()) == false) 
                    { 
                        alert('Please remove invalid characters from '+$(this).find('input').val());  
                        return false; 
                    } 
                } 
                if( optionArray.indexOf($(this).find('input').val())== -1 )
                { optionArray.push($(this).find('input').val()); 
                 }
                 else  
                 {  
                   alert('Please modify duplicate option '+$(this).find('input').val()); 
                   return; 
                 }
             }  
            });
            
           
            //navigate through the  table and create json data    
            var $rows = $("#tbody tr").each(function(index) {
            $cells = $(this).find("th,td");
            myRows[index] = {};
           
            $cells.each(function(cellIndex) {   
                if( $(this).is('th'))  
                {             
                      myRows[index]["name"]   =  $(this).find('textarea').val();
                      myRows[index]["weight"] =  $(this).find('select').val();
                }
                else
                {        
                      myRows[index][$($headers[cellIndex]).find('input').val()]   =  $(this).find('input').val();
                }
              }); 
              
              
            });  
            //capture the title
            jsonData.title  = document.getElementById('gridTitle').value;
            jsonData.matrix = myRows;
           //call decision view saveMatrixDataTab method and submit json  
             
           DecisionView.saveMatrixDataTab(decisionGridId,JSON.stringify(jsonData),function(result, event){   })    
    }   //function to update chart title
        function setChartTitle()
        {
           var chart = $("#matrixchart").data("kendoChart");
           chart.setOptions({ title:  {text:  document.getElementById('gridTitle').value  } });
        }
        
        function setChartOptions()  
        {    
            var  categories = [];
            for (var i=0;    document.getElementById('items').getElementsByClassName('transp').length > i ;i++) { 
               categories[i] = document.getElementById('items').getElementsByClassName('transp')[i].value;
            }
           
           var chart = $("#matrixchart").data("kendoChart");  
           chart.setOptions({ categoryAxis:{categories:categories} });
        }
        function enableMatrix() {
        // All fields within td-s in the table body should clean up on change..
      
        if( getBody() == undefined)
        return;
       
        var myCells = getBody().getElementsByTagName('td') ;
        // Loop through all cells, and find any input inside
        // Add event to any inputs found in td-s
        var myInput ;
        for (var nCell=0; myCells.length > nCell; nCell++) {
            myInput = myCells[nCell].getElementsByTagName('input')[0] ;
            if (myInput) {
                addEvent_(myInput, 'change', validateVal, false) ;
               
            }
        }
        
        // Add a click event to all anchors in the thead, calling removeColumn
        var myHeadLinks = document.getElementById('items').getElementsByTagName('a') ; 
        for (var nHeadLink=0;  myHeadLinks.length > nHeadLink; nHeadLink++) {
            myHeadLinks[nHeadLink].removeAttribute('class');
            myHeadLinks[nHeadLink].setAttribute('class','gridLinkEnabled');
            addEvent_(myHeadLinks[nHeadLink], 'click', removeColumn, false) ;
        }
        
        // Add a click event to all inputs in the thead, calling saveMatrixDataTab and enable all inputs
        var myHeadInputs = document.getElementById('items').getElementsByTagName('input') ; 
        for (var nHeadInput =0;  myHeadInputs.length > nHeadInput; nHeadInput++) {
            myHeadInputs[nHeadInput].removeAttribute('disabled');
            if(myHeadInputs[nHeadInput].type != 'button')
            myHeadInputs[nHeadInput].setAttribute('title','Edit');
            addEvent_(myHeadInputs[nHeadInput], 'change', saveMatrixDataTab, false) ;
        }
        
        //Enable addRow button ans add addRow
        var addCriteria = document.getElementById('addCriteria')  ; 
        addCriteria.removeAttribute('class');
        addCriteria.setAttribute('class','gridLinkEnabled');
        addEvent_(addCriteria, 'click', addRow, false) ;
        
        //Enable addOption buttons ans add addColumn
        var addOption = document.getElementById('addOption')  ; 
        addOption.removeAttribute('class');
        addOption.setAttribute('class','gridLinkEnabled'); 
        addEvent_(addOption, 'click', addColumn, false) ; 
        
        
        //Add click event to anchors in rows  
        var myBodyLinks = getBody().getElementsByTagName('a') ;
        for (var nBodyLink=0; myBodyLinks.length > nBodyLink; nBodyLink++) {
            myBodyLinks[nBodyLink].removeAttribute('class');
            myBodyLinks[nBodyLink].setAttribute('class','gridLinkEnabled'); 
            myBodyLinks[nBodyLink].setAttribute('title','Edit');
            addEvent_(myBodyLinks[nBodyLink], 'click', removeRow, false) ;
        }  
        
        //enable all input inside tbody and attach saveMatrixDataTab function
        var myBodyInputs = getBody().getElementsByTagName('input') ; 
        for (var nBodyInput =0;  myBodyInputs.length > nBodyInput; nBodyInput++) {
            myBodyInputs[nBodyInput].removeAttribute('disabled');
            myBodyInputs[nBodyInput].setAttribute('title','Edit');
            addEvent_(myBodyInputs[nBodyInput], 'change', saveMatrixDataTab, false) ;
        } 
        
        //enable all text area for criterias and attach saveMatrixDataTab event
        var myBodyInputs = getBody().getElementsByTagName('textarea') ; 
        for (var nBodyInput =0;  myBodyInputs.length > nBodyInput; nBodyInput++) {
            myBodyInputs[nBodyInput].removeAttribute('disabled');
            myBodyInputs[nBodyInput].setAttribute('title','Edit');
            addEvent_(myBodyInputs[nBodyInput], 'keyup', saveMatrixDataTab, false) ;
        }
        
        // Add recalculate event to every select
        var mySelects = document.getElementsByTagName('select') ;
        for (var nSelect=0; mySelects.length > nSelect; nSelect++) {
            mySelects[nSelect].removeAttribute('disabled');
            addEvent_(mySelects[nSelect], 'change', calcTotals, false) ;
        }
        //Enable title for matrix tab
        document.getElementById('gridTitle').removeAttribute('disabled');
        document.getElementById('gridTitle').title = 'Edit'

            
    } 
        function disableMatrix() {
        // All fields within td-s in the table body should clean up on change..
      
        if( getBody() == undefined) 
        return;
       //disable all input inside tbody
        var myCells = getBody().getElementsByTagName('td') ;
        // Loop through all cells, and find any input inside
        // Add event to any inputs found in td-s
        var myInput ;
        for (var nCell=0; myCells.length > nCell; nCell++) {
            myInput = myCells[nCell].getElementsByTagName('input')[0] ;
            if (myInput) {
              //  addEvent_(myInput, 'change', validateVal, false) ;
               
            }
        }
        
        // Add a click event to all anchors in the thead, calling removeColumn
        var myHeadLinks = document.getElementById('items').getElementsByTagName('a') ; 
        for (var nHeadLink=0;  myHeadLinks.length > nHeadLink; nHeadLink++) {
            myHeadLinks[nHeadLink].removeAttribute('class');
            myHeadLinks[nHeadLink].setAttribute('class','gridLink');
        }
        //Disable all header inputs
        var myHeadInputs = document.getElementById('items').getElementsByTagName('input') ; 
        for (var nHeadInput =0;  myHeadInputs.length > nHeadInput; nHeadInput++) {
            myHeadInputs[nHeadInput].setAttribute('disabled','disabled');
            myHeadInputs[nHeadInput].removeAttribute('title');
        }
        //Disable buttons
        var addCriteria = document.getElementById('addCriteria')  ; 
        addCriteria.removeAttribute('class');
        addCriteria.setAttribute('class','gridLink');
        //Disable buttons
        var addOption = document.getElementById('addOption') ; 
        addOption.removeAttribute('class');
        addOption.setAttribute('class','gridLink'); 
       // addEvent_(addOption, 'click', addColumn, false) ; 
        
        // Disable all remove links
        var myBodyLinks = getBody().getElementsByTagName('a') ;
        for (var nBodyLink=0; myBodyLinks.length > nBodyLink; nBodyLink++) {
            myBodyLinks[nBodyLink].removeAttribute('class');
            myBodyLinks[nBodyLink].setAttribute('class','gridLink');           
        }  
        
        //disable all tbody inputs
        var myBodyInputs = getBody().getElementsByTagName('input') ; 
        for (var nBodyInput =0;  myBodyInputs.length > nBodyInput; nBodyInput++) {
            myBodyInputs[nBodyInput].setAttribute('disabled','disabled');
            myBodyInputs[nBodyInput].removeAttribute('title');
        } 
        
        //disable all textareas inside tbody as criteria name
        var myBodyInputs = getBody().getElementsByTagName('textarea') ; 
        for (var nBodyInput =0;  myBodyInputs.length > nBodyInput; nBodyInput++) {
            myBodyInputs[nBodyInput].setAttribute('disabled','disabled');
            myBodyInputs[nBodyInput].removeAttribute('title');
            //addEvent_(myBodyInputs[nBodyInput], 'keyup', saveMatrixDataTab, false) ;
        }
        
        // diable all weight drop downs     
        var mySelects = document.getElementsByTagName('select') ;
        for (var nSelect=0; mySelects.length > nSelect; nSelect++) {
            mySelects[nSelect].setAttribute('disabled','disabled');
            mySelects[nSelect].removeAttribute('title');     
            
        }
        
        //disable title field 
        document.getElementById('gridTitle').setAttribute('disabled','disabled');
        document.getElementById('gridTitle').removeAttribute('title');
       // addEvent_(document.getElementById('gridTitle'), 'change', showPermaLink, false) ;
        
            
    }
//********************* End - Decision Matrix - to add / remove columns and rows *************************//
    
    function hidefade() {
        $('.bg-fade').css('display','none');
        $('body').css('overflow', 'auto');
    }
    
</apex:page>