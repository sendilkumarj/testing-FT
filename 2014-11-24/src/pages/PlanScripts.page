<apex:page contentType="text/javascript">
    
    var decisionId, decisionTitle,decisionTitleForCaseAndIssue;
    
    function createNewTaskOrIssues(e,decId,decTitle,decisionType,permission){
        
        if(decisionType != 'Decision'){
            return false;
        }else if(permission == 'false'){
            return false;
        }else{
            decisionId = '';
            decisionId = decId;
            decisionTitle = decTitle;
            decisionTitleForCaseAndIssue = decTitle; 

            mouseY = (e.clientY-100)+$(document).scrollTop();
            mouseX =  (e.clientX- 16);             
            $(".smart-menu").css({
            top: mouseY+'px',
            left: mouseX+'px' 
            }).fadeIn('slow');
        }
    }
    
    function setTextAreaSize(){
        document.getElementById('pg:newtaskForm:comments').style.height = '75px';
        document.getElementById('pg:newtaskForm:comments').style.width = '500px';
        
        document.getElementById('pg:popupforEvent:eventComment').style.height = '80px';
        document.getElementById('pg:popupforEvent:eventComment').style.width = '520px';
        
        document.getElementById('noteBody').style.height = '80px';
        document.getElementById('noteBody').style.width = '520px';
        
        document.getElementById('pg:editTaskForm:comments').style.height = '80px';
        document.getElementById('pg:editTaskForm:comments').style.width = '520px';
        
        $('#bodyWrap textarea').css('height','80px');
        $('#bodyWrap textarea').css('width','520px');
        return true;
    }
    
    
    // Edit Task and Event 
    
    function editTaskEvent(Id, isEditable, isTask,modeType) {
        if(modeType == 'EditMode'){
            if(convertStringToBoolean(isEditable)) {
                showLoader();
                if(isTask == 'Task') {
                    $('body').css('overflow','hidden')
                    editThisTask(Id,isEditable,modeType);
                }
                else {
                    editThisEvent(Id); 
                }
            }
        } else {
            showLoader();
            if(isTask == 'Task') {
                $('body').css('overflow','hidden')
                 editThisTask(Id,isEditable,modeType);
            }
            else {
                editThisEvent(Id);
            }
        }
    }
    
    //Batch update for Activities tab method
    function parseModifiedData(modifiedData,stringToBeSearched,decisionId){
        // Calling controller method to update task and event
        PlanView.updateActivitesTab(modifiedData, stringToBeSearched,decisionId, function(result, event)
        {    
            if (event.status)
            {  
                
               var newTaskEvent = removeQuotes(result.taskEvent);
               
               isTaskDelay  = false;
                if(newTaskEvent != null){
                    for(var i = 0;  newTaskEvent.length > i; i ++ ) {
                        if(newTaskEvent[i].delayTaskClass == 'delayTask' ) {
                            isTaskDelay = true;
                        }
                    }
                }
                if(isTaskDelay) {
                    $('#planTab li:nth-child(5) a').css('color','#ff0000');
                }
                else {
                    $('#planTab li:nth-child(5) a').css('color','#222');
                }
               
               var grid = $("#gridTaskEvent").data("kendoGrid");
               //getAllTaskEvent(newTaskEvent[0].url.substring(27, 42));
               grid.dataSource.data(newTaskEvent);
               grid.dataSource.page(1);
               viewModel.ds.data(
                    viewModel.ds.options.schema.parse(newTaskEvent || []) //just in case thenew data is null
                );
               $('.task-tab').html('('+newTaskEvent.length+')');
               chatterRefresh();
               
            }
        }, {escape:false});
    }  
    
    function getAllTaskEvent(planId) {
        //setTextAreaSize();
        PlanView.viewTaskEventTabWithSearch(planId, '' ,'', function(result, event)
        {
            if (event.status)
            {
                var newTaskEvent = removeQuotes(result.taskEvent);
                var grid = $("#gridTaskEvent").data("kendoGrid");
                grid.dataSource.data(newTaskEvent);
                viewModel.ds.data(
                    viewModel.ds.options.schema.parse(newTaskEvent || []) //just in case thenew data is null
                );
                $('.task-tab').html('('+newTaskEvent.length+')');
                isTaskDelay  = false;
                if(newTaskEvent != null){
                    for(var i = 0;  newTaskEvent.length > i; i ++ ) {
                        if(newTaskEvent[i].delayTaskClass == 'delayTask' ) {
                            isTaskDelay = true;
                        }
                    }
                }
                
                if(isTaskDelay) {
                    $('#planTab li:nth-child(5) a').css('color','#ff0000');
                }
                else {
                    $('#planTab li:nth-child(5) a').css('color','#222');
                }
            }
        }, {escape:true});
    }
    
    function getAllTaskRelation(planId) {
        var newTaskEvent ='';
        var newRelationshipJson = '';
        //setTextAreaSize();
        PlanView.viewTaskEventTabWithSearch(planId, '' ,'', function(result, event)
        {
            if (event.status)
            {    
                newTaskEvent = removeQuotes(result.taskEvent);
                var grid = $("#gridTaskEvent").data("kendoGrid");
                grid.dataSource.data(newTaskEvent);
                viewModel.ds.data(
                    viewModel.ds.options.schema.parse(newTaskEvent || []) //just in case thenew data is null
                );
                $('.task-tab').html('('+newTaskEvent.length+')');
                isTaskDelay  = false;
                if(newTaskEvent != null){
                    for(var i = 0;  newTaskEvent.length > i; i ++ ) {
                        if(newTaskEvent[i].delayTaskClass == 'delayTask' ) {
                            isTaskDelay = true;
                        }
                    }
                }
                if(isTaskDelay) {
                    $('#planTab li:nth-child(5) a').css('color','#ff0000');
                }
                else {
                    $('#planTab li:nth-child(5) a').css('color','#222');
                }
            }
            itemTabRefresh(planId);
        }, {escape:true});
     }
    
    function reDirectToQcd(planId){
        window.location = '/apex/DecisionQuickCreate?fromPlanId='+planId;
    }
 
    var cntrlIsPressed = false;
    $(document).keydown(function(event){
        if(event.which=="17")
            cntrlIsPressed = true;
    });
    
    $(document).keyup(function(event){
        if(event.which=="17")
            cntrlIsPressed = false;
    });
    
    function viewItemClicked(recordId, objectType, isEditable, isReadable) {
        //console.log('eventevent:'+event);
        if(!cntrlIsPressed){
            if(objectType == 'Task'){
                if(isReadable == 'true'){
                    showLoader();
                    editThisTask(recordId,isEditable,'ReadMode');
                } else {
                    alert('Insufficient Privileges. You do not have the level of access necessary to perform the operation you requested.');
                }
                return null;
            } else if(objectType == 'Note'){
                if(convertStringToBoolean(isEditable)) {
                    getNoteInfo(recordId);
                }
                else {
                    alert('Your role on this item does not permits you to create the note');
                }
                return null;
            }
        } else {
            if(objectType == 'Task' || objectType == 'Note'){
                window.open('/'+recordId, '_blank');
            }
        }
        cntrlIsPressed = false;
        //window.location = '/'+ recordId;
        //return false;
    }
    
    function removeChecks(){
        if(document.getElementById('people').disabled == false){
            document.getElementById('people').checked = false ;
        }
        if(document.getElementById('task').disabled == false){
            document.getElementById('task').checked = false ;
        }
        if(document.getElementById('attach').disabled == false){
            document.getElementById('attach').checked = false ;
        }
        if(document.getElementById('relations').disabled == false){
            document.getElementById('relations').checked = false ;
        }
        if(document.getElementById('relateClone').disabled == false){
            document.getElementById('relateClone').checked = false ;
        }
        document.getElementById('assignToMeDiv').style.display = 'none';
    } 
 
    function clearNoteValue(){
        document.getElementById('noteSubject').value = '';
        document.getElementById('noteBody').value = '';
    }
    
    
    function addNoteItem(planId,subject,body){
        if(subject == null || subject == ''){
            alert('Please enter the subject');
            return false;
        }
       hideModal();
       //setTextAreaSize();
       PlanView.addNoteItems(planId, subject,body, function(result, event)
       {
           if (event.status)
           {    
                var newItemViewOne = removeQuotes(result);
                $('.items-tab').html('('+ newItemViewOne.length +')'); 
                grid = $("#planItemViewOverview").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewMeeting").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewStatus").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewFinancials").data("kendoGrid");
                grid.dataSource.data(newItemViewOne);               
                grid = $("#planItemViewWork").data("kendoGrid");
                viewModelWork.ds.data(viewModelWork.ds.options.schema.parse(newItemViewOne || []));
                grid.dataSource.data(newItemViewOne);               
               document.getElementById('noteSubject').value = '';
               document.getElementById('noteBody').value = ''; 
              
               // update note records 
               attachmentTabRefresh(planId);  
           }
       }, {escape:true});
       
    }
    
    
    function showModal(header,body,footer){   
        $('.modal-plan-content').hide();
        $('.modal-footer').hide();
        $('.modal-plan-header').hide(); 
        createNewTaskOrIssues();
       
        decisionTitle = undefined;
        
       // $('#'+header).show();
        $('#'+body).show();
        $('#'+footer).show();
        $('body').css('overflow','hidden');
        $('.bg-fade').fadeIn('slow');
      
        
        setTimeout(function(){
          $('.modal-window').data("kendoWindow").title($('#'+header).html()).center().open().setOptions({width: 816}); 
          setTimeout(function(){  $('.modal-window').data("kendoWindow").center()  },10)
          document.getElementById('pg:newtaskForm:subjectForTask').focus();
        }, 500);
     }
     function showModalForAddingTask(header,body,footer,decisionId){   
            
        $('.modal-plan-content').hide();
        $('.modal-footer').hide(); 
        $('#'+body).show();
        $('#'+footer).show();
        $('body').css('overflow','hidden');
        $('.bg-fade').fadeIn('slow'); 
        var headerName =   $('#'+header);
        $('.modal-window').data("kendoWindow").title($(headerName).html()).center().open().setOptions({width: 816}); 
        setTimeout(function(){ $('.modal-window').data("kendoWindow").center()  },10)
        document.getElementById('hiddenDecisionId').innerHTML = decisionId;
     }
     function hideModal(){
        setTextAreaSize(); 
        $('.modal-window').data("kendoWindow").close();              
        $('.bg-fade').fadeOut('slow');
        $('body').css('overflow','auto');
        
     }
    
 
    // ***************** Displays delete task warning popup **** //
    
    function deleteTaskEventWarning(planId, taskEventId,isDeletable, type){
        if(isDeletable == 'true'){
            $('.modal-window-activitywarning').data("kendoWindow").title("Warning!").center().open().setOptions({width: 500}); 
            setTimeout(function(){  $('.modal-window-activitywarning').data("kendoWindow").center()  },10)
            $('.bg-fade').fadeIn('slow');
            $('body').css('overflow','hidden'); 
            document.getElementById('planIdOnActivities').value = '';
            document.getElementById('taskEventIdOnActivities').value = '';
            document.getElementById('isDeletableOnActivities').value = '';
            document.getElementById('typeOnActivities').value = '';
            document.getElementById('planIdOnActivities').value = planId;
            document.getElementById('taskEventIdOnActivities').value = taskEventId;
            document.getElementById('isDeletableOnActivities').value = isDeletable;
            document.getElementById('typeOnActivities').value = type;
        }
    }
    
    // Call delete function on click of ok button on Activities warning popup 
    function deleteActivity(){
        deleteTaskEvent(document.getElementById('planIdOnActivities').value,document.getElementById('taskEventIdOnActivities').value,document.getElementById('isDeletableOnActivities').value,document.getElementById('typeOnActivities').value);
    }  
    
    function cancelDeletePopup(){
        $('.modal-window-activitywarning').data("kendoWindow").close(); 
        $('.bg-fade').fadeOut('slow'); 
        $('body').css('overflow','auto');
    }    
    
     function setPosition(){            
        var w1 = $('#itemViewMeeting .k-grid-header tr th:nth-child(1)').outerWidth();
        var w2 = $('#itemViewMeeting .k-grid-header tr th:nth-child(2)').outerWidth();
        var w3 = $('#itemViewMeeting .k-grid-header tr th:nth-child(3)').outerWidth();
        var w4 = $('#itemViewMeeting .k-grid-header tr th:nth-child(4)').outerWidth();
        var w5 = $('#itemViewMeeting .k-grid-header tr th:nth-child(5)').outerWidth();
        wSum = w1+w2+w3+w4+w5+14;  
        wSum1 = w1+w2+w3+w4+w5;
      
        var bottom = $('#itemViewMeeting .k-grid-header tr th:nth-child(1)').outerWidth(true)
        bottom += $('#itemViewMeeting .k-grid-header tr th:nth-child(2)').outerWidth(true);
        bottom += $('#itemViewMeeting .k-grid-header tr th:nth-child(3)').outerWidth(true);
        
        var durationTotalWidth = $('#itemViewMeeting .k-grid-header tr th:nth-child(5)').outerWidth(true)
        durationTotalWidth += $('#itemViewMeeting .k-grid-header tr th:nth-child(6)').outerWidth(true)
        $('.duration-bottom').css('margin-left',(bottom)+'px');
        $('.sum-hold').css('width',(durationTotalWidth)+'px');
        $('#durLeft').css('width',wSum+'px');
        $('.duration-top').css('margin-left',(wSum)+'px');
        $('.duration-top').css('display','block');
        $('.duration-bottom').css('display','block');
     } 
     
     function setPositionStance(){            
        var w1 = $('#itemViewStatus .k-grid-header tr th:nth-child(1)').outerWidth(true);
        var w2 = $('#itemViewStatus .k-grid-header tr th:nth-child(2)').outerWidth(true);
        var w3 = $('#itemViewStatus .k-grid-header tr th:nth-child(3)').outerWidth(true);
        wSum = w1+w2+w3+11;   
        $('.stance-top').css('margin-left',wSum+'px');
        $('.stance-top').css('display','block');
     } 
    function setPositionWorkEstimation(){              
        var w1 = $('#itemViewWork .k-grid-header tr th:nth-child(1)').outerWidth(true);
        var w2 = $('#itemViewWork .k-grid-header tr th:nth-child(2)').outerWidth(true);
        var w3 = $('#itemViewWork .k-grid-header tr th:nth-child(3)').outerWidth(true);
        var w4 = $('#itemViewWork .k-grid-header tr th:nth-child(4)').outerWidth(true);
        wSum = w1+w2+w3+w4-20;   
        $('.hours-bottom').css('margin-left',wSum+'px');
        $('.hours-bottom').css('display','block'); 
     } 
    function parseItemModifiedData(planId,modifiedData) {
       
        
        PlanView.saveItemModifiedData(planId, modifiedData , function(result, event)
        { 
           if (event.status)
           {  
                var newItemViewOne = removeQuotes(result);   
                grid = $("#planItemViewOverview").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewMeeting").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewStatus").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewFinancials").data("kendoGrid");  
                grid.dataSource.data(newItemViewOne);               
                grid = $("#planItemViewWork").data("kendoGrid");
                viewModelWork.ds.data(viewModelWork.ds.options.schema.parse(newItemViewOne || []));
                grid.dataSource.data(newItemViewOne);
                renderTotalMins(planId);
                return newItemViewOne;
           }
           else {
                    alert('Something wrong with data please refresh the page');
               }$('.action-disable').css('display','none');
        }, {escape:false});
    }
    
    
     function  planItemOrderChanged(targetId, targetPosition, destId, destPosition){
       
        
        PlanView.planItemOrderChange(targetId, targetPosition, destId, destPosition , function(result, event)
        { 
           if (event.status)
           {  
                var newItemViewOne = removeQuotes(result);   
                grid = $("#planItemViewOverview").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewMeeting").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewStatus").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewFinancials").data("kendoGrid");
                grid.dataSource.data(newItemViewOne);               
                grid = $("#planItemViewWork").data("kendoGrid");
                viewModelWork.ds.data(viewModelWork.ds.options.schema.parse(newItemViewOne || []));
                grid.dataSource.data(newItemViewOne);
             
               return newItemViewOne;
           }
           else {
                    alert('Something wrong with data please refresh the page');
               }$('.action-disable').css('display','none');
        }, {escape:true});
    }
    // Onclick of edit, hides the view mode and displays the edit mode.
    function showEdit() {
        $('.view').css('display','none');
        $('.edit').css('display','block');
    }
    function showView() {
        $('.edit').css('display','none');
        $('.view').css('display','block');
        callKendoHistory();
    }
    $(window).resize(function() {
      setPosition();
      setPositionStance();
    }); 
    
    // Delete people/collabotator
    function deleteItemCollab(planId, socialInputId, isDeletable) {
        if(convertStringToBoolean(isDeletable)) {
            PlanView.viewPeopleTabWithSearch(planId, socialInputId , '', function(result, event) 
            {
                if (event.status)
                {
                    var newCollabrotorJson = removeQuotes(result);
                    var grid = $("#gridPeople").data("kendoGrid");
                    grid.dataSource.data(newCollabrotorJson );
                    $('.people-tab').html('('+newCollabrotorJson .length+')');
                }
            }, {escape:true}); 
            
        }
    }
    // function to update duration sum and work view estimated and actual hours
    function renderTotalMins(planId) {
        PlanView.calTotalMins(planId , function(result, event)
        {
           if (event.status)
           {  
              var sums =removeQuotes(result);
              // document.getElementById('durationSum').innerHTML = sums.totalHoursMints;
             //  document.getElementById('estimatedSum').innerHTML = sums.totalEstimatedHours;
              // document.getElementById('actualSum').innerHTML = sums.totalActualHours;
           }
        }, {escape:true});
    }
    
    // Delete relations/relationship
    function deleteRelationship(planId, relationshipId , isDeletable) {
        if(convertStringToBoolean(isDeletable)) {
            PlanView.viewAllRelationsTab(planId , relationshipId , function(result, event) 
            {
                if (event.status)
                {
                    var newRelationshipJson = removeQuotes(result);
                    var grid = $("#gridRelationship").data("kendoGrid");
                    grid.dataSource.data(newRelationshipJson );
                    $('.relation-tab').html('('+newRelationshipJson.length+')');
                }
            }, {escape:true});
        }
    }
    
    // Delete notes and attachments 
    function deleteNotesAttachment(planId, attachmentId,isDeletable, type) {
        if(convertStringToBoolean(isDeletable)) {
            PlanView.deleteNotesAttachments(planId, attachmentId, type, function(result, event) 
            {
                if (event.status)
                {
                    var newNotesAttachmentJson = removeQuotes(result);
                    kendoAttachmentNote(newNotesAttachmentJson);
                }
                
                // update note records 
                itemTabRefresh(planId);
                
            }, {escape:true});
        }
    }

    
    // Delete task and event 
    function deleteTaskEvent(planId, taskEventId,isDeletable, type) {
    //alert('here')
        if(convertStringToBoolean(isDeletable)){
           PlanView.viewTaskEventTabWithSearch(planId, taskEventId,'', function(result, event)
           {
               if (event.status)
               { 
                    var newTaskEvent = removeQuotes(result.taskEvent);
                    var grid = $("#gridTaskEvent").data("kendoGrid");
                    grid.dataSource.data(newTaskEvent);
                    viewModel.ds.data(
                        viewModel.ds.options.schema.parse(newTaskEvent || []) //just in case thenew data is null
                    );
                    $('.task-tab').html('('+newTaskEvent.length+')');
                    cancelDeletePopup();
                    isTaskDelay  = false;
                     if(newTaskEvent != null){
                    for(var i = 0;  newTaskEvent.length > i; i ++ ) {
                        if(newTaskEvent[i].delayTaskClass == 'delayTask' ) {
                            isTaskDelay = true;
                         }
                     }
                    }
                
                if(isTaskDelay) {
                    $('#planTab li:nth-child(5) a').css('color','#ff0000');
                }
                else {
                    $('#planTab li:nth-child(5) a').css('color','#222');
                }
               }
               
               // update note records 
               itemTabRefresh(planId);
               chatterRerender();
           }, {escape:true});
       }
    }
    
    // JS method for mass delete of task records
    
    function massdeleteActivity(planId){
        var searchTextActivity = $('#searchActivity').val();
        var selectedTaskStr = selectedTasks.toString();
        PlanView.massDeleteTaskRecords(selectedTaskStr,planId,searchTextActivity,function(result, event)
        {
            if (event.status)
            {
                var newTaskEvent = removeQuotes(result.taskEvent);                
                grid = $("#gridTaskEvent").data("kendoGrid");
                grid.dataSource.data(newTaskEvent);
                viewModel.ds.data(
                    viewModel.ds.options.schema.parse(newTaskEvent || []) //just in case thenew data is null
                );
                $('#enableMassDelete').addClass('btn-disabled');
                $('#enableMassDelete').attr('onclick','').unbind('click');
                $('#enableMassEdit').addClass('btn-disabled');
                $('#enableMassEdit').attr('onclick','').unbind('click');
                selectedTasks = new Array();
                cancelMassDeletePopup();
                $('.task-tab').html('('+newTaskEvent.length+')');
            }
        }, {escape:true});
    }
    
    
    function selectTaskFunc(taskId,isDelete,isSelect){
        var idx = selectedTasks.indexOf(taskId);
        if(idx == -1){
            selectedTasks.push(taskId);
            chkMassDeletePermission.push(isDelete);
        } else {
            chkMassDeletePermission.indexOf(isDelete);
            chkMassDeletePermission.splice(idx, 1);
            selectedTasks.splice(idx, 1); // Remove it if really found!
        }
        if(selectedTasks.length == 0){
            $('#enableMassDelete').addClass('btn-disabled');
            $('#enableMassDelete').attr('onclick','').unbind('click');
            $('#enableMassEdit').addClass('btn-disabled');
            $('#enableMassEdit').attr('onclick','').unbind('click');
        } else {
            $('#enableMassDelete').removeClass('btn-disabled');
            $("#enableMassDelete").click(function() {
                 openDeleteMassTask();
            });
            $('#enableMassEdit').removeClass('btn-disabled');
               $("#enableMassEdit").click(function() {
                   openEditMassTask();
           });
        }
    }
    
    function searchTaskEvent(planId,searchText){
        
        PlanView.viewTaskEventTabWithSearch(planId, '',searchText, function(result, event)
        {
            if (event.status)
            {
                var newTaskEvent = removeQuotes(result.taskEvent);                
                grid = $("#gridTaskEvent").data("kendoGrid");
                viewModel.ds.data(
                    viewModel.ds.options.schema.parse(newTaskEvent || []) //just in case thenew data is null
                );
                grid.dataSource.page(1);
                grid.dataSource.data(newTaskEvent );
                $('.task-tab').html('('+newTaskEvent.length+')');
            }
            
            // update note records 
            //itemTabRefresh(planId);
        }, {escape:true});
    }
    
 
    //  Clicked Tab update ///

    function tabSectionClicked(socialInputId, clickedtabId,inputEle) {
        window.location.hash='#'+inputEle+'_act';
        if(socialInputId != null) {
            if(socialInputId != '') {
                PlanView.tabSectionClicked(socialInputId, clickedtabId , function(result, event)
                {
                    if (event.status)
                    {
                        $('.'+clickedtabId).css('font-weight','normal');
                    }
                }, {escape:true});
            }
        }
    } 
    
    // Refreshing tables
    
    // Call History Tab
    function historyTabRefresh(planId) {
        PlanView.viewHistory(planId, function(result, event) 
        {
            if (event.status)
            {
                var newHistotry = removeQuotes(result);
                kendoHistory(newHistotry);
            }
        }, {escape:true});
    }
    
    
    
    
    
    // Call Attachment Tab
    function attachmentTabRefresh(planId) {
       /* PlanView.viewAttachmentNoteTab(planId, function(result, event) 
        {
            if (event.status)
            {
                var newAttachment = removeQuotes(result);
                kendoAttachmentNote(newAttachment);
            }
        }, {escape:true}); */
    }
    
    // Call Items Tab
    function itemTabRefresh(planId) {
         PlanView.itemView1(planId, function(result, event) 
         {
             if (event.status)
             {
                
                var newItemViewOne = removeQuotes(result);   
                grid = $("#planItemViewOverview").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewMeeting").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewStatus").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewFinancials").data("kendoGrid");
                grid.dataSource.data(newItemViewOne);               
                grid = $("#planItemViewWork").data("kendoGrid");
                viewModelWork.ds.data(viewModelWork.ds.options.schema.parse(newItemViewOne || []));
                grid.dataSource.data(newItemViewOne);
                $('.items-tab').html('('+newItemViewOne.length+')');
             }
         }, {escape:true});
     }
     
     function showRelationField(chkFld,enableFld){
        if(document.getElementById(chkFld).checked == true){
            document.getElementById(enableFld).style.display = 'block';
       }else{
            document.getElementById(enableFld).style.display = 'none';
       }
    }
   
    function windowRedirect(result){
        window.location = '/apex/PlanView?id='+result;
    }
   
    function hideInformationOnPeople(){
        $('.people-hover').css('display','none');
    }
    function showInformationOnItems(){
        $('.items-hover').css('display','block');
    }
    function hideInformationOnItems(){
        $('.items-hover').css('display','none');
    }
    function showInformationOnItemsCompare(){
        $('.items-hover1').css('display','block');
    }
    function hideInformationOnItemsCompare(){
        $('.items-hover1').css('display','none');
    }
    
    function getCloneChkBoxDetails(){
        itemNumber = $('.items-tab').html();
        itemNumber = parseInt(itemNumber.charAt(1));
        //attachNumber = $('#attachmentOnly').html();
        //attachNumber = parseInt(attachNumber.charAt(1));
        taskNumber = $('.task-tab').html();
        taskNumber = parseInt(taskNumber.charAt(1));
        relationNumber = $('.relation-tab').html();
        relationNumber = parseInt(relationNumber.charAt(1));
        itemNumber > 0 ? $('#items').prop('checked', true) : $('#items').attr("disabled", true);
        taskNumber > 0 ? $('#task').attr("disabled", false) : $('#task').attr("disabled", true);    
        //attachNumber > 0  ? $('#attach').attr("disabled", false) : $('#attach').attr("disabled", true);
        relationNumber > 0 ? $('#relations').attr("disabled", false) : $('#relations').attr("disabled", true);   
        $('#resetDate').prop('checked', true);
    }
    
    $(document).mouseup(function (e){
        var container = $(".smart-menu");
    
        if (container.has(e.target).length === 0)
        {
            container.hide();
        }
    });
    
    // ************ Javascript remote scripting ************ //  
        
    // get note information
    function getNoteInfo(noteId) {
        
        PlanView.getNoteInfo(noteId,  function(result, event) 
        {
            if (event.status)
            {
                var noteWrapper = removeQuotes(result);
                $('#noteHidden').val(noteId); 
                
                $('#bodyWrap textarea').val(htmlDecode(noteWrapper[0].body));
                $('#subjectWrap input').val(htmlDecode(noteWrapper[0].subject));
                $('.note-modified-date').html(noteWrapper[0].lastModifiedDate);
                $('.note-modified-name').html(noteWrapper[0].lastModifiedBy);
                $('.note-owner-date').html(noteWrapper[0].createdDate);
                $('.note-owner-name').html(noteWrapper[0].ownerName);
                
                showModal('editnote-header','editnote-body','plan-footer-editnote');
                
            }
        }, {escape:true}); 
            
       
    }
    // edit note 
    function editNote(planId) {
        var noteId = $('#noteHidden').val();
        var body = $('#bodyWrap textarea').val();
        var subject = $('#subjectWrap input').val();
        
        if(subject == '') {
            alert('Please enter the subject');
            return false;
        }
        
        PlanView.editNote(planId, noteId, body, subject,  function(result, event) 
        {
            if (event.status)
            {
                var newItemViewOne = removeQuotes(result);   
                grid = $("#planItemViewOverview").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewMeeting").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewStatus").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewFinancials").data("kendoGrid");
                grid.dataSource.data(newItemViewOne);               
                grid = $("#planItemViewWork").data("kendoGrid");
                viewModelWork.ds.data(viewModelWork.ds.options.schema.parse(newItemViewOne || []));
                grid.dataSource.data(newItemViewOne);
                attachmentTabRefresh(planId);
                hideModal();
                $('#noteHidden').val('');
                $('#bodyWrap textarea').val('');
                $('#subjectWrap input').val('');
                //itemViewUpdate();
            }
        }, {escape:true}); 
            
       
    }
    
    // convert string to boolean 
    function convertStringToBoolean(srcValue) {
        
        var destinationValue;
        if(srcValue == 'true') {
            destinationValue = true;
        }
        else if (srcValue == 'True') {
            destinationValue = true;
        }
        else if  (srcValue == true) {
            destinationValue = true;
        }
        else if  (srcValue == '1') {
            destinationValue = true;
        }
        else if  (srcValue == '0') {
            destinationValue = false;
        }
        else if(srcValue == 'false') {
            destinationValue = false;
        }
        else if (srcValue == 'False') {
            destinationValue = false;
        }
        else if  (srcValue == false) {
            destinationValue = false;
        }
        return destinationValue;
    } 
    
    
    // update event for plan
    function updateEventPlan() {
        var subject = document.getElementById('pg:popupforEvent:subject').value;
        if(subject == ''){
            alert('Please enter subject');
            return false;
        }
        var assignTo = document.getElementById('pg:popupforEvent:assignTo').value;
        if(assignTo == ''){
            alert('Please enter Assigned To');
            return false;
        }
        var startDateTime = document.getElementById('pg:popupforEvent:eventStartDateTime').value;
        if(startDateTime == ''){
            alert('Please enter Start Date Time');
            return false;
        }
        var endDateTime = document.getElementById('pg:popupforEvent:eventEndDateTime').value;
        if(endDateTime == ''){
            alert('Please enter End Date Time');
            return false;
        }
        updateEvent();
        hideModal();
        //setTextAreaSize();
    }
    
     //adding new task for decisions in items
    function saveNewTaskForDecision(){
       var subject = document.getElementById('pg:newtaskForm:subjectForTask').value;
       if(subject == ''){
           alert('Please enter subject');
           return false;
       }
       var assignTo = document.getElementById('pg:newtaskForm:assignTo').value;
       if(assignTo == ''){
           alert('Please enter Assigned To');
           return false;
       }
       var sendingNotification = document.getElementById('sendingNotification').checked;
       var decisionId = document.getElementById('pg:newtaskForm:whatId_lkid').value;
       saveThisTask(decisionId,sendingNotification);
       hideModal();
       //setTextAreaSize();
    }    
    
    function saveNewTaskForPlan(planId){
       var subject = document.getElementById('pg:newtaskForm:subjectForTask').value;
       if(subject == ''){
           alert('Please enter subject');
           return false;
       }
       var assignTo = document.getElementById('pg:newtaskForm:assignTo').value;
       if(assignTo == ''){
           alert('Please enter Assigned To');
           return false;
       }
       var sendingNotification = document.getElementById('sendingNotification').checked;
       //var decisionId = document.getElementById('hiddenDecisionId').innerHTML;
       var planId = document.getElementById('pg:newtaskForm:whatId_lkid').value;
       saveThisTask(planId,sendingNotification);
       hideModal();
       //setTextAreaSize();
    }    
    
     function saveNewTaskForPlanAsRelation(){
       var subject = document.getElementById('pg:newtaskForm:subjectForTask').value;
       if(subject == ''){
           alert('Please enter subject');
           return false;
       }
       var assignTo = document.getElementById('pg:newtaskForm:assignTo').value;
       if(assignTo == ''){
           alert('Please enter Assigned To');
           return false;
       }
       var sendingNotification = document.getElementById('sendingNotification').checked;
       var decisionId = document.getElementById('pg:newtaskForm:whatId_lkid').value;
       saveThisTaskAsRelation(decisionId,sendingNotification);
       hideModal();
       //setTextAreaSize();
     }    
     
     //adding new task for decisions in items
     function saveNewIssuesForDecision() {
        
     }
     
     // validations on save
     function validateSavePlan(){
         if(document.getElementById('pg:editMode:planName').value == ''){
             alert('Subject is mandatory');
             return false;
         }
         var descLength = document.getElementById('pg:editMode:planDesc').value;
         if(descLength.length > 255){
            alert('Plan description cannot be more than 255 chars');
            return false;
         }
         save();
         
     }
     
     // replace Plan Item order
     
     function planItemOrderChange(itemSrcId, itemPos,itemDesId, itemDesPos ) {
        PlanView.planItemOrderChange(itemSrcId, itemPos,itemDesId, itemDesPos,  function(result, event) 
        {
            if (event.status)
            {
                var newItemViewOne = removeQuotes(result);   
                grid = $("#planItemViewOverview").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewMeeting").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewStatus").data("kendoGrid");
                grid.dataSource.data(newItemViewOne );
                grid = $("#planItemViewFinancials").data("kendoGrid");
                grid.dataSource.data(newItemViewOne);               
                grid = $("#planItemViewWork").data("kendoGrid");
                viewModelWork.ds.data(viewModelWork.ds.options.schema.parse(newItemViewOne || []));
                grid.dataSource.data(newItemViewOne);
            }
            else {
                alert('The data is not stored into database. Please refresh the page');
            }
        }, {escape:true}); 
     }
     
     // ***************** Gruop Member Popup  ********************//
    function groupMemberPopup(groupId,groupName, isGroup) {
    
        if(convertStringToBoolean(isGroup)) {
            PlanView.retrieveGroupMember(groupId, function(result,event)
            {
                if (event.status)
                {
                    
                    showModal('groupmember-header','groupmember-body','plan-footer-groupmember');
                    $('.group-name').html(groupName);
                    var newGroupMember = removeQuotes(result);
                    kendoGroupMember(newGroupMember);
                        
                }
            }, {escape:true});
        }
    }
    // New Task popup to call component for Plan decision Items 
    function newTaskForDecision(){
        showLoader();
        newTaskPopupComponent(decisionId);
    }
    // New Task popup to call component for Activites tab
    function newTaskPopupComp(){
        showLoader();
        newTaskPopupComponent('');
    }
    // New Task popup to call component for Plan Items 
    function newTaskPopupCompForItem(){
        showLoader();
        newTaskPopupComponent('Items');
    }
    
    function updateValidateTask() {
        var subject = document.getElementById('pg:editTaskForm:subjectForTask').value;
        var sendingNotification = document.getElementById('sendingNotificationTask').checked;
         
       if(subject == ''){
           alert('Please enter subject');
           return false;
       }
       var assignTo = document.getElementById('pg:editTaskForm:assignTo').value;
       if(assignTo == ''){ 
           alert('Please enter Assigned To');
           return false;
       }
      
       updateTask(sendingNotification );
       //setTextAreaSize();
    }
     
    function openNotePopup(){
        showModal('note-header','note-body','plan-footer-note');
        setTimeout(function(){
          document.getElementById('noteSubject').focus();
        }, 500);
    }
    
     function removeAllValues(){
        document.getElementById('pg:newtaskForm:subjectForTask').value = '';
        document.getElementById('pg:newtaskForm:assignTo').value = '';
        document.getElementById('pg:newtaskForm:dueDate').value = '';
        document.getElementById('pg:newtaskForm:priority').value = 'Normal';
        document.getElementById('pg:newtaskForm:comments').value = '';
        document.getElementById('sendingNotification').checked = false;
        //setTextAreaSize();
     }
     
       
     function removeAllIssueValues(){
    
     }
     
     function count(txt){
        if(txt.value.length > 255)
            return false;
            return true;
     }
      
     // Add Relation Popup
    function showModalRelation(){          
     // ---------------- implemented to have kendo popup ---------
        $('.modal-window-relation').data("kendoWindow").title("Add Relation").open().center().setOptions({width: 1088});; 
        setTimeout(function(){  $('.modal-window-relation').data("kendoWindow").center()  },10)
        $('body').css('overflow','hidden'); 
        $('.bg-fade').fadeIn('slow');       
               
    }
    function hideRelationModal(){     
        $('#relation-body :input').val('');
        $('.modal-window-relation').data("kendoWindow").close();     
        $('.bg-fade').fadeOut('slow');
        $('body').css('overflow','auto');
        setTextAreaSize();
    }
    
    // Adding existing relation //
    
    function existingRelations() {
        showLoader();
        existingRelationsAddToSet();
    }
    
    // Adding Selected Plan Records from Add to Plan Button
    function refreshRelationship(planId){
        PlanView.viewAllRelationsTab(planId,'', function(result,event) 
        {
        if (event.status)
            {
                var newRelation = removeQuotes(result);
                var grid = $("#gridRelationship").data("kendoGrid");
                grid.dataSource.data(newRelation );
                $('.relation-tab').html('('+newRelation .length+')');
            }
        }, {escape:true});  
    }
    
    // Remote function call for search feature in people tab
    function searchPeople(planId, searchPhrase){
        PlanView.viewPeopleTabWithSearch(planId , '',searchPhrase, function(result, event)
        {
            if (event.status)
            {
                var newPeople = removeQuotes(result);
                var grid = $("#gridPeople").data("kendoGrid");
                grid.dataSource.data(newPeople);
            }
        }, {escape:true});
    }
    
    function hidefade() {
        $('.bg-fade').css('display','none');
        $('body').css('overflow', 'auto');
    }
     function dragModalRelation(){
            $(".modal-window-massEditing").draggable( {containment: "document", cursor:"move", handle: ".modal-activitywarning-head", cancel: ".modal-close", scroll: false} );
            $(".modal-window-massDelete").draggable( {containment: "document", cursor:"move", handle: ".modal-activitywarning-head", cancel: ".modal-close", scroll: false} );
            $(".modal-window-relation").draggable( {containment: "document", cursor:"move", handle: ".modal-relation-head", cancel: ".modal-close", scroll: false} );
         }
         
         // ----------------- Added for Mass task edit popup ------------- sendil - 10-07-2014
        
    function cancelMassEditPopup(){
        $('.modal-window-massEditing').data("kendoWindow").close(); 
        $('.bg-fade').fadeOut('slow'); 
        $('body').css('overflow','auto');
    }
    function openEditMassTask(){
         dropDownColor();
         document.getElementById('pg:taskFormId:updateDueDate').value='';
         document.getElementById('pg:taskFormId:assignTo').value=''; 
         $('.modal-window-massEditing').data("kendoWindow").title("Edit Tasks").center().open().setOptions({width: 500}); 
         setTimeout(function(){ $('.modal-window-massEditing').data("kendoWindow").center()  },10)
         $('.bg-fade').fadeIn('slow');
         $('body').css('overflow','hidden');
    }
    function editMassTask(planId){
        var assignedTo = document.getElementById('pg:taskFormId:assignTo_lkid').value;
        var assignedToName = document.getElementById('pg:taskFormId:assignTo').value;
        if(assignedTo == '' || assignedTo == '000000000000000'){
            if(assignedToName != ''){   
                alert('Please select user from lookup.');
                return false;
            }
        }
        var updateDueDate = document.getElementById('pg:taskFormId:updateDueDate').value;
        var updateStatus = document.getElementById('updateStatus').value;
        var updatePriority = document.getElementById('updatePriority').value;
        var selectedTaskStr = selectedTasks.toString();
        var searchTextActivity = $('#searchActivity').val();
        PlanView.massEditTaskRecords(selectedTaskStr,planId,searchTextActivity,assignedTo,updateDueDate,updateStatus,updatePriority, function(result, event)
        {
            if (event.status)  
            {
                var newTaskEvent = removeQuotes(result.taskEvent);                
                grid = $("#gridTaskEvent").data("kendoGrid");
                viewModel.ds.data(
                    viewModel.ds.options.schema.parse(newTaskEvent || []) //just in case thenew data is null
                );
                grid.dataSource.data(newTaskEvent);
                document.getElementById('pg:taskFormId:assignTo_lkid').value = '';
                document.getElementById('pg:taskFormId:assignTo').value = '';
                document.getElementById('pg:taskFormId:updateDueDate').value = '';
                document.getElementById('updateStatus').value = '--None--';
                document.getElementById('updatePriority').value = '--None--';
                selectedTasks = new Array();
                $('#enableMassDelete').addClass('btn-disabled');
                $('#enableMassDelete').attr('onclick','').unbind('click');
                $('#enableMassEdit').addClass('btn-disabled');
                $('#enableMassEdit').attr('onclick','').unbind('click');
                chatterRerender();
                cancelMassEditPopup();
                isTaskDelay  = false;
                if(newTaskEvent != null){
                    for(var i = 0;  newTaskEvent.length > i; i ++ ) {
                        if(newTaskEvent[i].delayTaskClass == 'delayTask' ) {
                            isTaskDelay = true;
                        }
                    }
                }
                
                if(isTaskDelay) {
                    $('#activityTab a').css('color','#ff0000 !important');
                }
                else {
                    $('#activityTab a').css('color','#222');
                }
            }
        }, {escape:true});
    }
    
    function dropDownColor(){
        if(document.getElementById('updateStatus').value == '--None--'){
            $('#updateStatus').css('color','grey');
        } else {
            $('#updateStatus').css('color','black');
        }
        if(document.getElementById('updatePriority').value == '--None--'){
            $('#updatePriority').css('color','grey');
        } else {
            $('#updatePriority').css('color','black');
        }
    }
    
     function cancelMassDeletePopup(){
        $('.modal-window-massDelete').data("kendoWindow").close();
        $('.bg-fade').fadeOut('slow'); 
        $('body').css('overflow','auto');
    }
    function openDeleteMassTask(){
        var idx = chkMassDeletePermission.indexOf('false');
        if(idx == -1){
            $('.modal-window-massDelete').data("kendoWindow").title("Warning!").center().open().setOptions({width: 500});; 
            setTimeout(function(){ $('.modal-window-massDelete').data("kendoWindow").center()  },10)
            $('.bg-fade').fadeIn('slow');
            $('body').css('overflow','hidden');
            return null;
        } else {
            //alert('You do not have delete permission on all the records you selected.');
            openPermissionAlertTask()
            return null;  
        }
        
    }
        function cancelPermissionAlertPopup(){ 
        $('.modal-window-noPermission').data("kendoWindow").close();
        $('.bg-fade').fadeOut('slow'); 
        $('body').css('overflow','auto');
    }
      function openPermissionAlertTask(){   
            $('.modal-window-noPermission').data("kendoWindow").title("Warning!").center().open().setOptions({width: 500});; 
            setTimeout(function(){ $('.modal-window-noPermission').data("kendoWindow").center()  },10)
            $('.bg-fade').fadeIn('slow');
            $('body').css('overflow','hidden');  
    }
    
    // ----------------- Ends Added for Mass task edit popup ------------- sendil - 10-07-2014   
    // ----------------- Added for Mass task edit popup ------------- sendil - 10-07-2014
             
               
               
     // ----------------- Added for Mass task edit popup ------------- sendil - 10-07-2014 
</apex:page>