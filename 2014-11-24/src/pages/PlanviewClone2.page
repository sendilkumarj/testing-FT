<apex:page docType="html-5.0" id="pg" standardController="Plan__c" extensions="PlanView" title="Fingertip">
   
    <c:CommonLibraries userLocaleSidKey="{!userLocaleSidKey}" /> 
 
<html>
    
       <meta http-equiv="Content-Script-Type" content="text/javascript" />
        <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
        <!--------- FT Stylesheets ----------->
        <apex:stylesheet value="{!$Page.CommonStyles}" />
        <apex:stylesheet value="{!$Page.PlanStyles}" />
        <apex:stylesheet value="{!$Page.OverrideStyles}" />
        
        <!--------- jQueryUI -----------> 
        <!--<apex:stylesheet value="{!URLFOR($Resource.JqueryUITabs, '/tabs/plan-jquery-ui.css')}"/>-->
        <apex:includeScript value="{!URLFOR($Resource.JqueryUITabs10, '/tabs/jquery-ui-1.10.3.js')}"/>  
        
          
        <!--------- FT Scripts ----------->
        <apex:includeScript value="{!$Page.PlanScripts}" />
            <div id="planItemViewOverview"></div>
            <script>
                                    $(document).ready(function () {
                                         kendoItemViewOverview($.parseJSON('{!JSENCODE(allItemJson)}'));
                                    });
                                    
                                    
                                    var  statusValueDecoded = $('<div/>').html('{!HTMLENCODE(taskStatusPicklist)}').text();
        var statusValue  = JSON.parse( '['+statusValueDecoded+']')
        
          // Kendo table overview enabled with autoSync attribute for auto save functionality almost same as old view 1
          function  kendoItemViewOverview (gridData) {
            var draggableItem = {!JSENCODE(peopleEditPermission)} == true ?  "tbody > tr:not(.k-grid-edit-row) td:nth-child(2) ,tbody > tr:not(.k-grid-edit-row) td:nth-child(1)" :  "tbody >tr > tr";
             
            // assign number of records on tab
            if(gridData != null)
                $('.items-tab').html('('+gridData.length+')');
            
            //$('#durTotal').css('display','none');
            var data1 = gridData;
            
            function SortByValue1(x,y) {
                                  return x.Position- y.Position; 
                           }
            if(data1 != null){
               data1.sort(SortByValue1);
            }
            
            $.ajaxSetup({ cache: false }); 
            
            // new way or style
            var dataSource = new kendo.data.DataSource({
                autoSync: true, 
                
                   
                transport: {  
                    read: function(e) {  
                        dataSource.sync();
                        e.success(data1);
                    },
                    
                    update: function(e) {  
                        var t = JSON.stringify(e);
                        var modifiedDataForKendo = parsingModifieData(t);
                        e.success();
                    }
                 },
                 batch : true,
                 schema: {
                    model: {
                        id: "Id",
                        fields: {
                            Id: { type: "string", editable: false },
                            Name: { type: "string" , editable: true},
                            isDeletable: { type: "boolean" , editable: false},
                            actionClassName : { type: "string"},
                            actionClassNameDecision : { type: "string"},
                            Type: {type:"string", editable:true},
                            Position: { type: "number"  },
                            Minutes: { type: "number" ,validation: { max: 59, min : 0 } },
                            Hours: { type: "number" ,validation: { max: 23, min : 0 } },
                            Days : { type: "number" ,validation: { max: 999, min : 0 } },
                            Owner: { type: "string", editable: false },
                            OwnerId: { type: "string", editable: false },
                            canUserCreateTask: {type: "string", editable : false},
                            description: { type: "string", editable: true,
                                validation: { 
                                    maxlength:
                                        function(input) { 
                                            if (input.val().length > 255) {
                                               input.attr("data-maxlength-msg", "Max length is 255");
                                               return false;
                                            }                                   
                                            return true;
                                        }
                                } 
                          }
                        }
                    }
                }
            });
            
            var isEdit = false;
            var peopleEditPermissionClass =  '{!if( peopleEditPermission == 'true','grid-drag','grid-drag-disabled' )}';
            var dragfilter =  '{!if( peopleEditPermission == 'true','>tbody >tr ','>tbody >tr > tr' )}';
             gridOverview = $("#planItemViewOverview").kendoGrid({
                
                dataSource: dataSource, 
                
                 navigatable: true,
               
                editable: true,
                 toolbar:  ["save","cancel"],resizable: true,  /* ---------------- commented this code to remove duration column and its contents ---- sendil --- 08-07-2014 */
                                       
                columns: [
                
                    {   // ======== added div with class=grid-drag for drag icon =========== //
                        field: "",
                        title: "",   
                        template: "<span class='handler'> Â </span>",
                        width: 24,
                        sortable: false
                    },
                    
                    {   // ======== added div with class=grid-drag for drag icon =========== //
                        field: "Id",
                        editable:false,
                        title: "Action",   
                        template: "<div class='editButtonGroupDiv'><div class='grid-action' id='Delete'><img class='#:actionClassName#' onclick=\"deleteItemViewOne('#:Id#','#:isDeletable#')\" src=/#:delItem# title='Delete'></div> <div class='grid-action'><img src=/#:newTaskFromDecision# class='#:decisionClass#' onclick=\"createNewTaskOrIssues(event,'#:itemRecordId#','#:Name#','#:Type#','#:canUserCreateTask#')\" title='#:newTaskFromDecisionIconTitle#'></div></div>",
                        width: 70,
                        sortable: false
                    },
                    {
                        field: "Progress",
                        title: "Progress",
                        template: "<div style='position:relative'><div id='PIholder#:itemRecordId#'></div></div><div style='background-position:0px  #:  -15*progressValue#px;display: #: (Type== \'Decision\' ? \'block\': \'none\' ) #' id='indicator#:itemRecordId#' class='indicatorPlan' onmouseover=\'showIndicator(event,\"#:itemRecordId#\")\'; onmouseout=\'hideIndicator(\"#:itemRecordId#\")\'; onclick=\'openIndicator(event,\"#:itemRecordId#\",\"#:itemRecordId#\",\"#:piPermission#\"    )\';> </div>",
                        width: 80,
                        sortable: false  
                    }                   
                                      
                    ,{
                        field: "Type",
                        title: "Item Type",
                        width: 80,
                        template: "#:Type#"
                    }
                    ,
                    {
                        field: "Owner",
                        title: "Accountable/<br />Owner",
                        template: "#:Owner#"
                    },
                    {
                        field: "description",
                        title: "Description",
                        editable:true,
                        template: '<div class = "item-editable"  title="Edit">#=description#</div>'
                    }],
                    columnResize: function(e) {
                     setPosition();setPositionStance();setPositionWorkEstimation();
                  }
            }).data("kendoGrid");
               //define kendo sortable
               //define kendo sortable
               gridOverview.table.kendoSortable({
                       filter: ">tbody >tr",
                       handler:".handler",
                       hint: $.noop,     // define the drag hint
                       cursor: "move",
                       end:function(){ document.body.style.cursor='default'; },
                       placeholder: function(element) {
                            var holder= element.clone().css('background-color','#C4C4C4').css("opacity", 1).css('outline','2px solid #A2A2A2');   //  set outline for dragged row and opacity
                            holder.find('td:nth-child(1)').find('span').css('background-color','green');//  set grren color for handler
                            return holder;
                        },
                       container: "#planItemViewOverview tbody",
                       
                        change: function(e) {  
                               try{
                                var source; 
                                var dest;  
                                //get source and destination items and extract id and position then send to controller
                                if(e.oldIndex > e.newIndex ){
                                 source=     gridOverview.dataSource.at(e.oldIndex-1)  ; 
                                 dest   =     gridOverview.dataSource.at( e.newIndex -1)   ; 
                                }
                                else{
                                 source=     gridOverview.dataSource.at(e.oldIndex)  ; 
                                 dest   =     gridOverview.dataSource.at( e.newIndex )   ; 
                                } 
                                planItemOrderChanged(source.Id, source.Position, dest.Id, dest.Position);
                               }catch(err){} 
                          }
                    });


            /*  var grid = $("#planItemView1").data("kendoGrid");
            var row = grid.thead.find("tr:eq(0)");
              $(row).find('th:nth-child(1)').attr('colspan','2'); 

            var row = grid.thead;             
               $(row).first().prepend("<tr><th></th><th></th><th></th><th></th><th class='duration' colspan='3'>Duration</th><th></th><th></th></tr>");  */
              
               
 
            
            if(!convertStringToBoolean('{!JSENCODE(peopleEditPermission)}')) {
                $('#itemView1 .k-toolbar').html('');
                $('#itemView1 .k-grid-content .item-editable').removeAttr('title');
                $('#itemView1 .k-grid-content .item-editable').css('cursor','default');
            }
            
            $(".new-item-decision").click(function(e) {
                
                //decisionTitle = '';
                mouseY = e.pageY - 100;
                mouseX = e.pageX - 16;
                $(".smart-menu").css({
                top: mouseY,
                left: mouseX 
                }).fadeIn('slow');
                
            }); 
        }
        
         function parsingModifieData(t){
            parseItemModifiedData('{!JSENCODE(plan.Id)}',t);
           // renderTotalMins('{!JSENCODE(plan.Id)}');
        }  
         // remove quotes from json string 
        function removeQuotes(mystring) {
            newString = mystring.replace(/&(lt|gt|quot);/g, function (m, p) { 
                
                return (p == "lt") ? "<" : ((p == "gt") ? ">" : "\"");
            });
            var newJ= $.parseJSON(newString);
            return newJ;
        }
            </script>
        
         
</html>
</apex:page>