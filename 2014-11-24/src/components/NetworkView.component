<apex:component >
 <!-- Begin Default Content REMOVE THIS -->

 <apex:stylesheet value="{!$Page.cardStyles}" />
<script type='text/javascript' src="{!URLFOR($Resource.networkjs,'/js/d3.v2.min.js')}" > </script>
<script type='text/javascript' src="{!URLFOR($Resource.networkjs,'/js/dragdealer.js')}" > </script>
<script type='text/javascript' src="{!URLFOR($Resource.networkjs,'/js/dragdealer_old.js')}" > </script>
<script type='text/javascript' src="{!URLFOR($Resource.networkjs,'/js/jquery.Jcrop.min.js')}" > </script>
<script type='text/javascript' src="{!URLFOR($Resource.networkjs,'/js/jquery.rdfquery.core.min-1.0.js')}" > </script>
<script type='text/javascript' src="{!URLFOR($Resource.networkjs,'/js/vex.min.js')}" > </script>
<script type='text/javascript' src="{!$Resource.jsnetwork}" > </script>


 
<div id="network" style="background-color:#fff"></div>
    
   <style>
   
   </style>
      
     
   
         
     


 

<script>
var usePerson = null;           //the person in person mode
  var decisionIconUrl  = '{!URLFOR($Resource.Images, '/network/icon_decision_32x32.png')}';
  var planIconUrl      = '{!URLFOR($Resource.Images, '/network/icon_plan_32x32.png')}';
  function loadIframe(){
    var recordId= getParameterByName('id')
    loadNodes(id)
  }
  function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
 }
 function loadNodes(recordIdforNetwork){
            NetworkView.buildNetwork( recordIdforNetwork,'Decision',function(result,event){
                                      console.log(result)
                                    var netNodes = JSON.parse(result).nodeMap;
                                    nodeNameMap =  JSON.parse(result).nodeNameMap;
                                    nodeDetailsMap =  JSON.parse(result).nodeDetailsMap;
                                 
                                    var newNodes = {};
                                    
                                    for( anode  in  netNodes ){
                                       newNodes[anode] = {};
                                       newNodes[anode]['knows']  = netNodes[anode];
                                    
                                    }
                                    
                                    
                                     nodes=[];
                                     links=[]; 
                                     if(force != undefined){
                                         force.nodes([]);
                                         force.links([]);;
                                         force = null
                                     }
                                     vis = null;
                                     d3.select("svg").remove();
                                     buildNetwork(newNodes);
                                    
                                    },{ escape: false })
 }
   // remove quate from json string 
                            function removeQuotes(mystring) {
                                    
                                newString = mystring.replace(/&(lt|gt|quot);/g, function (m, p) { 
                                    return (p == "lt") ? "<" : ((p == "gt") ? ">" : "\"");
                                });
                                
                                //var newJ= $.parseJSON(newString);
                                var  newJ = eval ("(" + newString+ ")");
                                return newJ;
                            }     
      
 function buildNetwork(dataNet) {

    

    // Bind to StateChange Event
    History.Adapter.bind(window,'statechange',function(){ // Note: We are using statechange instead of popstate
        var State = History.getState(); // Note: We are using History.getState() instead of event.state
        parseStateChangeVis();
    });



    if(!document.createElementNS || !document.createElementNS('http://www.w3.org/2000/svg','svg').createSVGRect){
        jQuery("#network").html(
            'Sorry, this visualization uses the <a href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG standard</a>, most modern browsers support SVG.<br>If you would like to see this visualization please view this page in another browser such as <a href="https://www.google.com/chrome">Chrome</a>, <a href="http://www.mozilla.org/en-US/firefox/new/">Firefox</a>, <a href="http://www.apple.com/safari/download/">Safari</a>, or <a href="http://windows.microsoft.com/en-US/internet-explorer/downloads/ie">Internet Explorer 9+</a>'       
        );   
        return false;
    }


    /* Binds */

    $(window).resize(function() { windowResize();});
    jQuery("#popUp").mouseenter(function(){clearTimeout(hidePopupTimer)});
    jQuery("#popUp").mouseleave(function(){hidePopup()});
    
    

    jQuery("#menu_fixed").mouseenter(function(){$(this).css("opacity",1);}).mouseleave(function(){$(this).css("opacity",0.15);}).click(function(){changeVisMode("wave");});
    jQuery("#menu_similar").mouseenter(function(){$(this).css("opacity",1);}).mouseleave(function(){$(this).css("opacity",0.15);}).click(function(){changeVisMode("clique");});
    jQuery("#menu_free").mouseenter(function(){$(this).css("opacity",1);}).mouseleave(function(){$(this).css("opacity",0.15);}).click(function(){changeVisMode("free");});      
    jQuery("#menu_dynamic").mouseenter(function(){$(this).css("opacity",1);}).mouseleave(function(){$(this).css("opacity",0.15);}).click(function(){changeVisMode("dynamic");});        
    
    
    $("#dynamicSearchInput").keyup(function(){dynamicFilterList();});
    $("#dynamicSearchClear").click(function(){$("#dynamicSearchInput").val(''); dynamicFilterList();});
    $("#dynamicClear").click(function(){dynamicPeople=[]; filter();});
    
    
    
    
    $("#network").fadeOut();
    
    windowResize();
 
    showSpinner("Loading<br>Triples"); 
    
    
    
    
    initalizeNetwork();
    
    
    //give the UI some breathing room, a chance to render
    setTimeout(function(){  
    
        //grab the names of the artists
         
            buildNameStore('');
         


        //grab the descripons of the artists
           
            buildDescriptionStore('');
         
        
     
         
            console.log(typeof dataNet);
            console.log(JSON.stringify(dataNet));
           buildTripleStore(dataNet);   
            
           dataAnalysis();  


           //we need the description data ready because it has the names in it
           var interval = window.setInterval(function checkDescriptionStore(){
                if (window.descObject){
                    window.clearTimeout(interval);
                    buildBase();

                    parseStateChangeVis();




                }
           },500);
           
    

           
         
        
     }, 200, []);
     
     
    //add the zoom widget
    jQuery("#network").append(
        jQuery("<div>")
            .attr("id","zoomWidget")
            .addClass("dragdealer")
            .append(
                jQuery("<div>") 
                    .addClass("handle")
                    .append(
                        jQuery("<div>") 
                            .text("-")
                    )
            )
            .append(
                jQuery("<div>")
                    .addClass("zoomWidgetRail")
            )
            .append(
                jQuery("<div>") 
                    .addClass("zoomWidgetEndcaps")
                    .attr("id","woomWidgetZoomOut")
                    .css("top","-17px")
                    .append(
                        jQuery("<div>") 
                            .text("-")
                    )
            )                       
            .append(
                jQuery("<div>") 
                    .addClass("zoomWidgetEndcaps")
                    .attr("id","woomWidgetZoomIn")
                    .css("top","145px")
                    .append(
                        jQuery("<div>") 
                            .text("+")
                    )
            )                                   
        
    );  
    
    jQuery("#zoomWidget").mouseenter(function(){console.log('whhyyy'); zoomWidgetObjDoZoom=true;});

    
    zoomWidgetObj = new Dragdealer('zoomWidget',
    {
        horizontal: false,
        vertical: true,
        y: 0.255555555,
        animationCallback: function(x, y)
        {
            //if the value is the same as the intial value exit, to prevent a zoom even being called onload
            if (y==0.255555555){return false;}
            //prevent too muuch zooooom
            if (y<0.05){return false;}           
            
            
            //are we  zooming based on a call from interaction with the slider, or is this callback being triggerd by the mouse event updating the slider position.
            if (zoomWidgetObjDoZoom == true){

                y =y *4;            
                
                //this is how it works now until i figure out how to handle this better.
                //translate to the middle of the vis and apply the zoom level
                vis.attr("transform", "translate(" + [(visWidth/2)-(visWidth*y/2),(visHeight/2)-(visHeight*y/2)] + ")"  + " scale(" + y+ ")");      
                //store the new data into the zoom object so it is ready for mouse events
                zoom.translate([(visWidth/2)-(visWidth*y/2),(visHeight/2)-(visHeight*y/2)]).scale(y);
            }
            
         
             
        }
    });  
    
       d3.select('svg').on('click',function(){ 
                        
                         $('#popupDecisionCard').css('display','none');
                         $('#popupPlanCard').css('display','none');
                   
         })
 
 

}


$(document).ready(function(){ delete Array.prototype.remove; })
</script>

<!-- End Default Content REMOVE THIS -->
<div id="networkcontainer" >
                    <div id="popupDecisionCard" class="cards" style="display:none">
                        <div class="viewCardContainer"> 
                            <div class="viewCardTop"> </div> 
                            <div class="viewCardIcon">&nbsp;</div>
                            <div class="viewDropBtn" id="dropBtnDecision" onclick="showBottonDecision('Decision')"></div>
                            <div class="viewCardText fontWeightBold"><a href="" id="namelinkDecision"></a></div>
                            <div class="vewDateBtns viewTopborder">
                                <div class="dueDateDiv">
                                    <div class="cardTitleText fontWeightBold commonCardPadding">Due Date</div> 
                                    <div class="fontCardContentText fontWeightBold secondLineTextPadding" id="duedate" style=""></div> 
                                </div>
                                <div class="viewStatusDiv"> 
                                    <div class="cardTitleText fontWeightBold commonCardPadding">Status</div> 
                                    <div class="fontCardContentText  secondLineTextPadding fontWeightBold" id="status"></div>
                                </div>
                                <div class="statusColorDiv statusColorDivCurve" id="colorDivCurve" style=""></div>
                                <div class="statusColorDiv" id="colorDiv" style="display:none;"></div> 
                            </div>
                            <div class="viewCardBottom viewTopborder" id="cardBottomDecision" style="display:none"> 
                                <div>
                                    <div class="phaseDiv ">
                                        <div class="cardTitleText fontWeightBold commonCardPadding">Phase</div> 
                                        <div class="fontCardContentText secondLineTextPadding fontWeightBold" id="phase"></div> 
                                    </div>
                                    <div class="mystanceDiv">
                                        <div class="cardTitleText fontWeightBold commonCardPadding commonCardPadding">My Stance</div>
                                        <div class="fontCardContentText commonCardPadding secondLineTextPadding fontWeightBold" id="mystance"></div>
                                    </div>
                                    <div class="mystanceColorDiv"  id="mystanceColorDiv" style=""></div> 
                                </div>
                                <div class="cardMyRole cardCellTopLine toClear bottomMargin">
                                    <div class="cardTitleText fontWeightBold myRoleTitle commonCardPadding">My Role</div>
                                    <div class="rolesIconGroup actionsDirect commonCardPadding">
                                        <div class="raci-block floatLeft" id="a-block" style="background-color:#d9d9d9">A</div>
                                        <div class="raci-block floatLeft" id="r-block" style="background-color:#d9d9d9">R</div>
                                        <div class="raci-block floatLeft" id="c-block" style="background-color:#d9d9d9">C</div>
                                        <div class="raci-block floatLeft" id="i-block" style="background-color:#d9d9d9">I</div>
                                        <div class="floatLeft splitLine">&nbsp;</div>
                                        <div class="raci-block floatLeft" id="b-block" style="background-color:#d9d9d9">B</div>
                                        <div class="raci-block floatLeft" id="v-block" style="background-color:#d9d9d9">V</div>
                                    </div>
                                </div>
                                <div class="decisionByDiv cardCellTopLine commonCardPadding">
                                    <div class="cardTitleText fontWeightBold ">Decision By</div>
                                    <div class="toClear">
                                        <div class="decisionCardProfilePic viewCardTopBottomMargin toClear floatLeft"><img src="" style="width:36px;height:36px;" title="" id="requestphoto"></img></div>
                                        <div class="floatLeft viewCardProfileNameWidth">
                                            <div class="fontCardContentText fontWeightBold viewCardTopBottomMargin viewCardLeftMargin" id="decisionby"></div>
                                            <div class="fontCardContentText fontWeightBold viewCardTopBottomMargin viewCardLeftMargin" id="decisionbyDept"></div>
                                        </div>
                                    </div>
                                    <div class="toClear"></div>
                                </div>
                                <div class="qualityDiv cardCellTopLine toClear commonCardPadding">
                                    <div class="cardTitleText fontWeightBold ">Tasks</div> 
                                    <div class="fontCardContentText viewCardTopBottomMargin fontWeightBold" >
                                        <div style="color:red;font-weight:bold;font-size:10px;" id="taskcount"></div>
                                    </div> 
                                </div>
                                <div class="averageDiv cardCellTopLine commonCardPadding bottomMargin">
                                    <div class="cardTitleText fontWeightBold">Average Relevance</div>
                                    <div class="floatLeft viewCardTopBottomMargin " id="yourAveStars"><div class="viewAvgstar"><img src="" id="averagerelevance"></img></div></div>
                                    <div class="floatLeft viewCardTopBottomMargin viewAveRat"><span style="font-family: Arial,Helvetica,sans-serif;color:#cf3f67" id="rating"></span> </div>
                                </div>
                                <div class="viewSocialGroupDiv   toClear floatLeft cardCellTopLine">   
                                    <div class="floatLeft socialDiv ">
                                        <div class="floatLeft topMargin"> 
                                            <div class="viewSocialLike floatLeft " id="likeSpan"><div></div></div>
                                            <div class="fontCardContentText  floatLeft likeDislikeCounts" id="totallikes">0</div>
                                            <div class="viewSocialDislike floatLeft" id="disLikeSpan"><div></div></div>
                                            <div class="fontCardContentText  floatLeft likeDislikeCounts" id="totaldislikes">0</div>
                                        </div>
                                    </div>
                                    <div class="viewSocialMoodDiv floatLeft">
                                        <div  id="moodimage" class="viewSmiely floatLeft" style="">&nbsp;</div>
                                        <div  id="moodnumber" class="fontCardContentText  viewSmielyRating fontWeightBold floatLeft"></div> 
                                    </div>
                                </div>
                                <div class="toClear"> </div>
                            </div>
                            <div class="toClear"> </div>
                        </div>                                                          
                    </div>
                    <div id="popupPlanCard" class="cards"  style="display:none">
                        <div class="viewCardContainer">
                            <div class="planCardTop"></div>
                            <div class="planCardIcon">&nbsp;</div>
                            <div class="viewDropBtn" id="dropBtnPlan" onclick="showBottonDecision('Plan')"></div>
                            <div class="viewCardText fontWeightBold"><a href="" id="namelinkPlan"></a></div>
                            <div class="vewDateBtns viewTopborder">
                                <div class="dueDateDiv">
                                    <div class="cardTitleText fontWeightBold commonCardPadding">Start Date</div>
                                    <div class="fontCardContentText secondLineTextPadding fontWeightBold"  id="planstart" style=""></div>
                                </div>
                                <div class="viewStatusDiv">
                                    <div class="cardTitleText fontWeightBold commonCardPadding">End Date</div>
                                    <div class="fontCardContentText secondLineTextPadding fontWeightBold" id="planend" style=""></div>
                                </div>
                            </div>
                            <div class="viewCardBottom viewTopborder" id="cardBottomPlan" style="display:none">
                                <div class="decisionByDiv">
                                    <div class="phaseDiv" style="border:none">
                                        <div class="cardTitleText fontWeightBold commonCardPadding">Modified Date</div>
                                        <div class="fontCardContentText secondLineTextPadding fontWeightBold" id="planlastmodified"></div>
                                    </div>
                                    <div class="mystanceDiv planLocationDiv">
                                        <div class="cardTitleText fontWeightBold commonCardPadding">Location</div>
                                        <div class="fontCardContentText secondLineTextPadding fontWeightBold" id="location"></div>
                                    </div>
                                </div>
                                <div class="cardCellTopLine toClear">
                                    <div class="phaseDiv">
                                        <div class="cardTitleText fontWeightBold commonCardPadding">Items</div>
                                        <div class="fontCardContentText secondLineTextPadding fontWeightBold" id="itemcount">0</div>
                                    </div>
                                    <div class="mystanceDiv">
                                        <div class="cardTitleText fontWeightBold commonCardPadding">Activities</div>
                                        <div class="fontCardContentText secondLineTextPadding fontWeightBold" ><span id="activities">0/0</span><span style="color:red" id="latetasks" ></span></div>
                                        
                                    </div>
                                </div>
                                <div class="decisionByDiv cardCellTopLine toClear">
                                    <div class="cardTitleText fontWeightBold commonCardPadding">Description</div>
                                    <div class="planDescriptionStatement fontWeightBold">
                                        <div id="description"></div>
                                    </div>
                                    <div class="toClear"></div>
                                </div>
                                <div class="decisionByDiv cardCellTopLine commonCardPadding">
                                    <div class="cardTitleText fontWeightBold">Accountable</div>
                                    <div class="toClear">
                                        <div class="decisionCardProfilePic viewCardTopBottomMargin toClear floatLeft"><img src="" style="width:36px;height:36px;" id="accountablephoto" title=""></img></div>
                                        <div class="floatLeft viewCardProfileNameWidth">
                                            <div class="fontCardContentText fontWeightBold viewCardTopBottomMargin viewCardLeftMargin" id="accountablename"></div>
                                            <div class="fontCardContentText fontWeightBold viewCardTopBottomMargin viewCardLeftMargin" id="accountableDept"></div>
                                        </div>
                                    </div>
                                    <div class="toClear"></div>
                                </div>
                                <div class="toClear"></div>
                            </div>
                            <div class="toClear"></div>
                        </div>
                    </div>      
                </div>  
                <script>
                    // function to expand or collapse cards
                    function showBottonDecision(item){
                                   
                          if(document.getElementById("cardBottom"+item).style.display=="none"){
                                                document.getElementById("cardBottom"+item).style.display="block";
                                                document.getElementById("dropBtn"+item).style.backgroundPosition="-64px 0px";
                                                
                                                if( ( item=='Decision') && document.getElementById("colorDivCurve")!=null){
                                                    document.getElementById("colorDiv").style.display="block";
                                                    document.getElementById("colorDivCurve").style.display="none";
                                                }
                                                
                                        }else{
                                            document.getElementById("cardBottom"+item).style.display="none";
                                            document.getElementById("dropBtn"+item).style.backgroundPosition="-64px -8px"; 
                                            if( ( item=='Decision') && document.getElementById("colorDiv")!=null){
                                                    document.getElementById("colorDiv").style.display="none";
                                                    document.getElementById("colorDivCurve").style.display="block";
                                                }
                                        }
                                       
                
                                    } 
                </script>
 </apex:component>