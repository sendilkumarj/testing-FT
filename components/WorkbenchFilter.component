<apex:component controller="WorkbenchHomePage" >
  
<div class = "workbench-filter">
    <p class = "filter-help" id = "filterHelp">Select the criteria and press Go to see the decisions a person is working on</p>
    <p class = "filter-help" id = "topicFilterHelp" style="display:none;">Select the criteria to search the suitable Decisions or Plan for the related Topics</p>
    <div class = "filter-option ft-left">
        <div class = "filter-text">Type</div>
        <select id="objectType" onchange="changedObject(this.value)">  
            <option value="Decision">Decision</option>
            <option value="Plan">Plan</option>
            <option value="Task">Task</option>
            <option value="Topic">Topic</option>
        </select>
    </div>
    <div id="decisionDropDowns">  
        <div class = "filter-option ft-left">
            <div class = "filter-text">Timeframe</div>
            <select id="timeFrame">
              <option value="1 Week">1 Week</option>
              <option value="2 Weeks">2 Weeks</option>
              <option value="3 Weeks">3 Weeks</option>
              <option value="4 Weeks">4 Weeks</option>  
            <!-- <option value="1 Month">1 Month</option>  -->
              <option value="2 Months">2 Months</option>
              <option value="3 Months">3 Months</option>
              <option value="4 Months">4 Months</option>
              <option value="All">All</option>
            </select>
        </div>
        <div class = "filter-option ft-left">
            <div class = "filter-text">Name</div>
            <input type="text" class = "qcd-input" id="demo-input-pre-populated-with-tokenlimit" name="acc" required="True" />
        </div>   
        <div class = "filter-option ft-left">
            <div class = "filter-text">Role</div>
            <select id="roleOfUser">
                <option selected="selected" value="All">All</option>
                <option value="Accountable">Accountable</option>
                <option value="Responsible">Responsible</option>
                <option value="Consulted">Consulted</option>
                <option value="Informed">Informed</option>
            </select>
        </div>   
        <div class = "filter-option ft-left"> 
            <div class = "filter-text">Phases</div>
            <select id="decisionPhases" onchange="disableSelect('decisionStatus','decisionPhases');">
                    <option value="All">All</option>
                    <option value="Draft">Draft</option>
                    <option value="Share">Share</option>
                    <option value="Propose">Propose</option>
                    <option value="Decide">Decide</option>
                    <option value="Execute">Execute</option>
                    <option value="Evaluate">Evaluate</option>
                    <option value="Close">Close</option>
            </select>
        </div>    
        <div class = "filter-option ft-left">
            <div class = "filter-text">Status</div>
            <select id="decisionStatus" onchange="disableSelect('decisionPhases','decisionStatus');">
                    <option value="All">All</option>
                    <option value="Undecided">Undecided</option>
                    <option value="Approved">Approved</option>
                    <option value="Rejected">Rejected</option>
                    <option value="Executed">Executed</option>
                    <option value="Evaluated">Evaluated</option>
                    <option value="Closed">Closed</option>
                    <option value="Withdrawn">Withdrawn</option>
                    <option value="Cancelled">Cancelled</option>
            </select>
        </div>
        <div class = "filter-option filter-btn ft-left">            
            <button type="button" style="width:75px;height:25px;" class="topMarginforButton" onclick="getElementalData();" >Go</button>
            <button type="button" style="width:75px;height:25px;" class="topMarginforButton" onclick="setDefaultData();">Clear</button>
        </div>    
    </div>
    <style>
        #taskDropDowns{
			display:none;
		}
		.UserFilterDiv{
			width:100px;
			margin-left:20px;
			float:left;
		}
		.taskGoClearBtn{
			width:215px;
			margin-left:165px;
			float:left;
			margin-top:15px;    
		}
		.newTaskBtnDiv{
			font-weight:bold;
			float:left;
		}
		.createNewTaskBtn{
			float:left;
			width:250px;
			margin-top:15px;
		}
		.cardsExpansion{
			float:left;
			width:225px;
			margin-top:5px;
		}
		.demo-section {
			width: 181px;
			min-height:25px;
		}
		.demo-section select {
			width: 350px;
		}
		.demo-section label {
			display: inline-block;
			margin: 15px 0 5px 0;
		}
		.k-multiselect-wrap .k-input{
			background-color: transparent;
			height: 0.31em;
			line-height: 1.31em;
			padding: .18em 0;
			text-indent: .33em;
			border: 0;
			margin: 1px 0 0;
			float: left;
		}
		.timeFrame-text{
			margin-left:35px;
			margin-bottom:5px;
		}
    </style>
    <!--    Topic filter section starts -->
    <div id="TopicDropDowns" style="display:none">
        <apex:outputPanel id="TopicFilters">
            <div id="StrategyMapFilters">
            	<div class = "topicFilter-option floatLeft ">
                    <div class = "timeFrame-text">Timeframe</div>
                    <div class="floatLeft">
                        <span >From</span>
                        <input id="datepickerFrom" onchange="getStrategyData();" />
                    </div>
                    <div class="date-to toClear">
                        <span >To</span>
                        <input id="datepickerTo" style="width:150px;" onchange="getStrategyData();"/>
                    </div>
                </div>
                <div class = "topicFilter-option floatLeft">
                     <div class = "filter-text">Show only</div>
                     <div class="showOnly demo-section">  
                         <select id="StrategyMapType" multiple="multiple" data-placeholder="Select Type..." onchange="disableStatus();hidePhaseAndStatus(this.value);getStrategyData();" >  
                            <option value="Decision" selected="selected">Decision</option>
                            <option value="Plan" selected="selected">Plan</option>
                         </select>
                     </div>
                </div>
                <div class = "topicFilter-option floatLeft">
                    <div class = "filter-text">Name</div>
                    <input type="text" class = "qcd-input" id="demo-input-pre-populated-with-tokenlimit-strategymap" name="acc" required="True" onchange="getStrategyData();"/>
                    <div style="color: red;display:none;" id="userErr">Please select the user.</div>
                </div>
                <div class = "topicFilter-option floatLeft" id="roleSelection">
                    <div class = "filter-text">Role</div>
                    <div class="demo-section">
                        <select id="StrategyMaproleOfUser" multiple="multiple" data-placeholder="Select roles..." onchange="getStrategyData();">
                            <option value="Responsible" selected="selected">Responsible</option>
                            <option value="Consulted" selected="selected">Consulted</option>
                             <option value="Accountable" selected="selected">Accountable</option>
                            <option value="Informed" selected="selected">Informed</option>
                        </select>
                    </div>
                </div>   
                <div class = "topicFilter-option floatLeft" id="topicPhase"> 
                    <div class = "filter-text">Phases</div>
                    <div class="demo-section">
                        <select id="StrategyMapdecisionPhases" multiple="multiple" data-placeholder="Select Phases..." onchange="disableStatus();getStrategyData();">
                            <option value="Draft" selected="selected">Draft</option>
                            <option value="Execute" selected="selected">Execute</option>
                            <option value="Share" selected="selected">Share</option>
                            <option value="Propose" selected="selected">Propose</option>
                            <option value="Decide" selected="selected">Decide</option>
                            <option value="Evaluate" selected="selected">Evaluate</option>
                        </select>
                    </div>
                </div>    
                <div class = "topicFilter-option floatLeft" id="topicStatus">
                    <div class = "filter-text">Status</div>
                    <div class="demo-section">
                        <select id="StrategyMapdecisionStatus" multiple="multiple" data-placeholder="Select Status..." onchange="getStrategyData();">
                            <option value="Undecided" selected="selected">Undecided</option>
                            <option value="Approved" selected="selected">Approved</option>
                            <option value="Rejected" selected="selected">Rejected</option>
                            <option value="Executed" selected="selected">Executed</option>
                            <option value="Evaluated" selected="selected">Evaluated</option>
                        </select>
                    </div>
                </div> 
            </div>
        </apex:outputPanel>
    </div>
    <!--    Topic filter section ends -->
    <div id="taskDropDowns" style="display:none">
        <apex:outputPanel id="taskFilterPanel">
            <div style="float:left;">
                <span class="fontWeightBold">Due date within</span> <br/>
                <select Id="duedateId">
                        <option value="Overdue">Overdue</option>
                        <option value="48hours" >48 hours</option>
                        <option value="1Week" selected = "selected">1 Week</option>
                        <option value="1Month">1 Month</option>
                        <option value="All">All</option>
                 </select>
            </div>
            <div class="UserFilterDiv">
                <span class="fontWeightBold">User Filter</span><br/> 
                <select Id="assignedId">
                        <option value="AssignedTo" selected = "selected">Assigned To</option>
                        <option value="AssignedBy" >Assigned By</option>
                </select>
            </div>
            <div class="UserFilterDiv">
                <span class="fontWeightBold">Name of User</span><br/>
                <input type="text" class = "qcd-input" id="demo-input-pre-populated-with-tokenlimit-task" name="taskUser" required="True" />
            </div>
            <div class="taskGoClearBtn">
                <button type="button" style="width:75px;height:25px;" onclick="searchRecordsWithLoader();">Go</button>
                <button type="button" style="width:75px;height:25px;" onclick="defaultRecordsOnTaskWithLoader();">Clear</button>
            </div>
            <div class="newTaskBtnDiv">
                <div class="createNewTaskBtn">
                    <button type="button" style="width:110px;height:25px;" onclick="showModal('task-header','task-body','plan-footer-taskrelation')">New Task</button>
                    <input type="checkbox" id="cardExpandChk" onclick="expandAllCards()" />&nbsp;<span style="padding-bottom:2px">Cards Expanded</span>&nbsp;
                </div>
            </div>
        </apex:outputPanel>
    </div>  
</div> 
<apex:form >
    <apex:actionFunction name="defaultRecordsOnTask" action="{!dummyMethod}" reRender="filterPanelComponent" oncomplete="setTaskFilter();hideLoader();" />
    <apex:actionFunction name="setDefaultData" action="{!dummyMethod}" reRender="filterPanelComponent" oncomplete="setMyData();" />
<!--    <apex:actionFunction name="clearTopicFilters" action="{!dummyMethod}" reRender="filterPanelComponent" oncomplete="setMyDefaultData();showTopicFilters();" />-->
</apex:form>

<script>
    
    var userId = 'default';
    var chkUserId = 'yes';
    var taskuserId = 'default';
    var chkTaskUserId = 'yes';
    var strategyMapId = 'default';
    var strategyMapUserId = 'yes';
    $(document).ready(function() { 
        var StrategyMaproleOfUser = $("#StrategyMaproleOfUser").kendoMultiSelect().data("kendoMultiSelect");
        var StrategyMapdecisionPhases = $("#StrategyMapdecisionPhases").kendoMultiSelect().data("kendoMultiSelect");
        var StrategyMapdecisionStatus = $("#StrategyMapdecisionStatus").kendoMultiSelect().data("kendoMultiSelect");
        var StrategyMapType = $("#StrategyMapType").kendoMultiSelect().data("kendoMultiSelect");
        $("#StrategyMaproleOfUser_taglist").css('height','auto');
         var actualDate = new Date();
         var date =  new Date(actualDate.getFullYear() - 1, actualDate.getMonth(), actualDate.getDate());
        var format  = $('<div/>').html('{!HTMLENCODE(dateFormat)}').text();
        $("#datepickerFrom").kendoDatePicker({
             format: format, 
            value: date,
        });
        $("#datepickerTo").kendoDatePicker({
            format: format, 
            value: actualDate
        }); 
        $("#demo-input-pre-populated-with-tokenlimit").tokenInput(  $.parseJSON('{!JSENCODE(userDataJSON)}') , {
            prePopulate: 
               $.parseJSON('{!JSENCODE(defaultUserJson)}') 
            ,onAdd: function (item) {
               //alert(item.id); 
               chkUserId = 'yes';
               userId = item.id;
               //storeIdAcc(item.id);
            },
            onDelete: function (item) {
                chkUserId = 'no';
                //delIdAcc(item.id);
            },
            tokenLimit: 1,
            propertyToSearch: "name",
            resultsFormatter: function(item){ 
                return "<li>" + "<img src='" + item.url + "' title='" + item.name+ "' height='25px' width='25px' />" + "<div style='display: inline-block; padding-left: 10px;'>" + item.name+ "</div>" 
           },
        });
        
        $("#demo-input-pre-populated-with-tokenlimit-task").tokenInput(  $.parseJSON('{!JSENCODE(userDataJSON)}') , {
            prePopulate: 
               $.parseJSON('{!JSENCODE(defaultUserJson)}') 
            ,onAdd: function (item) {
               //alert(item.id); 
               chkTaskUserId = 'yes';
               taskuserId = item.id;
               //storeIdAcc(item.id);
            },
            onDelete: function (item) {
                chkTaskUserId = 'no';
                //delIdAcc(item.id);
            },
            tokenLimit: 1,
            propertyToSearch: "name",
            resultsFormatter: function(item){ 
                return "<li>" + "<img src='" + item.url + "' title='" + item.name+ "' height='25px' width='25px' />" + "<div style='display: inline-block; padding-left: 10px;'>" + item.name+ "</div>" 
           },
        });
        
        $("#demo-input-pre-populated-with-tokenlimit-strategymap").tokenInput(  $.parseJSON('{!JSENCODE(userDataJSON)}') , {
            prePopulate: 
               $.parseJSON('{!JSENCODE(defaultUserJson)}') 
            ,onAdd: function (item) {
               //alert(item.id); 
               strategyMapUserId = 'yes';
               strategyMapId = item.id;
               //storeIdAcc(item.id);
            },
            onDelete: function (item) {
                strategyMapUserId = 'no';
                //delIdAcc(item.id);
            },
            tokenLimit: 1,
            propertyToSearch: "name",
            resultsFormatter: function(item){ 
                return "<li>" + "<img src='" + item.url + "' title='" + item.name+ "' height='25px' width='25px' />" + "<div style='display: inline-block; padding-left: 10px;'>" + item.name+ "</div>" 
           },
        });
        
        $('.demo-section').each(function(index,p){  
           $(p).find( 'input' ).css('display','none') ; 
           $(p).find('div').css('min-height','25px') ;
           $(p).find( 'input' ).next().css('display','none') ;
          })
    });
    
    function setMyData(){
        $('#decisionDropDowns').css('display','block');
        getDefaultData();
    }
    
    function setMyDefaultData(){
        document.getElementById('objectType').value = 'Topic';
        $('#filterHelp').css('display','none');
        $('#StrategyMapFilters').css('display','block');
        getStrategyData();
    }
    
    function defaultRecordsOnTaskWithLoader(){
        showLoader();
        defaultRecordsOnTask();
    }
    
    function searchRecordsWithLoader(){
        searchRecordsFromGo();
    }
    
    function setDefaultFilterData(){
        showLoader();
        clearTopicFilters(false);
    }
    
    function changedObject(objType){
        if(objType == 'Decision'){
            $('#decisionDropDowns').css('display','block');
            $('#decisionWorkbench').css('display','block');
            $('#planWorkbench').css('display','none');
            $('#taskWorkbench').css('display','none');
            $('#topicWorkBench').css('display','none');
            $('#filterHelp').css('display','block');
            $('#topicFilterHelp').css('display','none');
            $('#taskDropDowns').css('display','none');
            $('#StrategyMapFilters').css('display','none');
            document.getElementById('objectType').value = 'Decision';
        } else if(objType == 'Plan'){
            $('#decisionDropDowns').css('display','none');
            $('#planWorkbench').css('display','block');
            $('#decisionWorkbench').css('display','none');
            $('#taskWorkbench').css('display','none');
            $('#filterHelp').css('display','none');
            $('#topicWorkBench').css('display','none');
            $('#topicFilterHelp').css('display','none');
            $('#taskDropDowns').css('display','none');
            $('#StrategyMapFilters').css('display','none');
            document.getElementById('objectType').value = 'Plan';
        } else if(objType == 'Task'){
            $('#decisionDropDowns').css('display','none');
            $('#planWorkbench').css('display','none');
            $('#decisionWorkbench').css('display','none');
            $('#taskWorkbench').css('display','block');
            $('#filterHelp').css('display','none');
            $('#topicFilterHelp').css('display','none');
            $('#topicWorkBench').css('display','none');
            $('#taskDropDowns').css('display','block');
            $('#StrategyMapFilters').css('display','none');
            document.getElementById('objectType').value = 'Task';
        } else if(objType == 'Topic'){
            // Loads the script when Topic value is selected from the dropdown.
            $('#decisionDropDowns').css('display','none');
            $('#planWorkbench').css('display','none');
            $('#decisionWorkbench').css('display','none');
            $('#taskWorkbench').css('display','none');
            $('#filterHelp').css('display','none');
            $('#taskDropDowns').css('display','none');
            $('#topicWorkBench').css('display','block');
            $('#topicFilterHelp').css('display','block');
            $('#filterHelp').css('display','none');
            $('#StrategyMapFilters').css('display','block');
            $('#datepickerFrom').css('display','block');
            $('#datepickerTo').css('display','block');
            $('#TopicDropDowns').css('display','block');
            if(!topicloaded){
                showLoader();
                showTopic();
                //hideLoader();
            }
        }
    }
    
    function showTopicFilters(){
        $('#TopicDropDowns').css('display','block');
    }
    
    function hidePhaseAndStatus(val){
        if(val == 'Plan'){
           var StrategyMapdecisionPhases = $("#StrategyMapdecisionPhases").data("kendoMultiSelect");
           StrategyMapdecisionPhases.enable(false);
           var StrategyMapdecisionStatus = $("#StrategyMapdecisionStatus").data("kendoMultiSelect");
           StrategyMapdecisionStatus.enable(false);
         } else {
           var StrategyMapdecisionPhases = $("#StrategyMapdecisionPhases").data("kendoMultiSelect");
              StrategyMapdecisionPhases.enable(true);
              var phasesSelected = ''+$('#StrategyMapdecisionPhases').val();
           if(phasesSelected == 'Draft,Execute,Share,Propose,Decide,Evaluate'){
                var StrategyMapdecisionStatus = $("#StrategyMapdecisionStatus").data("kendoMultiSelect");
                StrategyMapdecisionStatus.enable(true);
           } else {
                var StrategyMapdecisionStatus = $("#StrategyMapdecisionStatus").data("kendoMultiSelect");
                StrategyMapdecisionStatus.enable(false);
           }
        }
    }
    
    function disableStatus(){
        var phasesSelected = ''+$('#StrategyMapdecisionPhases').val();
        if(phasesSelected == 'Draft,Execute,Share,Propose,Decide,Evaluate'){
            var StrategyMapdecisionStatus = $("#StrategyMapdecisionStatus").data("kendoMultiSelect");
            StrategyMapdecisionStatus.enable(true);
        } else {
            var StrategyMapdecisionStatus = $("#StrategyMapdecisionStatus").data("kendoMultiSelect");
            StrategyMapdecisionStatus.enable(false);
        }
    }
    
    function setTaskFilter(){
        $('#decisionDropDowns').css('display','none');
        $('#filterHelp').css('display','none');
        $('#taskDropDowns').css('display','block');
        document.getElementById('objectType').value = 'Task';
        document.getElementById('cardExpandChk').checked=false;
        defaultRecords();
    }
    
    function disableSelect(selectA,chckB){
        if($('#'+chckB).val() != 'All'){
            $('#'+selectA).attr('disabled','true');
        }else{
            document.getElementById(selectA).disabled = false;
        }
    }
    
    function getElementalData(){
        
        if(chkUserId == 'yes'){
            var timeFrame = $('#timeFrame').val();
            var roleOfUser = $('#roleOfUser').val();
            var phases = $('#decisionPhases').val();
            var status = $('#decisionStatus').val();
            getMyDecisions(timeFrame,roleOfUser,phases,status,userId);
        }else{
            alert('please select user');
        }
    }
    
    // Getting tipocs on change of any filter value on topic filter
    function getStrategyData(){
        if(strategyMapUserId == 'yes'){
            $('#userErr').css('display','none');
            var datepickerFrom = $('#datepickerFrom').attr("aria-label");
            var datepickerTo = $('#datepickerTo').attr("aria-label");
            
            var roleOfUser = '';
            if($('#StrategyMaproleOfUser').val() != null){  
                roleOfUser = ''+$('#StrategyMaproleOfUser').val();
            } else {
                alert('Please select a role');
                return false;
            }
            var phases = '';
            if($('#StrategyMapdecisionPhases').val() != null){
                phases = ''+$('#StrategyMapdecisionPhases').val();
            } else {
                alert('Please select a phase');
                return false;
            }
            var status = '';
            if($('#StrategyMapdecisionStatus').val() != null){
                status = ''+$('#StrategyMapdecisionStatus').val();
            } else {
                alert('Please select a status');
                return false;
            }
            var type = '';
            if($('#StrategyMapType').val() != null){
                type = ''+$('#StrategyMapType').val();
            } else {
                alert('Please select a type');
                return false;
            }
            showLoader();
            getstrategyMap(datepickerFrom,datepickerTo,roleOfUser,phases,status,strategyMapId,type);
            $('#filterHelp').css('display','none');
            $('#StrategyMapFilters').css('display','block');
            return true;
        } else {
            $('#userErr').css('display','block');
        }
    }
    
    function getDefaultData(){ 
        
        var objectTypeDefault = document.getElementById('objectType').options[0].value;
        var timeFrame = document.getElementById('timeFrame').options[0].value;
        var roleOfUser = document.getElementById('roleOfUser').options[0].value;
        document.getElementById('objectType').value = document.getElementById('objectType').options[0].value;
        document.getElementById('timeFrame').value = document.getElementById('timeFrame').options[0].value;
        document.getElementById('roleOfUser').value = document.getElementById('roleOfUser').options[0].value;
        if(document.getElementById('decisionPhases').disabled == true){
            document.getElementById('decisionPhases').disabled = false;
        }
        if(document.getElementById('decisionStatus').disabled == true){
            document.getElementById('decisionStatus').disabled = false;
        }
        document.getElementById('decisionPhases').value = document.getElementById('decisionPhases').options[0].value;
        var status = document.getElementById('decisionStatus').options[0].value;
        document.getElementById('decisionStatus').value = document.getElementById('decisionStatus').options[0].value;
        var phases = document.getElementById('decisionPhases').options[0].value;
        getMyDecisions(timeFrame,roleOfUser,phases,status,'default');
    }
    
    
</script>
 
</apex:component>