<apex:page docType="html-5.0" id="pg" standardController="Plan__c" extensions="PlanView" title="{!Plan__c.Name}">
  <apex:includeScript value="{!$Page.CommonScripts}" />
  <div class = "preloader"></div>     
  <div class = "bg-fade"></div>
  <script> 
        showLoader();
        
        //FT Favicon
        (function() {
            var link = document.createElement('link');
            link.type = 'image/x-icon';
            link.rel = 'icon';
            link.href = '{!$Resource.Favicon}';
            document.getElementsByTagName('head')[0].appendChild(link);
            $(document).prop('title', 'Plan: '+'{!Plan__c.Name}');
        }());
        
  </script>  
    <c:CommonLibraries userLocaleSidKey="{!userLocaleSidKey}" /> 
     <script>
       kendo.culture('{!userLocaleSidKey}'); // set kendo locale for  current user.
       var dateFormat = '{0:'+kendo.culture().calendar.patterns.d+'}';  // Hold dateformat for kendo grids
       var dateTimeFormat =  '{0:'+kendo.culture().calendar.patterns.g+'}'; // Hold datetime format for kedo grids
     </script> 
<html> 
    <head>
       <meta http-equiv="Content-Script-Type" content="text/javascript" />
        <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
        <!--------- FT Stylesheets ----------->
        <apex:stylesheet value="{!$Page.CommonStyles}" />
        <apex:stylesheet value="{!$Page.PlanStyles}" />
        <apex:stylesheet value="{!$Page.OverrideStyles}" />
        
        <!--------- jQueryUI -----------> 
        <!--<apex:stylesheet value="{!URLFOR($Resource.JqueryUITabs, '/tabs/plan-jquery-ui.css')}"/>-->
        <apex:includeScript value="{!URLFOR($Resource.JqueryUITabs10, '/tabs/jquery-ui-1.10.3.js')}"/>  
        
          
        <!--------- FT Scripts ----------->
        <apex:includeScript value="{!$Page.PlanScripts}" />
           <style type="text/css">
             .k-header {
                 /*    margin-top: 0px;
                    border-color:#fff !important;*/
                }
                .k-dropdown .k-input{
                    background: #fff;
                }
               #tabs .k-content{
                font-weight: normal !important;
                color: #525252 !important;
                background: #fff !important;
                background-color: #fff !important;
             }
              #tabs .k-tabstrip .k-content{
                /* margin: 0em -.1em -.1em -.1em !important; */
                padding: 2em 1em !important;
                /* border-color: #d4d4d4 !important; */
                border-color: #ccc !important;
                /* min-height: 300px; */
                min-height: 400px;
               /* margin-left: 2px;*/    
             } 
            .k-header{
                background: #fff ;
                background-color: #fff ; 
             }
             .k-tabstrip .k-tabstrip-items{
                border-color: #DFDFDF !important;
               
             }
             .k-tabstrip .k-link {
                font-weight: normal !important;
             }
            .k-tabstrip .k-state-active{
                border-color: #ccc !important;
             }
             .k-tabstrip-items .k-item{
                margin-left: -1px;
               margin-right: -2px; 
            /*   border-width: 1px 1px; */
               }
             #tabs .k-state-hover{
                text-decoration: none !important;
                color: #333 ;
             }
            .k-tabstrip-items .k-tab-on-top, .k-tabstrip-items .k-state-active, .k-panelbar .k-tabstrip-items .k-state-active {
                margin-bottom: -1px;
                padding-bottom: 1px;
                }
                .k-tabstrip-items .k-state-active{
                    /*border:1px solid #ccc !important; */
                    border-bottom-color: #fff !important;
                }
              #tabs .k-tabstrip-items .k-link:link{
                color: #333 ;
                background-color: #f6f6f6 !important;
                height: 10px ;
                padding: 1.0em 1.5em 1.3em 1.5em !important;
              }
              
             #tabs .k-link:hover{
                color: #333 ;
                background: #f0f0f0 !important;
                background-color: #f0f0f0 !important;
                text-decoration: none !important;
                border-color: #DFDFDF !important;
             }
             #tabs .k-link:active  {
                border-color: #DFDFDF !important;
                
             }
             #tabs ul .k-state-active .k-link:link{
                 background: #fff !important;
                 background-color: #fff !important;
              } 
             #tabs .k-state-active>.k-link{
                color: #333 ;
                background-color: #fff !important;
             }
             #tabs .k-state-active .k-link:hover{
                background:#fff !important;
                background-color:#fff !important;
             }
             .k-content .k-header, .k-grid-header{
               background: #eee ;
                background-color: #eee ;
                color: #222 !important;
             }
             
             #tabs .k-content .k-link:hover, .k-grid-header .k-header .k-link:hover{
                text-decoration: underline ;
                background: #999 !important;
                background-color: #999 !important;
                color: #222 !important;
             }
              .k-pager-numbers .k-link:link:hover{
                text-decoration: none ;
              }
              #gridTaskEvent .k-link:link:hover{
                text-decoration: underline;
              }
              .k-pager-numbers .k-link{
               /* color:#fff !important;*/
              }
              .k-grid-filter {
                padding: .3em .2em .4em !important;
              }
               .greyColor {
                    color : grey;
               }
               .blackColor {
                    color : black;
               }
               .k-popup.k-list-container, .k-popup{
                    border-color: rgb(204, 204, 204) !important;
                  }
                .k-animation-container .k-dropdown .k-input{
                    background: #fff;
                 }
                 .k-dropdown-wrap.k-state-hover:hover{
                    background-color: #a99f9a !important;
                    border-color: #a99f9a !important;
                 }
                 .expandCollapseDetails{
                    background: url("{!URLFOR($Resource.Images, 'common/image-expandCollapse-black-sprite-8x16.png')}") 0 -8px no-repeat;
                    height : 8px;
                    width : 8px;
                    margin-top : 3px;
                    margin-right : 5px;
                }
                .complexity-label-div {
                    float:left;
                    margin-left: 47px;
                    margin-top: 3px;
                    font-weight:bold;
                    font-size:11px;
                    color:#4A4A56;
                }
                .skill-level-div {
                    float: left;
                    margin-right: 23px;
                    margin-top: 3px;
                    font-weight: bold;
                    font-size: 11px;
                    color: #4A4A56;
                }
                .estimated-hours {
                    float: left;
                    margin-left: 18px;
                    margin-top: 3px;
                    font-weight: bold;
                    font-size: 11px;
                    color: #4A4A56;
                }
                .actual-hours {
                    float: left;
                    margin-right: 18px;
                    margin-top: 3px;
                    font-weight: bold;
                    font-size: 11px;
                    color: #4A4A56;
                }
                .newtaskpopup-Name {
                    float: left;
                    margin-left: 72px;
                    margin-top: 13px;
                    font-weight: bold;
                    font-size: 11px;
                    color: #4A4A56;
                }
                .handler {
                    display: inline-block;
                    width: 23px;
                    min-height: 36px;
                    margin-right: 10px;
                    margin-top:0px;
                    margin-bottom:0px;
                   // border-radius: 3px 0 0 3px;
                    background: url("{!URLFOR($Resource.Images, 'plan/icon-handler-10x16.png')}") no-repeat 50% 50% #eee;
                    }
                   .handler:hover {
                    background-color: {!if(peopleEditPermission=='true','#2db245','eee')} ;
                    } 
                    #planItemViewOverview .k-grid tbody td:first-child {
                    padding: 0px !important;
                    background-color: #fff !important;
                    } 
                    .modal-window-newTaskPopup .k-header{
                        margin-top: 0px;
                    }
                    .modal-window-newTaskPopup .k-widget, .modal-window-newTaskPopup  .k-multiselect {
                        background: #fff !important;
                    }
                 .k-state-selected, .k-list>.k-state-selected, .k-list>.k-state-focused, .k-panelbar .k-state-selected, .k-button:active, .k-ghost-splitbar-vertical, .k-ghost-splitbar-horizontal, .k-draghandle.k-state-selected:hover{
                    background-color: #999;
                    border-color: #999;
                  }
                  .k-list-container ul li{
                    margin-left: 0em;
                }
                .k-filter-menu .k-button{
                        font-weight:normal !important;
                     }  
                     
                div.k-window-content{
                    padding: 0px !important;
                    border: 0px !important;
                }
                .k-window-titlebar {
                     min-height: 24px;
                     line-height: 1.6em;
                     font-size: 1.1em;
                     border-bottom-width: 0px !important;
                     background: url("{!URLFOR($Resource.Images, 'common/image-modalHead-1x38.jpg')}") repeat-x !important;
                 }
                 .k-window-title {
                    font-size: 1em;
                    top: 7px;
                    font-weight: bold;
                    cursor: move;
                    margin-left: 0.5em;
                }     
        </style> 
        
        <script type="text/javascript">
            $(function (){
                var params = {};
                window.location.search.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(str,key,value) {
                   params[key] = value;
                });
                var addCol = params.addCol;
                var addRelations = params.addRelations;
                var addNote = params.addNote;
                var addAct = params.addAct;
                var addTask = params.addTask;
                
                var index = 0;
               var activeTab = $("#itemsTab");// $( "#tabs" ).tabs({ active: 0 });
                
                if(window.location.href.indexOf("#") == -1) {
                    if(addCol == 'true'){
                        //index = $('#tabs li a').index($('a[href="#tabs-col"]').get(0));
                        //$('#tabs').tabs({selected: index});
                        
                       activeTab =  $("#peopleTab");// $( "#tabs" ).tabs({ active: 3 });
                        
                    }
                    if(addRelations == 'true'){
                        //index = $('#tabs li a').index($('a[href="#tabs-rel"]').get(0));
                        //$('#tabs').tabs({selected: index});
                        
                       activeTab =  $("#relationsTab");//$( "#tabs" ).tabs({ active: 5 });
                    }
                    if(addNote == 'true'){
                       // index = $('#tabs li a').index($('a[href="#tabs-att"]').get(0));
                       // $('#tabs').tabs({selected: index});
                       activeTab =  $("#attachmentsTab");//$( "#tabs" ).tabs({ active: 6 });
                    }
                    if(addTask == 'true'){
                        //index = $('#tabs li a').index($('a[href="#tabs-tas"]').get(0));
                        //$('#tabs').tabs({selected: index});
                        activeTab =  $("#activityTab");//$( "#tabs" ).tabs({ active: 4 });
                    }
                    if(addAct == 'true'){
                       // index = $('#tabs li a').index($('a[href="#tabs-act"]').get(0));
                       // $('#tabs').tabs({selected: index});
                       activeTab =  $("#activityTab");//$( "#tabs" ).tabs({ active: 4 });   
                    }
                }
                
                if(window.location.href.indexOf("#") != -1){
                    try{
                        var hrefSelected=window.location.hash;
                        var tabSelected = window.location.hash;
                        activeTab=$(tabSelected.substring(0,tabSelected.indexOf("_")));
                    }catch(e){
                        activeTab=$("#itemsTab");
                    }
                }
                $("#tabs").kendoTabStrip().data("kendoTabStrip").activateTab(activeTab);
                
                //$('#tabs').tabs({
                    //selected: (location.hash != "") ? location.hash.replace("#", "") : index,
                    //show: function(event, ui) { 
                        //location.hash = $(this).tabs("option", "selected"); 
                    //}
                //});
                
                $('#tabs').css('display','block');
                changeFooterText();
                dragModal();
                dragModalRelation();
                dragModaldecisionActivitiesWarning();
                
                $.widget( "ui.tabs", $.ui.tabs, {
                    options: {
                      keyboard: true
                    },
                    _tabKeydown: function(e) {
                      if(this.options.keyboard) {
                        this._super( '_tabKeydown' );
                      } else {
                        return false;
                      }
                    }
                });
            });
             
            function taskForNewDecision(val){
                // js to open new task popup from smart menu.
                document.getElementById('pg:newtaskForm:whatId_mlktp').value = '{!decisionIdSubstring}';
                fetchDecisionVal(decisionId);
            }
            
            function newTaskForActivity(val){
                // js to open new task popup from activites tab
                document.getElementById('pg:newtaskForm:whatId_mlktp').value = '{!planIdSubstring}';
                fetchDecisionValOnActitvites(val);
            }
            
            function addNewTaskPopup(val){
                // js to open new task popup on plan items 
                document.getElementById('pg:newtaskForm:whatId_mlktp').value = '{!planIdSubstring}';
                intialisePlanTask();
            }
            
            function isNumberKey(event){
                var event = event || window.event //For IE
                var key = event.target;
                var key = window.event ? event.keyCode : event.which;
                if (event.keyCode == 8 || event.keyCode == 46 || event.keyCode == 37 || event.keyCode == 39) {
                    return true;
                }
                else if ( key < 48 || key > 57 ) {
                    return false;
                }
                else return true;
            }
        </script>  
        <c:WalkMeAndSupportButton />
    </head>
    
    <input type="hidden" id="FT_walkme_loggedin_user_has_open_tasks" value="{!walkmeTaskVar}" ></input>
    
    
    
    <body>
    <!-- Component to call task popup --> 
    <apex:panelGroup id="TaskpopupComponantId">  
        <apex:panelGroup rendered="{!showTaskPopup}" id="panelGroupId"> 
            <c:TaskViewPopup recId="{!taskId}" isEditable="{!taskEditable}" typeOfMode="{!modeType}" chatDisable="true"  id="taskviewComponent"/>
        </apex:panelGroup>
    </apex:panelGroup>
    <apex:panelGroup id="NewTaskpopupComponantId">
        <apex:panelGroup rendered="{!newShowTaskPopup}" id="NewpanelGroupId"> 
            <c:NewTaskViewPopup recId="{!newTaskRelatedId}" id="NewtaskviewComponent"/>
        </apex:panelGroup> 
    </apex:panelGroup>
       <!------------ Content -------------->
    <div class = "wrapper">
            <!------------ Page Header -------------->
        <apex:outputPanel id="PlanHeader">    
        <div class = "page-head">
            <div class = "object-icon ft-left">
                <img src = "{!URLFOR($Resource.Images, 'plan/Fingertip_plan_icon_32x32.png')}" height="32px" width="32px"/>
            </div>
            <div class = "headers ft-left">
                <span class = "page-subhead ft-left">Plan</span><br />
                <h2><apex:outputField value="{!plan.Name}" /></h2>
            </div>
        </div>
        </apex:outputPanel>
            <!------------ End Page Header -------------->
            
 
        <!---------- Tabs Area ------------->
        
       <div id="tabs" class = "" >
            <ul class = "" id = "planTab">
                <li id="itemsTab"><a onclick="window.setTimeout('setPosition()',400);window.location.href='#itemsTab_act';" href="#tabs-ite" >Items <span class="items-tab"></span> </a></li>
                <li id="feedTab"><a href="#tabs-cha" onclick="window.location.href='#feedTab_act';">Feed</a></li>
                <li id="detailsTab"><a href="#tabs-gen" onclick="window.location.href='#detailsTab_act';">Details</a></li>
                <li id="peopleTab"><a href="#tabs-col" onclick="tabSectionClicked('{!JSENCODE(socialInput.Id)}','people-tab','peopleTab');">People <span class="people-tab"></span> </a></li>
                <li id="activityTab"><a href="#tabs-tas" onclick="tabSectionClicked('{!JSENCODE(socialInput.Id)}','task-tab','activityTab');">Activities  <span class="task-tab"></span>   </a></li>
                <li id="relationsTab"><a href="#tabs-rel" onclick="tabSectionClicked('{!JSENCODE(socialInput.Id)}','relation-tab','relationsTab');">Relations  <span class="relation-tab" ></span> </a></li>
                <li id="attachmentsTab"><a href="#tabs-att" onclick="tabSectionClicked('{!JSENCODE(socialInput.Id)}','attachment-tab','attachmentsTab');">Attachments <span class="attachment-tab" ></span> </a><div id="attachmentOnly" style="display:none" ></div></li>
                <li id="historyTab"><a href="#tabs-his" onclick="tabSectionClicked('{!JSENCODE(socialInput.Id)}','history-tab','historyTab');">History <span class="history-tab"></span> </a></li>               
            </ul>
                <!----------- Items Tab -------------->
            <div id="tabs-ite">
                <div class = "tabs-block border-pink">
                    <div class = "tabs-block-head">
                        <!-- -- drop down to change the views -->
                        <span   class="viewlabel">View : </span>  
                        <select id="selectview" class="ft-left" onchange="showItemView(this.value)"> 
                            <option value="Overview">Overview </option>
                            <option value="Meeting">Meeting </option>
                            <option value="Status">Status </option>
                            <option value="Financials">Financials </option>
                            <option value="Work">Work</option> 
                        </select>   
                        <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c,chkRecPermission),TRUE,FALSE)}">
                            <button type = "button" class="k-button" onclick="AddItems();">Add Item</button>
                        </apex:panelGroup>
                        <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c,chkRecPermission),false,true)}">
                            <button type = "button" class="btn-disabled k-button">Add Item</button>
                         </apex:panelGroup>
                        
                        <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c,chkRecPermission),TRUE,FALSE)}">
                            <button type = "button" class = "btn-margin k-button" onclick="openNotePopup();">Add New Note</button>
                            <button type = "button" class="k-button" onclick="reDirectToQcd('{!JSENCODE(plan.id)}')">Add New Decision</button>
                        </apex:panelGroup>  
                        
                         <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c,chkRecPermission),false,true)}">
                            <button type = "button" class="btn-disabled btn-margin k-button">Add New Note</button>
                            <button type = "button" class="btn-disabled k-button">Add New Decision</button>
                         </apex:panelGroup>  
                         
                         <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c,socialInput.Consulted__c,socialInput.Informed__c,chkRecPermission),FALSE,TRUE)}">
                            <button type = "button" class="btn-disabled k-button">Add New Task</button>
                         </apex:panelGroup> 
                         
                        <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c,socialInput.Consulted__c,socialInput.Informed__c,chkRecPermission),TRUE,FALSE)}">
                            <button type = "button" class="k-button"  onclick="newTaskPopupCompForItem();">Add New Task</button>
                        </apex:panelGroup>                     

                         <!------------- Info View1 ----------------->
                        <div class = "tabs-block-right items-hover-area ft-right" id = "items-callout" onmouseover = "showInformationOnItems()" onmouseout = "hideInformationOnItems()">
                            <div class = "popover-gen-arrow items-hover" id = "people-arrow"></div>
                            <div class = "popover-gen items-hover items-hover-area" onmouseout = "hideInformationOnItems()">                                    
                                <div class = "popover-icon ft-left">
                                    <img src = "{!URLFOR($Resource.Images, 'common/icon-info-24x24.png')}" />
                                </div>
                                <div class = "popover-gen-content ft-right" id  = "items-content">
                                    In this section, you can organize the various business items on the plan.
                                </div>
                            </div>                           
                            <img class = "ft-left" src = "{!URLFOR($Resource.Images, 'common/icon-info-24x24.png')}" />
                        </div>
                            <!------------- End Info View1 ----------------->
                         <!------------- Info View1 ----------------->
                        <div class = "tabs-block-right items-hover-area ft-right" id = "items-callout2" onmouseover = "showInformationOnItems()" onmouseout = "hideInformationOnItems()">
                            <div class = "popover-gen-arrow items-hover" id = "people-arrow"></div>
                            <div class = "popover-gen items-hover items-hover-area" onmouseout = "hideInformationOnItems()">                                    
                                <div class = "popover-icon ft-left">
                                    <img src = "{!URLFOR($Resource.Images, 'common/icon-info-24x24.png')}" />
                                </div>
                                <div class = "popover-gen-content ft-right" id  = "items-content">
                                In this section, you can organize the various business items on the plan and add the duration for each item.                                </div>
                                </div>                           
                            <img class = "ft-left" src = "{!URLFOR($Resource.Images, 'common/icon-info-24x24.png')}" />
                        </div>
                            <!------------- End Info View1 ----------------->               
                            <!------------- Info View4 ----------------->
                        <div class = "tabs-block-right items-hover-area1 ft-right" id = "items-callout1" onmouseover = "showInformationOnItemsCompare()" onmouseout = "hideInformationOnItemsCompare()">
                            <div class = "popover-gen-arrow items-hover1" id = "people-arrow"></div>
                            <div class = "popover-gen items-hover1 items-hover-area1" onmouseout = "hideInformationOnItemsCompare()">                                    
                                <div class = "popover-icon ft-left">
                                    <img src = "{!URLFOR($Resource.Images, 'common/icon-info-24x24.png')}" />
                                </div>
                                <div class = "popover-gen-content ft-right" id  = "items-content">
                                    You can compare decisions of the plan with the estimated financial details
                                </div>
                            </div>                           
                            <img class = "ft-left" src = "{!URLFOR($Resource.Images, 'common/icon-info-24x24.png')}" />
                        </div>
                            <!------------- End Info View4 ----------------->
                    </div>
                    <!-- - Overview section start -->
                    <div id="itemViewOverview">
                            <div class = "action-disable"></div>  
                                <div id="planItemViewOverview"></div>
                                <script>
                                    $(document).ready(function () {
                                         kendoItemViewOverview($.parseJSON('{!JSENCODE(allItemJson)}'));
                                    });
                                </script>
                    </div>
                    <!-- - Overview section end -->
                    <!-- - Meeting section start -->
                    <div id="itemViewMeeting">
                            <div class = "action-disable"></div>
                                <div class = "duration-top" onload="setPosition()">Duration</div>  
                                <div id="planItemViewMeeting"></div>
<!--                                 <div class = "duration-bottom ft-left"> -->
<!--                                     <span class = "ft-left">Duration Sum &nbsp;</span> -->
<!--                                     <div id="durationSum" class = "sum-hold ft-left">{!HTMLENCODE(totalHoursMints)}</div> -->
<!--                                 </div>  -->
                                <script>
                                    $(document).ready(function () {
                                         kendoItemViewMeeting($.parseJSON('{!JSENCODE(allItemJson)}'));
                                         setPosition();
                                    });
                                </script>
                    </div>
                    <!-- - Meeting  section end -->
                    <!-- - status section start -->
                    <div id="itemViewStatus">
                            <div class = "action-disable"></div>    
                                <div class = "stance-top"  onload="setPositionStance()" >Stance</div>
                                <div id="planItemViewStatus"></div>
                                <script>
                                    $(document).ready(function () { 
                                         kendoItemViewStatus($.parseJSON('{!JSENCODE(allItemJson)}'));
                                         setPositionStance
                                    });
                                </script>   
                    </div>
                    <!-- - status  section end -->
                    <!-- - financial section start -->
                    <div id="itemViewFinancials">  
                            <div class = "action-disable"></div>  
                                <div id="planItemViewFinancials"></div>
                                <script>
                                    $(document).ready(function () {
                                           kendoItemViewFinancials ($.parseJSON('{!JSENCODE(allItemJson)}'));
                                    });
                                </script>
                    </div>
                    <!-- - financial  section end -->
                    <!-- - work section start -->
                    <div id="itemViewWork">
                            <div class = "action-disable"></div>  
                                <div id="planItemViewWork"></div>
<!--                                 <div class = "hours-bottom ft-left" onload="setPositionWorkEstimation()">  -->
<!--                                     <span class = "ft-left">Sum &nbsp;</span> -->
<!--                                     <div id="estimatedSum" class = "sum-hold ft-left"></div> -->
<!--                                     <div id="actualSum" class = "sum-hold ft-left"></div> -->
<!--                                 </div>  -->
                                <script>
                                    $(document).ready(function () {
                                        kendoItemViewWork($.parseJSON('{!JSENCODE(allItemJson)}'));
                                        setPositionWorkEstimation();
                                        $('#estimatedSum').html( kendo.toString('{!HTMLENCODE(totalEstimatedHours)}', "n") );
                                        $('#actualSum').html( kendo.toString('{!HTMLENCODE(totalActualHours)}', "n"));
                                        
                                    });
                                </script> 
                    </div>
                    <!-- - work section end -->
                </div>
            </div>
                <!----------- Items Tab --------------> 
                <!----------- Chatter Tab -------------->
            <div id="tabs-cha">
                <div class = "tabs-block border-pink">
                    <div class = "tabs-block-head">
                        <div class = "tabs-block-left">
                            <img class = "ft-left" src = "{!URLFOR($Resource.Images, 'common/icon-chatter-24x24.png')}" />
                            <h3 class = "ft-left">Feed</h3>
                        </div>
                    </div>
                    <chatter:feedWithFollowers id="chatter" entityId="{!$CurrentPage.parameters.Id}" />
                    <apex:form >
                        <apex:actionFunction action="{!dummyCall}" name="chatterRerender" rerender="chatter"></apex:actionFunction>
                    </apex:form>
                </div>    
            </div> 
            <!----------- End Chatter Tab -------------->
            <!----------- Begin General Tab -------------->
            <div id="tabs-gen">
                <div class = "tabs-block border-pink">
                    <!------------ Begin View section of Plan------------->
                    <div class="view">
                        <apex:outputPanel id="viewPlanTab">
                            <div class = "tabs-block-head">
                                <div class = "tabs-block-left">
                                    <img class = "ft-left" src = "{!URLFOR($Resource.Images, 'common/icon-general-24x24.png')}" />
                                    <h3 class = "ft-left">Plan Details</h3>
                                </div>
                             
                                <!-- Begin Plan Button Area (Above) -->
                                <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c,chkRecPermission),TRUE,FALSE)}">
                                    <button type = "button" class="k-button" onclick="showEdit()"> Edit </button>
                                </apex:panelGroup>
                                <apex:panelGroup rendered="{!IF(canUserDelete,TRUE,FALSE)}">
                                    <button type = "button" class="k-button" onclick="deleteActionFunction()"> Delete </button>
                                </apex:panelGroup>
                                <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c,chkRecPermission),false,true)}">
                                    <button type = "button"  class="btn-disabled k-button"> Edit </button>
                                </apex:panelGroup>
                                <apex:panelGroup rendered="{!IF(!canUserDelete,True,False)}">
                                    <button type = "button"  class="btn-disabled k-button"> Delete </button>
                                </apex:panelGroup>
                                <button type = "button" class="k-button" onclick="getCloneChkBoxDetails();showModal('copyHeader','clone-body','plan-footer-clone')"> Copy </button>
                                <button type="button" id = "generalPdf" class="k-button" onclick="planPDF();" > PDF Summary </button>
                                <!-- End Plan Button Area (Above) -->
                            </div>
                            <!-- Begin General Section -->
                            <div class = "tabs-gen-block border-pink">
                                <h3>General</h3>
                                <table cellspacing = "0" cellpadding = "0" class = "gen-block-tbl">
                                    <tr>
                                        <td class = "cell-left gen-block-cell">
                                            Subject
                                        </td>
                                        <td class = "gen-block-cell"> 
                                           <div class="restrictCharacters"> <apex:outputField value="{!plan.Name}" /> </div>
                                        </td>
                                    </tr>
                                    <tr class="gapTopRow"><td colspan = "4" class = ""></td> </tr>
                                    <tr class="gapRrow"><td colspan = "4" class = "centerLine"></td> </tr>
                                    <tr class="gapTopRow"><td colspan = "4" class = ""></td> </tr>
                                    <tr>
                                        <td class = "cell-left gen-block-cell">
                                            Description
                                        </td>
                                        <td class = "gen-block-cell"> 
                                           <div class="restrictCharacters"> <apex:outputField value="{!plan.Description__c}" /> </div>
                                        </td>
                                    </tr>
                                    <tr class="gapTopRow"><td colspan = "4" class = ""></td> </tr>
                                    <tr class="gapRrow"><td colspan = "4" class = "centerLine"></td> </tr>
                                    <tr class="gapTopRow"><td colspan = "4" class = ""></td> </tr>
                                </table>                                
                            </div>
                            <!-- End General Section --> 
                            <!-------------- Begin Other Information ----------------->   
                            <div class = "tabs-gen-block border-pink">
                                <h3>Other Information</h3>
                                <table cellspacing = "0" cellpadding = "0" class = "gen-block-tbl">
                                    <tr>
                                        <td class = "cell-left gen-block-cell">
                                            All Day Event
                                        </td>
                                        <td class = "gen-block-cell"> 
                                            <apex:outputField value="{!plan.All_Day_Event__c}" /> 
                                        </td>
                                    </tr>
                                    <tr class="gapTopRow"><td colspan = "4" class = ""></td> </tr>
                                    <tr class="gapRrow"><td colspan = "4" class = "centerLine"></td> </tr>
                                    <tr class="gapTopRow"><td colspan = "4" class = ""></td> </tr>
                                    <tr>
                                        <td class = "cell-left gen-block-cell">
                                            Start
                                        </td>
                                        <td class = "gen-block-cell"> 
                                            <apex:outputField value="{!plan.Start_Time__c}" /> 
                                        </td>
                                    </tr>
                                    <tr class="gapTopRow"><td colspan = "4" class = ""></td> </tr>
                                    <tr class="gapRrow"><td colspan = "4" class = "centerLine"></td> </tr>
                                    <tr class="gapTopRow"><td colspan = "4" class = ""></td> </tr>
                                    <tr>
                                        <td class = "cell-left gen-block-cell">
                                            End
                                        </td>
                                        <td class = "gen-block-cell"> 
                                            <apex:outputField value="{!plan.End_Time__c}"/>
                                        </td>
                                    </tr>
                                    <tr class="gapTopRow"><td colspan = "4" class = ""></td> </tr>
                                    <tr class="gapRrow"><td colspan = "4" class = "centerLine"></td> </tr>
                                    <tr class="gapTopRow"><td colspan = "4" class = ""></td> </tr>
                                    <tr>
                                        <td class = "cell-left gen-block-cell">
                                            Location
                                        </td>
                                        <td class = "gen-block-cell"> 
                                            <apex:outputField value="{!plan.Location__c}" /> 
                                        </td>
                                    </tr>
                                    <tr class="gapTopRow"><td colspan = "4" class = ""></td> </tr>
                                    <tr class="gapRrow"><td colspan = "4" class = "centerLine"></td> </tr>
                                    <tr class="gapTopRow"><td colspan = "4" class = ""></td> </tr>
                                    <tr>
                                        <td class = "cell-left gen-block-cell"> 
                                            Show Time As 
                                        </td>
                                        <td class = "gen-block-cell"> 
                                            <apex:outputField value="{!plan.Show_Time_As__c}" /> 
                                        </td>
                                    </tr>
                                    <tr class="gapTopRow"><td colspan = "4" class = ""></td> </tr>
                                    <tr class="gapRrow"><td colspan = "4" class = "centerLine"></td> </tr>
                                    <tr class="gapTopRow"><td colspan = "4" class = ""></td> </tr>
                                </table>
                            </div>  
                            <!-------------- End Other Information ----------------->   
                            <!-- Begin Plan Button Area (Below) -->
                            <div class = "gen-bottom-btns border-btm-pink">
                                <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c,chkRecPermission),TRUE,FALSE)}">
                                    <button type = "button" class="k-button" onclick="showEdit()"> Edit </button>
                                </apex:panelGroup>
                                <apex:panelGroup rendered="{!IF(canUserDelete == True,TRUE,FALSE)}">
                                    <button type = "button" class="k-button" onclick="deleteActionFunction()"> Delete </button>
                                </apex:panelGroup>
                                <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c,chkRecPermission),false,true)}">
                                    <button type = "button" class="btn-disabled k-button"> Edit </button>
                                </apex:panelGroup>
                                <apex:panelGroup rendered="{!IF(canUserDelete != True,TRUE,FALSE)}">
                                    <button type = "button"  class="btn-disabled k-button"> Delete </button>
                                </apex:panelGroup>
                                <button type = "button" class="k-button" onclick="getCloneChkBoxDetails();showModal('copyHeader','clone-body','plan-footer-clone')"> Copy </button>
                                <button type="Button" class="k-button" id = "generalPdf" onclick="planPDF();" > PDF Summary </button>
                            </div> 
                            <!-- End Plan Button Area (Below)-->  
                        </apex:outputPanel>
                    </div>
                <!-- End view plan section --> 
                
                <!-- Begin edit plan section --> 
                <div class="edit">
                <apex:form id="editMode" >
                    <div class = "tabs-block-head">
                        <div class = "tabs-block-left">
                            <img class = "ft-left" src = "{!URLFOR($Resource.Images, 'common/icon-general-24x24.png')}" />
                            <h3 class = "ft-left">Plan Edit</h3>                            
                        </div>
                        <!-- Begin Plan Button Area (Above)--> 
                        <button type = "button" class="k-button" onclick="return validateSavePlan()"> Save </button>
                        <button type = "button" class="k-button" onclick="editModeAction();showView()"> Cancel </button>
                        <!-- End Plan Button Area (Above)--> 
                    </div>
                    <apex:outputPanel id="editPlanTab">
                    <!-- Begin General Section --> 
                    <div class = "tabs-gen-block border-pink">
                        <h3>General</h3>
                        <table cellspacing = "0" cellpadding = "0" class = "gen-block-tbl">
                            <tr>
                                <td class = "cell-left gen-block-cell">
                                    Subject
                                </td>
                                <td class = "gen-block-cell"> 
                                    <div class="redLineContainer">
                                        <div class="redLineDivName"> </div>
                                        <apex:inputField id="planName" styleClass="plan-input-text" value="{!plan.Name}" required="true" />
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td class = "cell-left gen-block-cell">
                                    Description
                                </td>
                                <td class = "gen-block-cell">
                                    <apex:inputField styleClass="plan-input-textarea" onkeypress="return count(this)" id="planDesc" value="{!plan.Description__c}" />
                                </td>
                            </tr>
                         </table>
                     </div> 
                     <!-- End General Section --> 
                     <!-------------- Begin Other Information ----------------->
                     <div class = "tabs-gen-block border-pink">
                        <h3>Other Information</h3>
                        <table cellspacing = "0" cellpadding = "0" class = "gen-block-tbl">     
                            <tr>
                                <td class = "cell-left gen-block-cell">
                                    All Day Event
                                </td>
                                <td class = "gen-block-cell">
                                    <apex:inputField value="{!plan.All_Day_Event__c}" />
                                </td>
                            </tr>
                            <tr>
                                <td class = "cell-left gen-block-cell">
                                    Start
                                </td>
                                <td class = "gen-block-cell">
                                    <apex:inputField value="{!plan.Start_Time__c}" />
                                </td>
                            </tr>
                            <tr>
                                <td class = "cell-left gen-block-cell">
                                    End
                                </td>
                                <td class = "gen-block-cell">
                                    <apex:inputField value="{!plan.End_Time__c}" />
                                </td>
                            </tr> 
                            <tr>
                                <td class = "cell-left gen-block-cell">
                                    Location
                                </td>
                                <td class = "gen-block-cell">
                                    <apex:inputField styleClass="plan-input-text" value="{!plan.Location__c}" />
                                </td>
                            </tr>
                            <tr>
                                <td class = "cell-left gen-block-cell">
                                    Show Time As
                                </td>
                                <td class = "gen-block-cell">
                                    <apex:inputField value="{!plan.Show_Time_As__c}" />
                                </td>
                            </tr>
                        </table>
                     </div> 
                     <!-------------- End Other Information ----------------->
                    </apex:outputPanel>
                    
                    <!-- Begin Plan Button Area (Below)--> 
                    <div class = "gen-bottom-btns border-btm-pink">
                        <button type = "button" class="k-button" onclick="return validateSavePlan()"> Save </button>
                        <button type = "button" class="k-button" onclick="editModeAction();showView();"> Cancel </button>
                    </div>
                    <!-- End Plan Button Area (Below)--> 
                        <!--  Begin Action methods defined for the plan buttons -->
                        <apex:actionFunction name="itemViewUpdate" action="{!itemViewDetails}" reRender="itemViewOP"/>
                        <apex:actionFunction name="planPDF" action="{!planPDF}" />
                        <apex:actionFunction name="editModeAction" action="{!dummyCall}"  reRender="editPlanTab,chatter" />
                        <apex:actionFunction name="save" action="{!savePlan}" oncomplete="showView();" reRender="viewPlanTab,PlanHeader,copyHeader"/>
                        <apex:actionFunction name="deleteActionFunction" action="{!Delete}" />
                        <apex:actionFunction name="hideTaskPopup" action="{!closeTaskPopup}" reRender="TaskpopupComponantId" oncomplete="$('body').css('overflow','auto'); hidefade();"/>
                        <apex:actionFunction name="clonePlanAction" action="{!planClone}" reRender="PlanHeader" >
                            <apex:param name="items" id="items" value="" />
                            <apex:param name="people" id="people" value="" />
                            <apex:param name="task" id="task" value="" />
                            <apex:param name="attach" id="attach" value="" />
                            <apex:param name="relations" id="relations" value="" />
                            <apex:param name="resetDate" id="resetDate" value="" />
                            <apex:param name="relateClone" id="relateClone" value="" />
                            <apex:param name="assignToMe" id="assignToMeParam" value=""/>
                            <apex:param name="relationValue" id="relationValue" value="" />
                        </apex:actionFunction>
                        <apex:actionFunction name="newTaskPopupComponent" action="{!newTaskPopupComponent}" reRender="NewTaskpopupComponantId" oncomplete="hideLoader();$('.modal-window-newTaskPopup').show();">
                            <apex:param name="relatedRecordId" value="" />
                        </apex:actionFunction>
                        <apex:actionFunction name="newTaskPopupComponentForClose" action="{!newTaskPopupComponent}" reRender="NewTaskpopupComponantId" oncomplete="chatterRerender();getAllTaskRelation('{!JSENCODE(plan.Id)}');refreshActivities();"/>
                        <!--  Begin Action methods defined for the plan buttons -->
               </apex:form>
               </div>
               <!-- End edit plan section -->
            </div>
          </div>   
          <!----------- End General Tab -------------->
            
            <!------------- Collaborators Tab --------------->
            <div id="tabs-col">
                <div class = "tabs-block border-pink">
                    <div class = "tabs-block-head">
                        <div class = "tabs-block-left">
                            <img class = "ft-left" src = "{!URLFOR($Resource.Images, 'common/icon-collaborators-24x24.png')}" />
                            <h3 class = "ft-left">People</h3>
                        </div>
                        
                        <!-- Code for button -->
                        <apex:panelGroup rendered="{!IF(AND(socialInput.User__c != null,(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c,AND(plan.Add_C_I_Members__c,OR(socialInput.Consulted__c,socialInput.Informed__c)),chkRecPermission))),TRUE,FALSE)}"> 
                            <button type = "button" class="k-button" onclick="addEditPeople();">Add/Edit People</button>
                        </apex:panelGroup>
                        <apex:panelGroup rendered="{!IF(AND(socialInput.Accountable__c==false, socialInput.Responsible__c==false,socialInput.Backup_for_Accountable__c==false,plan.Add_C_I_Members__c==false,!chkRecPermission,socialInput.User__c != null),True,False)}">
                            <button type = "button" class="btn-disabled k-button" >Add/Edit People</button>
                        </apex:panelGroup>
                         
                        <apex:outputPanel rendered="{!IF(AND(socialInput.User__c == null,chkRecPermission),true,false) }" >
                            <button type = "button" class="k-button" onclick="addEditPeople();" >Add/Edit People</button>
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!IF(AND(socialInput.User__c == null,!chkRecPermission),true,false) }" >
                            <button type = "button" id = "generalPeopleForInformedUser" class="btn-disabled k-button" >Add/Edit People</button>
                        </apex:outputPanel>
                         
                        <!--  Code for Information popup -->        
                        <div class = "tabs-block-right people-hover-area ft-right" onmouseover = "showInformationOnPeople()" onmouseout = "hideInformationOnPeople()">
                            <div class = "popover-gen-arrow people-hover" id = "people-arrow"></div>
                            <div class = "popover-gen people-hover people-hover-area" onmouseout = "hideInformationOnPeople()">                                    
                                <div class = "popover-icon ft-left">
                                    <img src = "{!URLFOR($Resource.Images, 'common/icon-info-24x24.png')}" />
                                </div>
                                <div class = "popover-gen-content ft-right" id  = "people-content">
                                    
                                </div>
                            </div>                           
                            <img class = "ft-left" src = "{!URLFOR($Resource.Images, 'common/icon-info-24x24.png')}" />
                        </div> 
                        <!-- Code for search text and button --> 
                           <div class = "ft-right decisionSearch">
                                <span class = "people-search k-textbox k-space-right"> 
                                    <!--<input id="searchPeople" type = "text"/>&nbsp;
                                    <button type = "button" onclick="searchPeople('{!JSENCODE(decision.id)}',$('#searchPeople').val())" >Search</button>-->
                                       <input type="text" placeholder="Search..." id="searchPeople"/>
                                       <a href="#"  class="k-icon k-i-search" onclick="searchPeople('{!JSENCODE(plan.id)}',$('#searchPeople').val());">&nbsp;</a>
                                </span>
                           </div>
                    </div>
                    <div id="gridPeople" class = "plan-people"></div>
                    <script>
                        $(document).ready(function () {
                             kendoPeople($.parseJSON('{!JSENCODE(socialInputJson)}'));
                        });
                    </script>
                </div>      
            </div>
                <!------------- End Collaborators Tab --------------->
                <!------------- Tasks Tab --------------->
            <div id="tabs-tas">
                <div class = "tabs-block border-pink">
                    <div class = "tabs-block-head"> 
                        <div class = "tabs-block-left paddActivities">
                            <img class = "ft-left" src = "{!URLFOR($Resource.Images, 'common/icon-tasks-24x24.png')}" />
                            <h3 class = "ft-left">Activities</h3>
                        </div>
                        <!-- Code for buttons -->
                         <button type="button" class="k-button" id="enableMassDelete" >Delete</button>
                         <button type="button" class="k-button" id="enableMassEdit" >Edit</button>
                        <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c,socialInput.Consulted__c,socialInput.Informed__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c,chkRecPermission),TRUE,FALSE)}">
                            <button type="button" class="k-button" onclick="newTaskPopupComp();">New Task </button>
                            <button type="button" class="k-button" onclick="newEvent();">New Event</button> 
                            <button type="Button" class="k-button" onclick="logCall();">Log A Call </button> 
                            <button type="Button" class="k-button" onclick="sendEmail();">Send An Email</button> 
                        </apex:panelGroup>
                         <apex:panelGroup rendered="{!IF(AND(socialInput.Accountable__c==false,socialInput.Consulted__c==false,socialInput.Informed__c==false, socialInput.Responsible__c==false,socialInput.Backup_for_Accountable__c==false,!chkRecPermission),TRUE,FALSE)}">
                            <button type="button" class="btn-disabled k-button">New Task </button>
                            <button type="button" class="btn-disabled k-button">New Event</button>
                            <button type="Button" class="btn-disabled k-button">Log A Call </button> 
                            <button type="Button" class="btn-disabled k-button">Send An Email</button>  
                        </apex:panelGroup> 
                        <!-- Code for search text and button --> 
                         <div class = "ft-right taskSearch">
                            <span class = " k-textbox k-space-right">
                            <!--<input id="searchActivity" type = "text"/>&nbsp;
                            <button type = "button" onclick="searchTaskEvent('{!JSENCODE(plan.id)}',$('#searchActivity').val());" >Search</button>-->
                            <input type="text" placeholder="Search..." id="searchActivity"/>
                            <a href="#"  class="k-icon k-i-search" onclick="searchTaskEvent('{!JSENCODE(plan.id)}',$('#searchActivity').val());">&nbsp;</a>
                             </span>
                        </div>
                    </div>
                    
                    <div id="gridTaskEvent"></div>
                    <script>
                        $(document).ready(function () {
                             $('#enableMassDelete').addClass('btn-disabled');
                             $('#enableMassDelete').attr('onclick','').unbind('click');
                             $('#enableMassEdit').addClass('btn-disabled');
                             $('#enableMassEdit').attr('onclick','').unbind('click');
                             kendoTaskEvent ($.parseJSON('{!JSENCODE(taskEventJSON)}'));
                        });
                    </script> 
                </div>    
            </div>
                <!------------- End Tasks Tab --------------->
               
                <!------------- Relations Tab --------------->
            <div id="tabs-rel">
                <div class = "tabs-block border-pink">
                    <div class = "tabs-block-head">
                        <div class = "tabs-block-left">
                            <img class = "ft-left" src = "{!URLFOR($Resource.Images, 'common/icon-relations-24x24.png')}" />
                            <h3 class = "ft-left">Relations</h3>
                        </div>
                        <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c,chkRecPermission),TRUE,FALSE)}">
                            <button onclick="existingRelations();" class="k-button" type = "button">Add Relations</button>
                        </apex:panelGroup>
                        <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c,chkRecPermission),FALSE,TRUE)}">
                            <button class="btn-disabled k-button" type = "button">Add Relations</button>
                        </apex:panelGroup>  
                    </div>
                    <div id="gridRelationship"></div>
                    <script>
                        $(document).ready(function () {
                             kendoRelationship($.parseJSON('{!JSENCODE(relationsJSON)}'));
                        });
                    </script>
                </div>    
            </div>
                <!------------- End Relations Tab --------------->
                <!------------- Attachments Tab --------------->
            <div id="tabs-att">
                <!--<div class = "tabs-block border-pink">
                    <div class = "tabs-block-head">
                        <div class = "tabs-block-left">
                            <img class = "ft-left" src = "{!URLFOR($Resource.Images, 'common/icon-attachments-24x24.png')}" />
                            <h3 class = "ft-left">Notes &amp; Attachments</h3>
                        </div>
                        <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c, chkRecPermission),TRUE,FALSE)}">
                            <button type = "button"  onclick = "addNote()">New Note</button> 
                            <button type = "button"  onclick = "addAttach()">Attach File</button> 
                        </apex:panelGroup>
                        <apex:panelGroup rendered="{!IF(OR(socialInput.Accountable__c, socialInput.Responsible__c,socialInput.Backup_for_Accountable__c, chkRecPermission),FALSE,TRUE)}">
                            <button type = "button" class="btn-disabled">New Note</button> 
                            <button type = "button" class="btn-disabled">Attach File</button> 
                        </apex:panelGroup>  
                    </div>
                    
                    <div id="gridAttachmentNote"></div>
                      <script>
                        $(document).ready(function () {
                            // kendoAttachmentNote($.parseJSON('{!JSENCODE(attachmentNoteJSON)}'));
                        });
                    </script>  
                </div> -->
                <apex:relatedList subject="{!Plan__c}" list="NotesAndAttachments" />     
            </div>
                <!------------- End Attachments Tab --------------->
                <!------------- History Tab --------------->
            <div id="tabs-his">
                <div class = "tabs-block border-pink">
                    <div class = "tabs-block-head">
                        <div class = "tabs-block-left">
                            <img class = "ft-left" src = "{!URLFOR($Resource.Images, 'common/icon-history-24x24.png')}" />
                            <h3 class = "ft-left">History</h3>
                        </div>
                    </div>
                    <div id="gridHistory"></div>
                    <script>
                        $(document).ready(function () {
                             kendoHistory ($.parseJSON('{!JSENCODE(historyJSON)}'));
                        });
                        
                    </script> 
                </div>      
            </div>
                <!------------- End History Tab --------------->
        </div>
        <!--------- End Tabs Area -----------> 
    </div>  
        <!--------- Smart Menu ----------->
    <div class = "smart-menu">
        <ul>
            <li><a href = "javascript: void(0);" onclick = "newTaskForDecision();">New Task</a></li>
            <!--<li class = "seperator"></li>
            <li><a href = "javascript: void(0);" onclick = "showModal('issue-header','issue-body','plan-footer-issue')">New Issue</a></li>-->
        </ul>
    </div>
        <!--------- End Smart Menu ----------->
        
    <div class = "modal-window-relation">  
            <!--------- Popup Relation Header  
        <div class = "modal-relation-head">    
            <div class = "modal-decision-header ft-left" id = "relation-header">
               Add Relation
            </div>                        
            <a class = "modal-close" href = "javascript: void(0);" onclick = "hideRelationModal();cancelRelation();"></a> 
        </div> 
              End Relation Header ----------->   
            <!--------- Popup Relation Content ----------->
        <div class = "modal-relation-content">
            <p class= "relation-help"> 
                Select the object and click search to get the complete list of records or type the name you are looking for.
            </p>
            <apex:form id="relationsId">
                <div class = "relation-search">
                    Search within &nbsp;
                     <!--  added on 20_2_2014 Dyanmic picklist to specify std, Decision and Plan object-->
                     <select id="chooseObject">
                         <apex:repeat value="{!userAccessibleobjects}" var="option">
                            <option value="{!option.value}">{!option.label} </option>
                         </apex:repeat>
                     </select> 
                     <!-- end  -->
                     
                    &nbsp;&nbsp;for &nbsp;
                    <input type = "text" id="searchText"/>
                    <button type = "button" onclick="searchItems();" class="k-button">Search</button>
                     
                    <apex:actionFunction name="searchMyItems" action="{!searchItems}" oncomplete="validateSearch('{!srchRelationship.size}');" reRender="searchTable,addTemplate" >
                        <apex:param name="chooseObject" id="chooseObject" value="" />
                        <apex:param name="searchText" id="searchText" value="" />
                    </apex:actionFunction>
                    <apex:actionFunction name="Add" action="{!addFromSrch}" oncomplete="removeSrchTxt();hideRelationModal();refreshRelationship('{!JSENCODE(plan.Id)}');" reRender="relationsId"/>
                    <apex:actionFunction name="existingRelationsAddToSet" action="{!existingRelationsAddToSet}" oncomplete="showModalRelation();hideLoader();"/>
                    <apex:actionFunction name="cancelRelation" action="{!cancelRelation}" reRender="relationsId" />
                </div>
                <apex:outputPanel id="searchTable" >
                    <table cellspacing = "0" cellpadding = "0" width = "100%" class = "relation-tbl">
                        <tr>
                            <td class = "rel-th rel-td1">Select</td>
                            <td class = "rel-th">Object Name</td>
                            <td class = "rel-th rel-td2">Object Type</td>
                            <td class = "rel-th rel-td3">Relation</td>
                            <td class = "rel-th rel-td2">Strength</td>
                            <td class = "rel-th">Notes</td>
                        </tr>
                        <apex:variable var="rowNumber" value="{!0}" />
                        <apex:repeat value="{!srchRelationship}" var="rc" id="relationRepeat">                            
                            <tr>
                                <td class = "rel-td rel-left rel-center"><apex:inputCheckbox value="{!rc.Select__c}" onchange="enableTextbox(this,'{!rowNumber}')" styleclass="chksel" id="chkBoxSelected"/></td>
                                <td class = "rel-td rel-td-name"><apex:outputText value="{!rc.Child_Record_Name__c}"/></td>
                                <td class = "rel-td"><apex:outputText value="{!rc.Child_Object_Name__c}"  /></td>
                                <td class = "rel-td {!rowNumber}picklist"><apex:inputField id="relationId" value="{!rc.From_Relation__c}"  label=""/></td>
                                <td class = "rel-td {!rowNumber}picklist"><apex:inputField value="{!rc.Strength__c}" label="" id="strengthId"/></td>
                                <td class = "rel-td rel-right {!rowNumber}textarea"><apex:inputField styleClass="rel-note-text" value="{!rc.Notes__c}" label="" id="notesId"/> </td>
                            </tr>
                            <apex:variable var="rowNumber" value="{!rowNumber+1}" />
                        </apex:repeat>
                    </table>
                    <script>
                         $(document).ready(function () {
                          $("select[id$='relationId']").attr("disabled", "disabled");
                          $("select[id$='strengthId']").attr("disabled", "disabled");
                          $("textarea[id$='notesId']").attr("disabled", "disabled");
                         
                          });
                          function enableTextbox(e,id) {   
                               if(e.checked){ 
                                 $("."+id+'picklist').find('select').attr("disabled",  false);
                                 $("."+id+'textarea').find('textarea').attr("disabled", false);
                               } else {   
                                 $("."+id+'picklist').find('select').attr("disabled",  true);
                                 $("."+id+'textarea').find('textarea').attr("disabled", true);
                               }
                         }
                         $('#searchText').keypress(function(e){ 
                            if (e.keyCode == '13'){
                              searchItems();
                              return false;
                            }
                        });
                       function removeSrchTxt(){
                           document.getElementById('searchText').value = '';
                       }
                       function searchItems(){
                           var chooseObject = document.getElementById('chooseObject').value;
                           var searchText= document.getElementById('searchText').value;
                           searchMyItems(chooseObject,searchText);
                       }
                       
                       function validateSearch(lstSize){
                            if(lstSize == 0)    
                                alert('No items to display');
                       }
                       
                       function AddRelations(lstSize){
                            var valid = false;
                            for(i = 0 ; i < lstSize ; i++){
                                if(document.getElementById('pg:relationsId:relationRepeat:'+i+':chkBoxSelected').checked){
                                    valid = true;
                                }
                            }
                            if(valid){
                                Add();
                                return true;
                            } else {
                                alert('Atleast you should select one item.');
                                return false;
                            }
                        } 
                        $(document).ready(function() {      // used for tabs, changed to kendo tab
                                $("#tabs").kendoTabStrip({
                                    animation:  {
                                        open: {
                                            //effects: "fadeIn"
                                        }
                                    }
                                });
                            });
                    </script>
                </apex:outputPanel>                    
            </apex:form>
        </div>    
            <!--------- End Popup Relation Content ----------->  
            <!--------- Popup Relation Footer ----------->  
        <div class = "modal-relation-btm">
            <div id = "relation-footer">
                <apex:outputPanel id="addTemplate">
                    <button type = "button" class="k-button" onclick = "AddRelations('{!srchRelationship.size}');">Add</button>
                    <button type = "button" class="k-button" onclick = "hideRelationModal();cancelRelation();">Cancel</button>
                </apex:outputPanel>
            </div>  
        </div>      
            <!--------- End Relation Footer ----------->
    </div>
    
        <!--------- Popup ----------->
    <div class = "modal-window">
        <div class = "modal-head">
            <!--------- Popup Note Header -----------> 
            <div class = "modal-plan-header ft-left" id = "note-header">
                Add Note
            </div>
            <!--------- End Popup Note Header -----------> 
            <!--------- Popup Group Member Header -----------> 
            <div class = "modal-plan-header ft-left" id = "groupmember-header" >
                Members of Group 
            </div> 
            <!--------- End Group Member Header ----------->
            
            
            <!--------- Popup Clone Header -----------> 
             <apex:outputPanel > 
            <div class = "modal-plan-header ft-left" id = "copyHeader">
                
                    {!HTMLENCODE(plan.name)}
                
            </div>
            </apex:outputPanel>
            <!--------- End Popup Clone Header ----------->
            <!--------- Popup Task Header -----------> 
            <div class = "modal-plan-header ft-left" id = "task-header">
                New Task
            </div>
            <!--------- End Popup Task Header ----------->
            <!--------- Popup Edit Note Header -----------> 
            <div class = "modal-plan-header ft-left" id = "editnote-header">
                Edit Note
            </div>
          
            
            <!--------- Popup Event Header -----------> 
            <div class = "modal-plan-header ft-left" id = "event-header">
                Edit Event
            </div>
            <!--------- End Event Header ----------->
            <!--------- Popup Event Header -----------> 
            <div class = "modal-plan-header ft-left" id = "edittask-header">
                Edit Task
            </div>
            <!--------- End Event Header ----------->
            
            <!--------- End Popup Edit Note Header ----------->
            <a class = "modal-close" href = "javascript: void(0);" onclick = "hideModal()"></a>
        </div>
        <div class = "modal-content">
                <!--------- Popup Group Member Content ----------->
            <div class = "modal-plan-content" id = "groupmember-body">
                <div id="gridGroupMember"></div>
            </div>
                <!--------- End Popup Group Member Content ----------->
            <!--------- Popup Note Content -----------> 
            <div class = "modal-plan-content" id = "note-body">
                <table cellspacing = "0" cellpadding = "6" class = "modal-tbl">                    
                    <tr>
                        <td class = "cell-left">
                            Subject
                        </td>
                        
                        <td class="">
                            <div class="requiredInput">
                                <div class="requiredBlock cell-right required-input"></div>
                                <input type = "text" id="noteSubject" size="80" maxlength="80" class = "note-input-text" />
                            </div> 
                        </td>
                     </tr>
                    <tr>
                        <td class = "cell-left">
                            Body
                        </td>
                        <td class = "cell-right">
                            <textarea id="noteBody" class = "note-input-textarea"></textarea>
                        </td>
                    </tr>
                    <tr>
                        <td class = "cell-left">
                            Private
                        </td>
                        <td class = "cell-right">
                            <input type = "checkbox" disabled="true" />
                        </td>
                    </tr>
                </table>
            </div> 
                <!--------- End Popup Note Content ----------->
                <!--------- Popup Clone Content ----------->
            <div class = "modal-plan-content" id = "clone-body">
                <table cellspacing = "0" cellpadding = "5" class = "clone-modal-tbl">
                    <tr>
                       <td class = "clone-modal-tcell">
                           <div class = "clone-modal-head">Include</div>
                           <div class = "clone-modal-field">
                               <input type="checkbox" id="items" /> Items
                               <img src = "{!URLFOR($Resource.Images, 'common/icon-help-16x16.png')}" title="Select this to include the same items in this new plan. From topics a new copy will be created." /> 
                           </div>
                           <div class = "clone-modal-field">
                               <input type="checkbox" id="people" /> People
                           </div>
                           <div class = "clone-modal-field">
                               <input type="checkbox" id="task" onclick="showRelationField('task','assignToMeDiv');"/> Task<br/>
                           </div>
                           <div id="assignToMeDiv" class = "clone-modal-field  relate-to-input">
                               <input type="checkbox" id="assignToMe" /> Reassign all tasks to <apex:outputText value=" {!$User.FirstName}" /> <apex:outputText value=" {!$User.LastName}" />
                           </div>
                           <div class = "clone-modal-field">
                                <apex:outputPanel rendered="{!AND(attachmentCount == 0,feedattachmentCount == false)}">
                                    <input type="checkbox" disabled="true" id="attach"  /> Attachments
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!OR(attachmentCount > 0,feedattachmentCount == true)}">
                                    <input type="checkbox" id="attach" /> Attachments
                                </apex:outputPanel>
                               <img src = "{!URLFOR($Resource.Images, 'common/icon-help-16x16.png')}" title="Select this to include the attachments in the copy. A copy of each attachment will be created." /> 
                           </div>
                           <div class = "clone-modal-field">
                               <input type="checkbox" id="relations" /> Relations
                           </div>
                       </td>
                       <td class = "clone-modal-tcell">
                           <div class = "clone-modal-head">Options</div>
                           <div class = "clone-modal-field">
                               <input type="checkbox" id="resetDate" /> Reset Dates
                           </div>
                           <div class = "clone-modal-field">
                               <input type="checkbox" id="relateClone" onclick="showRelationField('relateClone','showRelationValue');" /> Relate copy to original object<br/>
                               <div id="showRelationValue" class = "clone-modal-field">
                                   Relation: &nbsp; <!-- <input type="text" id="relationValue" />--> 
                                   <!-- 26_02_2014 Changed from text to picklist  -->
                                   <select id="relationValue">
                                        <option value=" ">--None--</option>
                                        <option value="Parent">Parent</option>
                                        <option value="Child">Child</option>
                                        <option value="Sibling">Sibling</option>
                                   </select>
                                  
                               </div>
                           </div>
                       </td>
                    </tr>
                </table>
            </div>    
                <!--------- End Popup Clone Content ----------->                
                <!--------- Popup Task Content -----------> 
            <div class = "modal-plan-content" id = "task-body">
                <apex:form id="newtaskForm" >
                    <table cellspacing = "6" cellpadding = "0" class = "modal-tbl">
                        <tr>
                            <td class = "cell-left modal-label">
                                <span class = "top-pad">Subject</span>
                            </td>
                            <td class = "cell-right required-input" colspan = "3" style="width:637px">
                                <apex:inputField styleClass="task-modal-text" style="width:587px" id="subjectForTask" value="{!newTaskToDecision.Subject}" />
                            </td>
                        </tr>
                        <tr>
                            <td class = "cell-left modal-label">
                                Assigned To
                            </td>
                            <td class = "cell-right required-input">
                                <apex:inputField id="assignTo" value="{!newTaskToDecision.OwnerId}" />
                            </td>
                             <td class = "cell-left modal-label">
                                Status
                            </td>
                            <td class = "cell-right">
                                <apex:inputField id="status" style="width:160px" value="{!newTaskToDecision.status}" />
                            </td>
                        </tr>
                        <tr>
                            <td class = "cell-left modal-label">
                                Due Date
                            </td>
                            <td class = "cell-right">
                                <apex:inputField id="dueDate" value="{!newTaskToDecision.ActivityDate}" />
                            </td>
                            <td class = "cell-left modal-label">
                                Priority
                            </td>
                            <td class = "cell-right">
                                <apex:inputField id="priority" style="width:160px" value="{!newTaskToDecision.Priority}" styleClass="prioritystyle"/>
                            </td>
                        </tr>
                        <tr>
                            <td class = "cell-left modal-label">
                                Related To
                            </td>
                            <td class = "cell-left" colspan="3">
                                <!-- <script>
                                    
                                     var newWin=null; 
                                     function openLookupPopup(name, id)
                                     {
                                          var url="/apex/LookupPopup?namefield=" + name + "&idfield=" + id + "&searchObj=" + document.getElementById('selectedObj').value + "&searchText=" + document.getElementById('activityPage:taskWorkBenchComponent:workBenchTaskView:newtaskForm:recName').value;
                                          newWin=window.open(url, 'Popup','height=500,width=600,left=100,top=100,resizable=no,scrollbars=yes,toolbar=no,status=no');
                                          if (window.focus) 
                                          {
                                           newWin.focus();
                                          }
                                         return false;
                                      }
                                     function closeLookupPopup()
                                     {
                                        if (null!=newWin)
                                        {
                                           newWin.close();
                                        }  
                                     }
                                     function clearLookUpValue(){
                                        //document.getElementById('activityPage:taskWorkBenchComponent:workBenchTaskView:newtaskForm:recId').value = '';
                                        //document.getElementById('activityPage:taskWorkBenchComponent:workBenchTaskView:newtaskForm:recName').value = '';
                                     }
                                     function removeHiddenData(){
                                        //document.getElementById('activityPage:taskWorkBenchComponent:workBenchTaskView:newtaskForm:recId').value = '';
                                     }
                                </script>
                                <div style="float:left">
                                    <select Id="selectedObj">
                                        <option value="Decisions">Decisions</option>
                                        <option value="Plans" >Plans</option>
                                        <option value="Accounts" >Accounts</option>
                                        <option value="Contacts" >Contacts</option>
                                    </select>
                                    <apex:inputHidden value="{!recId}" id="recId" /> &nbsp;&nbsp;&nbsp;&nbsp;
                                    <apex:inputText style="width:480px" value="{!recName}" id="recName"  disabled="false" styleClass="LookUp" onchange="removeHiddenData();"/> &nbsp;
                                    <img src="/s.gif" onclick="openLookupPopup('{!$Component.recName}', '{!$Component.recId}'); return false" style="cursor:pointer;" class="lookupIconOn"  /> &nbsp;
                                </div>-->
                                <script>
                                    function expandCollapse(toBeExpandCollapse, expandCollapseImage) {
                                        var displayStyle = $('#'+toBeExpandCollapse).css('display');        
                                        if(displayStyle == 'block'){
                                            $('#'+expandCollapseImage).css('backgroundPosition','0 -8px');
                                            $('#'+toBeExpandCollapse).css('display','none');
                                        }else{
                                            $('#'+expandCollapseImage).css('backgroundPosition','0 0');
                                            $('#'+toBeExpandCollapse).css('display','block');
                                        }
                                        return true;
                                    } 
                                </script>
                                <div style="float:left"> 
                                    <apex:inputField Value="{!newTaskToDecision.whatId}" id="whatId" />
                                </div>
                            </td>
                        </tr>
                        <tr> 
                            <td class = "cell-left modal-label">
                                Comments
                            </td>
                            <td class = "cell-right" colspan = "3">
                                <apex:inputField id="comments" style="width:583px !important;" value="{!newTaskToDecision.Description}" />
                            </td>
                        </tr>
                        <tr>
                            <td colspan="4">
                                <div class = "tabs-gen-head" style="margin-left:53px;"> 
                                    <a href = "javascript: void(0);" class = "expandCollapseDetails ft-left" id = "taskDetails-btn" onclick = "expandCollapse('taskDetails-view','taskDetails-btn')"></a>  
                                    <h3 class = "ft-left"><span class="details-span">Details</span></h3>
                                </div>
                                <div id="taskDetails-view" style="width:700px;display:none">
                                    <div style="width:727px">
                                        <div>
                                            <div class="complexity-label-div" >Complexity</div>
                                            <div style="float:left;margin-left: 20px;"><apex:inputField style="width:156px;margin-left:4px" value="{!newTaskToDecision.Complexity__c}" id="complexityId" /></div>
                                        </div>
                                        <div class="ft-right">
                                            <div class="skill-level-div" >Skill Level</div>
                                            <div style="float: left;"><apex:inputField style="width:153px;margin-right: 3em" value="{!newTaskToDecision.Skill_Level__c}" Id="skilllevelId"/></div>
                                        </div>  
                                    </div>
                                    <br/><br/>
                                    <div style="width:729px">
                                        <div>
                                            <div class="estimated-hours" >Estimated Hours</div>
                                            <div style="float:left;margin-left: 20px;"><apex:inputField style="margin-left:4px" value="{!newTaskToDecision.Estimated_Hours__c}" onkeypress="return isNumberKey(event)" Id="estimatedhourId"/></div>
                                        </div>
                                        <div class="ft-right">
                                            <div class="actual-hours">Actual Hours</div>
                                            <div style="float: left;margin-right: 0px;"><apex:inputField value="{!newTaskToDecision.Actual_Hours__c}" onkeypress="return isNumberKey(event)" Id="actualhour" style="margin-right: 3em;"/></div>
                                        </div>  
                                    </div>
                                     <br/><br/>
                                    <div style="width:729px">
                                        <div>
                                            <!--<div class="newtaskpopup-Name toClear">Name</div>
                                            <div  style="float:left;margin-left: 24px;margin-top: 8px;"><apex:inputField id="whoId"  value="{!newTaskToDecision.whoid}" style="margin-left:0.4em;"/></div>-->
                                        </div>
                                    </div>
                                </div>
                            </td>    
                        </tr>
                        <tr>
                            <td class = "cell-left  modal-label">
                                Send Notification Mail
                            </td>
                            <td colspan="3" class = "cell-right" >
                                <input id="sendingNotification" type = "checkbox" />&nbsp;<span style="color: #4A4A56;font-weight: bold;font-size: 11px;margin-left:220px">Reminder</span>&nbsp;<apex:inputField value="{!newTaskToDecision.IsReminderSet}" id="setReminder" onclick="disabledate(this);"/><apex:inputField value="{!newTaskToDecision.ReminderDateTime}" id="setReminderDate"/>
                            </td>
                        </tr> 
                    </table>
                    <apex:actionFunction name="saveThisTask" action="{!createNewTaskForDecision}" oncomplete="getAllTaskEvent('{!JSENCODE(plan.Id)}');" reRender="newtaskForm" >
                        <apex:param name="decisionId" id="decisionId" value="" />
                        <apex:param name="sendingNotification" id="sendingNotification" value="" />
                    </apex:actionFunction>
                    <apex:actionFunction name="saveThisTaskAsRelation" action="{!createNewTaskForPlanAsRelation}" oncomplete="getAllTaskRelation('{!JSENCODE(plan.Id)}');chatterRerender();" rerender="newtaskForm">
                        <apex:param name="planIdAsRelation" id="planIdAsRelation" value="" />
                        <apex:param name="sendingNotification" id="sendingNotificationAsRelation" value="" />
                    </apex:actionFunction>
                    <apex:actionFunction name="fetchDecisionVal" action="{!intialiseTask}" oncomplete="showModal('task-header','task-body','plan-footer-task');" rerender="newtaskForm">
                        <apex:param name="decisionId" value="" />
                    </apex:actionFunction>
                    <apex:actionFunction name="fetchDecisionValOnActitvites" action="{!intialiseTask}" oncomplete="showModal('task-header','task-body','plan-Activityfooter-task');" rerender="newtaskForm">
                        <apex:param name="decisionId" value="" />
                    </apex:actionFunction>
                    <apex:actionFunction name="intialisePlanTask" action="{!intialisePlanTask}" oncomplete="showModal('task-header','task-body','plan-footer-taskrelation');" rerender="newtaskForm" />
                </apex:form>
            </div> 
                <!--------- End Popup Task Content ----------->
                <!--------- Popup Edit Note Content -----------> 
            <div class = "modal-plan-content" id = "editnote-body">
                <input type = "hidden" id = "noteHidden" value = "" />
                <table cellspacing = "0" cellpadding = "6" class = "modal-tbl">                    
                    <tr>
                        <td class = "cell-left">
                            Subject
                        </td>
                        <td class="cell-right required-input" id="subjectWrap">
                            <div class="requiredInput">
                                <div class="requiredBlock"></div>
                                <input type = "text" maxlength="80" size="80" id = "noteSubject" class = "note-input-text" />
                            </div> 
                        </td>
                    </tr>
                    <tr>
                        <td class = "cell-left">
                            Body
                        </td>
                        <td class = "cell-right" id = "bodyWrap">
                            <textarea id = "noteBody" class = "note-input-textarea"></textarea>
                        </td>
                    </tr>
                    <tr>
                        <td class = "cell-left">
                            Private
                        </td>
                        <td class = "cell-right">
                            <input type = "checkbox" disabled = "disabled" />
                        </td>
                    </tr>
                    <tr>
                        <td class = "cell-left">
                            Last Modified By
                        </td>
                        <td class = "cell-right">
                            <span class = "note-modified-name ft-left"></span>
                            <span class = "note-modified-date ft-left"></span>
                        </td>
                    </tr>
                    <tr>
                        <td class = "cell-left">
                            Owned By
                        </td>
                        <td class = "cell-right">
                            <span class = "note-owner-name ft-left"></span>
                            <span class = "note-owner-date ft-left"></span>
                        </td>
                    </tr>
                </table>
            </div> 
                <!--------- End Popup Edit Note Content ----------->
                
                <!--------- Popup Issue Content ----------->
          
                <!--------- End Popup Issue Content ----------->
                
            <!--------- Popup Event  Content ----------->
            <div class = "modal-plan-content" id = "event-body">
                <apex:form id="popupforEvent">
                
                <table cellspacing = "1" cellpadding = "5" class = "modal-tbl">
                    <tr>
                       <td class = "cell-left modal-fld-width">
                           Subject
                       </td>
                       <td colspan = "3" class = "cell-right required-input">
                           <apex:inputField id="subject" styleClass="note-input-text" value="{!event.Subject}"  />  
                       </td>
                    </tr>
                    <tr>
                       <td class = "cell-left modal-fld-width">
                           Assign To
                       </td>
                       <td colspan = "3" class = "cell-right required-input">
                           <apex:inputField id="assignTo" value="{!event.OwnerId}" />   
                       </td>                       
                    </tr>
                    <tr>
                       <td class = "cell-left modal-fld-width">
                           Start DateTime
                       </td>
                       <td class = "cell-right required-input">
                           <apex:inputField value="{!event.StartDateTime}" id="eventStartDateTime"/>   
                       </td>
                    </tr>
                    <tr>
                       <td class = "cell-left modal-fld-width">
                           End DateTime
                       </td>
                       <td class = "cell-right required-input">
                           <apex:inputField value="{!event.EndDateTime}" id="eventEndDateTime"/>
                       </td>
                    </tr>
                    <tr>
                       <td class = "cell-left modal-fld-width">
                           Comments
                       </td>
                       <td colspan="3" class = "cell-right">
                           <apex:inputField styleClass="note-input-textarea" id="eventComment" value="{!event.Description}" />
                       </td>                      
                    </tr>
                </table>
                <apex:actionFunction name="updateEvent" action="{!updatedEvent}" oncomplete="removeAllValues();getAllTaskEvent('{!JSENCODE(plan.Id)}');"  reRender="popupforEvent,eventPanel" >
                </apex:actionFunction>
                <apex:actionFunction name="editThisEvent" action="{!toBeUpdatedEvent}" immediate="true" reRender="popupforEvent" oncomplete="showModal('event-header','event-body','plan-footer-event');hideLoader();">
                     <apex:param name="eventId" id="eventId" value="" />
                 </apex:actionFunction>
                </apex:form>
            </div>    
                <!--------- End Popup Event Content -----------> 
                <!--------- Popup EditTask Content ----------->
            <div class = "modal-plan-content" id = "edittask-body">
                <apex:form id="editTaskForm" >
                    <table cellspacing = "6" cellpadding = "0" class = "modal-tbl">
                        <tr>
                            <td class = "cell-left modal-fld-width">
                                <span class = "top-pad">Subject</span>
                            </td>
                            <td class = "cell-right required-input" colspan = "3">
                                <apex:inputField styleClass="note-input-text" id="subjectForTask" value="{!updatedTask.Subject}" />
                            </td>
                        </tr>
                        <tr>
                            <td class = "cell-left modal-fld-width">
                                Assigned To
                            </td>
                            <td width = "220px" class = "cell-right required-input">
                                <apex:inputField id="assignTo" value="{!updatedTask.OwnerId}" />
                            </td>
                            <td class = "cell-left modal-fld-width">
                                Status
                            </td>
                            <td class = "cell-right">
                                <apex:inputField value="{!updatedTask.Status}" />
                            </td>
                        </tr>
                        <tr>
                            <td class = "cell-left modal-fld-width">
                                Due Date
                            </td>
                            <td class = "cell-right">
                                <apex:inputField id="dueDate" value="{!updatedTask.ActivityDate}" />
                            </td>
                            <td class = "cell-left modal-fld-width">
                                Priority
                            </td>
                            <td class = "cell-right">
                                <apex:inputField id="priority" value="{!updatedTask.Priority}" />
                            </td>
                        </tr>
                        <tr>
                            <td class = "cell-left modal-fld-width">
                                Comments
                            </td>
                            <td class = "cell-right" colspan = "3">
                                <apex:inputField id="comments"  styleClass="note-input-textarea" value="{!updatedTask.Description}" />
                            </td>
                        </tr>
                        <tr>
                            <td class = "cell-left mid-align">
                                Send Notification Mail
                            </td>
                            <td class = "cell-right" colspan = "3">
                                <input id="sendingNotificationTask" type = "checkbox" /><div class = "task-modal-hidden" id="hiddenDecisionId"></div>
                            </td>
                        </tr>
                    </table>
                    <apex:actionFunction name="updateTask" action="{!updatedTask}" oncomplete="getAllTaskEvent('{!JSENCODE(plan.Id)}');hideModal();chatterRefresh();"  reRender="editTaskForm" >
                        <apex:param name="sendingNotification" id="sendingNotification" value="" />
                    </apex:actionFunction>
                    <apex:actionFunction name="editThisTask" action="{!toBeUpdatedTask}" immediate="true" reRender="TaskpopupComponantId" oncomplete="hideLoader();">
                        <apex:param name="taskId" id="taskId" value="" />
                        <apex:param name="isEditable" id="isEditableId" value="" />
                        <apex:param name="modeType" id="modeTypeId" value="" />
                    </apex:actionFunction>
                    
                    
                </apex:form>
            </div>    
                <!--------- End Popup EditTask Content ----------->   
        </div>
        <div class = "modal-btm">
            <!--------- Popup Popup Group Member Footer ----------->  
           <div class = "modal-footer" id = "plan-footer-groupmember">                   
                <button type = "button" class="k-button" onclick = "hideModal()">Close</button>
           </div>
           <!--------- End Popup Popup Group Member Footer ----------->  
                <!--------- Popup Note Footer ----------->  
            <div class = "modal-footer" id = "plan-footer-note">
                <button type = "button" class="k-button" onclick="addNoteItem('{!JSENCODE(plan.Id)}',$('#noteSubject').val(),$('#noteBody').val());">Add Note</button>
                <button type = "button" class="k-button" onclick = "hideModal();clearNoteValue();">Cancel</button>
            </div>    
                <!--------- End Popup Note Footer -----------> 
                <!--------- Popup Clone Footer ----------->  
            <div class = "modal-footer" id = "plan-footer-clone">
                <button type = "button" class="k-button" onclick="clonePlan($('#items').is(':checked'),$('#people').is(':checked'),$('#task').is(':checked'),$('#attach').is(':checked'),$('#relations').is(':checked'),$('#resetDate').is(':checked'),$('#relateClone').is(':checked'),$('#assignToMe').is(':checked'),$('#relationValue').val());hideModal();">Copy</button>
                <button type = "button" class="k-button" onclick = "hideModal();removeChecks();" >Cancel</button>
            </div>    
                <!--------- End Popup Clone Footer -----------> 
                <!--------- Popup Task Footer ----------->  
            <div class = "modal-footer" id = "plan-footer-task">
                <button type = "button" class="k-button" onclick="saveNewTaskForDecision()">Save</button>
                <button type = "button" class="k-button" onclick = "hideModal();" >Cancel</button>
            </div>    
                <!--------- End Popup Task Footer -----------> 
            <!--------- Popup Task Footer ----------->  
            <div class = "modal-footer" id = "plan-Activityfooter-task">
                <button type = "button" class="k-button" onclick="saveNewTaskForPlan('{!plan.Id}')">Save</button>
                <button type = "button" class="k-button" onclick = "hideModal();" >Cancel</button>
            </div>    
                <!--------- End Popup Task Footer -----------> 
                <!--------- Popup Edit Note Footer ----------->  
            <div class = "modal-footer" id = "plan-footer-editnote">
                <button type = "button" class="k-button" onclick="editNote('{!JSENCODE($CurrentPage.parameters.Id)}')">Save</button>
                <button type = "button" class="k-button" onclick = "hideModal();setTextAreaSize();">Cancel</button>
            </div>    
                <!--------- End Popup Edit Note Footer -----------> 
                <!--------- Popup Issue Footer ----------->  
          
                <!--------- End Popup Issue Footer ----------->
            
                <!--------- Popup Event Footer ----------->  
            <div class = "modal-footer" id = "plan-footer-event">
                <button type = "button" class="k-button" onclick = "updateEventPlan();">Save</button>
                <button type = "button" class="k-button" onclick = "hideModal()">Cancel</button>
            </div>    
                <!--------- End Popup Event Footer ----------->
                <!--------- Popup Event Footer ----------->  
            <div class = "modal-footer" id = "plan-footer-edittask">
                <button type = "button" class="k-button" onclick = "updateValidateTask();" >Save</button>
                <button type = "button" class="k-button" onclick = "hideModal()" >Cancel</button>
            </div>    
                <!--------- End Popup Event Footer ----------->
                <!--------- Popup Event Footer ----------->  
            <div class = "modal-footer" id = "plan-footer-taskrelation">
                <button type = "button" class="k-button" onclick = "saveNewTaskForPlanAsRelation();">Save</button>
                <button type = "button" class="k-button" onclick = "hideModal();">Cancel</button>
            </div>    
                <!--------- End Popup Event Footer ----------->                
        </div>
    </div>  
        <!--------- End Popup -----------> 
        
       <!----------- Popover Group -------------->
     <div class = "popover-social">
         <div class = "popover-arrow-hold"><div class = "popover-social-arrow"></div></div>
         <div class = "popover-social-top">Group Members</div>
         <div class = "popover-social-content"></div>
         <div class = "popover-social-btm">Click on the link to see more</div>
     </div>
         <!----------- End Popover Group -------------->   
           
    <div class = "popover-sf border-pink" id = "item-call">
        <div class = "popover-sf-arrow"></div>
        <div class = "popover-title border-btm-pink" id="callout-border">
        </div>
        <table cellspacing = "0" cellpadding = "0" class = "page-block-tbl" id = "item-hover-tbl">
            <tr>
                <td class = "cell-left gen-block-cell fld-title1 left-width popover-label"></td>
                <td class = "gen-block-cell fld-value1"></td>
            </tr>
            <tr>
                <td class = "cell-left gen-block-cell fld-title2 left-width popover-label"></td>
                <td class = "gen-block-cell fld-value2"></td>
            </tr>
            <tr>
                <td class = "cell-left gen-block-cell fld-title3 left-width popover-label"></td>
                <td class = "gen-block-cell fld-value3"></td>
            </tr>
        </table>
    </div>    
        <!--------- End Wrapper ----------->
        <!--  ------------ Commented bcoz this design is not required for activities warning Confirmation Box -------------- 
        <div class = "confirm-box">
            <div class = "confirm-head">
                <img class = "ft-left" src = "{!URLFOR($Resource.Images, 'common/icon-warning-24x24.png')}" />
                <h3 class = "ft-left">Warning</h3>
                <a href="javascript: void(0);" class = "confirm-close ft-right" onclick="cancelDeletePopup();"></a>
             </div>
             <div class = "confirm-body">
                <input type="hidden" id="planIdOnActivities" />
                <input type="hidden" id="taskEventIdOnActivities" />
                <input type="hidden" id="isDeletableOnActivities" />
                <input type="hidden" id="typeOnActivities" />
                 You are about to permanently Delete this activity.<br />
                 Are you sure?
             </div>
             <div class = "confirm-btm">
                 <button type = "button" onclick = "deleteActivity();">Ok</button>
                 <button type = "button" onclick = "cancelDeletePopup();">Cancel</button>
             </div>
        </div>      
           
           ------------ End Confirmation Box --------------  -->
        <!-- Delete warning pop up on activities   --> 
        <div class = "modal-window-activitywarning">  
                <!--------- Popup activity warning Header 
            <div class = "modal-activitywarning-head">    
                <div class = "modal-decision-header ft-left" id = "activitywarning-header">
                   Warning!
                </div>                        
                <a class = "modal-close" href = "javascript: void(0);" onclick = "cancelDeletePopup();"></a> 
            </div> 
               End activity warning Header ----------->   
                <!--------- Popup activity warning Content ----------->
            <div class = "modal-activitywarning-content">
                <p class= "activitywarning-help">
                    <input type="hidden" id="planIdOnActivities" />
                    <input type="hidden" id="taskEventIdOnActivities" />
                    <input type="hidden" id="isDeletableOnActivities" />
                    <input type="hidden" id="typeOnActivities" />
                    You are about to permanently delete this activity.<br/>
                    Are you sure?
                </p>
            </div>    
                <!--------- End activity warning Content ----------->  
                <!--------- Popup activity warning Footer ----------->  
            <div class = "modal-activitywarning-btm">
                <div id = "activitywarning-footer">
                    <button type = "button" class="k-button" onclick = "deleteActivity();">Ok</button>
                    <button type = "button" class="k-button" onclick = "cancelDeletePopup();">Cancel</button>
                </div>  
            </div>      
                <!--------- End activity warning Footer ----------->
       </div>
        <!-- End delete warning pop up on activities   --> 
       <!--  Mass Edit Task pop up -->
            <div class = "modal-window-massEditing" >  
                    <!--------- Popup Phase backward Header  
                    <div class = "modal-activitywarning-head">    
                        <div class = "modal-decision-header ft-left" id = "activitywarning-header">
                           Edit Tasks
                        </div>                        
                        <a class = "modal-close" href = "javascript: void(0);" onclick = "cancelMassEditPopup();"></a> 
                    </div> 
                          End Phase backward Header ----------->   
                        <!--------- Popup Phase backward Content ----------->
                        <div style="margin:auto;">
                    <div class = "modal-activitywarning-content">
                        <apex:form id="taskFormId">
                            <table style="margin-left: 35px;">  
                                <tr>    
                                <td class="cell-left modal-label">  
                                        <span class = "top-pad">Re-assign To</span> 
                                    </td>
                                    <td class="cell-right">
                                        <apex:inputField id="assignTo" value="{!updatedTask.OwnerId}" />
                                    </td>
                                </tr>
                                <tr>
                                    <td class="cell-left modal-label">
                                        <span class = "top-pad">Change Due Date To </span>
                                    </td>
                                    <td class="cell-right">
                                        <apex:inputField id="updateDueDate" value="{!updatedTask.ActivityDate}" />
                                    </td>
                                </tr>
                                <tr>
                                    <td class="cell-left modal-label">
                                        <span class = "top-pad">Change Status To</span>  
                                    </td>
                                    <td class="cell-right">
                                        <!--<apex:inputField id="updateStatus" value="{!updatedTask.Status}" />-->
                                        <select id="updateStatus" onchange="dropDownColor();" style="color:grey">
                                          <option value="--None--" style="color:grey">--None--</option>
                                          <apex:repeat value="{!lstStatusValues}" var="status">    
                                              <option value="{!status}" style="color:black">{!status}</option>
                                          </apex:repeat>
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="cell-left modal-label">
                                        <span class = "top-pad">Change Priority To </span>  
                                    </td>
                                    <td class="cell-right">
                                        <!--<apex:inputField id="updatePriority" value="{!updatedTask.Priority}" />-->
                                        <select id="updatePriority" style="color:grey" onchange="dropDownColor();">
                                          <option value="--None--" style="color:grey">--None--</option>
                                          <apex:repeat value="{!lstPriorityValues}" var="priority">    
                                              <option value="{!priority}" style="color:black">{!priority}</option>
                                          </apex:repeat>
                                        </select>
                                    </td>
                                </tr>
                            </table>
                             <div style="font-size: 10px;color: grey;margin-top: 10px;"><b>* Clicking on save button will apply all these  changes to the selected tasks.</b></div>
                        </apex:form>
                    </div>
                    </div>
                    <div class="modal-activitywarning-btm">
                     <div id = "massdeletewarning-footer">
                        <button type = "button" class="k-button" onclick = "editMassTask('{!plan.Id}');">Save</button>
                        <button type = "button" class="k-button" onclick = "cancelMassEditPopup();">Cancel</button>
                    </div>  
                    </div>   
               </div> 
         <!--------- End Mass Edit Task pop up -----------> 
        <!-- mass Delete warning pop up on activities   --> 
       <div class = "modal-window-massDelete">  
               <!--------- Popup activity warning Header 
            <div class = "modal-activitywarning-head">    
                <div class = "modal-decision-header ft-left" id = "massdeletewarning-header">
                   Warning!
                </div>                        
                <a class = "modal-close" href = "javascript: void(0);" onclick = "cancelMassDeletePopup();"></a> 
            </div> 
                End activity warning Header ----------->   
                <!--------- Popup activity warning Content ----------->
           <div class = "modal-activitywarning-content">
                <p class= "activitywarning-help">
                    You are about to permanently delete the selected activities!<br/>
                    Are you sure?
               </p>
            </div>    
               <!--------- End activity warning Content ----------->  
                <!--------- Popup activity warning Footer -----------> 
                <div class="modal-activitywarning-btm"> 
                <div id = "massdeletewarning-footer">
                    <button type = "button" class="k-button" onclick = "massdeleteActivity('{!plan.Id}');">Delete</button>
                    <button type = "button" class="k-button" onclick = "cancelMassDeletePopup();">Cancel</button>
                </div>  
                </div>
            </div>      
                <!--------- End activity warning Footer ----------->
        <!-- mass End delete warning pop up on activities   -->
        <!--  No permission alert Task pop up -->
                <div class = "modal-window-noPermission " >  
                    <!--------- Popup Phase backward Header 
                    <div class = "modal-activitywarning-head">    
                        <div class = "modal-decision-header ft-left" id = "activitywarning-header">
                           Warning!
                        </div>                        
                        <a class = "modal-close" href = "javascript: void(0);" onclick = "cancelPermissionAlertPopup();"></a> 
                    </div> 
                        End Phase backward Header ----------->   
                        <!--------- Popup Phase backward Content ----------->
                    <div class = "modal-activitywarning-content">
                    <p class= "activitywarning-help">
                       You need additional permissions to delete all the records you have selected.
                    </p>
                </div> 
                <div class="modal-activitywarning-btm">
                     <div id = "vetorejection-footer">
                        <button type = "button" class="k-button" onclick = "cancelPermissionAlertPopup();">Ok</button>
                    </div>     
                    </div>
                </div> 
          <!--------- End No permission alert Task pop up -----------> 
        
     </body>
   
    <!-- Javascripts for Kebdo table -->
    <script>
        var div1= $(window);
        var wrapHeights = div1.height();
        
         var div = $('.k-grid-content'); 
         wrapScreenHeight = div.height(),
         wrapHeight = div.outerHeight(),
         listHeight = div.find('tbody').outerHeight(); 
        
        $(document).ready(function(){ 
         div1 = $(window);
         wrapHeights = div1.height();
         
         div = $('.k-grid-content');
         wrapScreenHeight = div.height(),
         wrapHeight = div1.outerHeight(),
         listHeight = div.find('tbody').outerHeight(); 
         
         
         
          
        })
        
        
        
       
        // Date editior for Activites
        function dateTimeEditorforActivities(container, options) {
            if( options.model.isTask == 'Task' ) {
                
                var dueDateFormat =options.model.dueDate;
                //$('<input data-text-field="' + options.field + '" data-value-field="' + options.field + '" data-bind="value:' + options.field + '" data-format="' + options.format + '"/>')
                $('<input data-text-field="' + dueDateFormat + '" data-value-field="' + dueDateFormat + '" data-bind="value:' + options.field + '" data-format="'+ options.format+'"/>')
                        .appendTo(container)
                        .kendoDatePicker({});
            } else {
                //$('<input data-text-field="' + options.field + '" data-value-field="' + options.field + '" data-bind="value:' + options.field + '" data-format="' + options.format + '"/>')
                $('<input data-text-field="' + 'dueDate' + '" data-value-field="' + 'dueDate' + '" data-bind="value:' + options.field + '" data-format="' + options.format + '"/>')
                    .appendTo(container)
                    .kendoDateTimePicker({
                         value:new Date()
                    });
            }
        }
        
        
        
        // Status Dropdown
         function statusDropDownEditor(container, options) {
            if( options.model.isTask == 'Task' ) {
                $('<input data-text-field="StatusName" data-value-field="StatusName" data-bind="value:' + options.field + '"/>' )
                .appendTo(container)
                .kendoDropDownList({
                    height:250,
                    autoBind: false,
                    dataSource: statusValue
                });
            }
        }
        //values for work view skill and complexity fields
        var complexityValues = [{!taskComplexityPicklist}];
        var skillValues = [{!taskskillPicklist}];
        //skills drop down implemenattion
        function skillsDropDownEditorWork(container, options) {
            if( options.model.Type == 'Task' ) {
                $('<input data-text-field="skillName" data-value-field="skillName" data-bind="value:' + options.field + '"/>' )
                .appendTo(container)
                .kendoDropDownList({
                    height:250,
                    autoBind: false,
                    dataSource:skillValues
                });  
            }
        }
        //complexity drop down implemenattion
        function complexityDropDownEditorWork(container, options) {
            if( options.model.Type == 'Task' ) {
                $('<input data-text-field="complexityName" data-value-field="complexityName" data-bind="value:' + options.field + '"/>' )
                .appendTo(container)
                .kendoDropDownList({
                    height:250,
                    autoBind: false,
                    dataSource: complexityValues 
                });
            }
        }
        function statusDropDownEditorWork(container, options) {
            if( options.model.Type == 'Task' ) {
                $('<input data-text-field="StatusName" data-value-field="StatusName" data-bind="value:' + options.field + '"/>' )
                .appendTo(container)
                .kendoDropDownList({
                    height:250,
                    autoBind: false,
                    dataSource: statusValue
                });
            }
        }
        function priporityDropDownEditor(container, options) {
            if( options.model.isTask == 'Task' ) {
                $('<input data-text-field="PriorityName" data-value-field="PriorityName" data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    autoBind: false,
                    dataSource: priorities
                });
            }
        }
        var  prioritiesDecoded = $('<div/>').html('{!HTMLENCODE(taskPriorityPicklist)}').text();
        var priorities = JSON.parse( '['+prioritiesDecoded+']')
        var types = [
            { typesName: "Inactivity" }, 
            { typesName: "Quality"}, 
            { typesName: "Lack of Resources" }, 
        ];
        
        var  statusValueDecoded = $('<div/>').html('{!HTMLENCODE(taskStatusPicklist)}').text();
        var statusValue  = JSON.parse( '['+statusValueDecoded+']')
        
          // Kendo table overview enabled with autoSync attribute for auto save functionality almost same as old view 1
          function  kendoItemViewOverview (gridData) {
            var draggableItem = {!JSENCODE(peopleEditPermission)} == true ?  "tbody > tr:not(.k-grid-edit-row) td:nth-child(2) ,tbody > tr:not(.k-grid-edit-row) td:nth-child(1)" :  "tbody >tr > tr";
             
            // assign number of records on tab
            if(gridData != null)
                $('.items-tab').html('('+gridData.length+')');
            
            //$('#durTotal').css('display','none');
            var data1 = gridData;
            
            function SortByValue1(x,y) {
                                  return x.Position- y.Position; 
                           }
            if(data1 != null){
               data1.sort(SortByValue1);
            }
            
            $.ajaxSetup({ cache: false }); 
            
            // new way or style
            var dataSource = new kendo.data.DataSource({
                autoSync: true,    
                transport: {  
                    read: function(e) {  
                        dataSource.sync();
                        e.success(data1);
                    },
                    
                    update: function(e) {  
                        var t = JSON.stringify(e);
                        var modifiedDataForKendo = parsingModifieData(t);
                        e.success();
                    }
                 },
                 batch : true,
                 schema: {
                    model: {
                        id: "Id",
                        fields: {
                            Id: { type: "string", editable: false },
                            Name: { type: "string" , editable: false  },
                            isDeletable: { type: "boolean" , editable: false},
                            isReadable : { type: "boolean" , editable: false},
                            actionClassName : { type: "string"},
                            actionClassNameDecision : { type: "string"},
                            Type: {type:"string", editable:false},
                            Position: { type: "number"  },
                            Minutes: { type: "number" ,validation: { max: 59, min : 0 } },
                            Hours: { type: "number" ,validation: { max: 23, min : 0 } },
                            Days : { type: "number" ,validation: { max: 999, min : 0 } },
                            Owner: { type: "string", editable: false },
                            OwnerId: { type: "string", editable: false },
                            canUserCreateTask: {type: "string", editable : false},
                            description: { type: "string", 
                                validation: { 
                                    maxlength:
                                        function(input) { 
                                            if (input.val().length > 255) {
                                               input.attr("data-maxlength-msg", "Max length is 255");
                                               return false;
                                            }                                   
                                            return true;
                                        }
                                } 
                          }
                        }
                    }
                }
            });
            
            var isEdit = false;
            var peopleEditPermissionClass =  '{!if( peopleEditPermission == 'true','grid-drag','grid-drag-disabled' )}';
            var dragfilter =  '{!if( peopleEditPermission == 'true','>tbody >tr ','>tbody >tr > tr' )}';
             gridOverview = $("#planItemViewOverview").kendoGrid({
                
                dataSource: dataSource, 
                scrollable: true, 
                sortable: false,
                resizable: true,
                navigatable: false,
                edit:function (e) {  
                       // All edit will check the field is accessable or not
                       // alternative (if you don't have the name attribute in your editable):
                        var columnIndex = this.cellIndex(e.container);
                        var fieldName = this.thead.find("th").eq(columnIndex).data("field");
                        if (fieldName == 'Progress') {
                            this.closeCell(); // prevent editing
                        }
                }, 
                editable: {!JSENCODE(peopleEditPermission)},
                 toolbar:  ["save","cancel"],resizable: true,  /* ---------------- commented this code to remove duration column and its contents ---- sendil --- 08-07-2014 */
                                       
                columns: [
                
                    {   // ======== added div with class=grid-drag for drag icon =========== //
                        field: "",
                        title: "",   
                        template: "<p class='handler'> ï¿½</p>",
                        width: 24,
                        sortable: false
                    },
                    
                    {   // ======== added div with class=grid-drag for drag icon =========== //
                        field: "Id",
                        editable:false,
                        title: "Action",   
                        template: "<div class='editButtonGroupDiv'><div class='grid-action' id='Delete'><img class='#:actionClassName#' onclick=\"deleteItemViewOne('#:Id#','#:isDeletable#')\" src=/#:delItem# title='Delete'></div> <div class='grid-action'><img src=/#:newTaskFromDecision# class='#:decisionClass#' onclick=\"createNewTaskOrIssues(event,'#:itemRecordId#','#:Name#','#:Type#','#:canUserCreateTask#')\" title='#:newTaskFromDecisionIconTitle#'></div></div>",
                        width: 70,
                        sortable: false
                    },
                    {
                        field: "Progress",
                        title: "Progress",
                        template: "<div style='position:relative'><div id='PIholder#:itemRecordId#'></div></div><div style='background-position:0px  #:  -15*progressValue#px;display: #: (Type== \'Decision\' ? \'block\': \'none\' ) #' id='indicator#:itemRecordId#' class='indicatorPlan' onmouseover=\'showIndicator(event,\"#:itemRecordId#\")\'; onmouseout=\'hideIndicator(\"#:itemRecordId#\")\'; onclick=\'openIndicator(event,\"#:itemRecordId#\",\"#:itemRecordId#\",\"#:piPermission#\"    )\';> </div>",
                        width: 80,
                        sortable: false  
                    }                   
                    ,
                    {
                        field: "Name",
                        title: "Name/Title",
                        //template: '<a onmouseout=\'hideItemDetails()\'; onmouseover=\'showItemDetails(event,"#:Type#","#:Name#","#:popupField1#","#:popupField2#","#:popupField3#","#:popupFieldName1#","#:popupFieldName2#","#:popupFieldName3#")\'; href="/#:itemRecordId#" onclick=\'viewItemClicked("#:itemRecordId#","#:Type#","#:isEditable#");return false\'; ><span  class="#:typeClass#">#:Name#</span></a><div id = "decHidden">#:Type#</div><div id = "decHidden">#:Name#</div><div id = "decHidden">#:popupField1#</div><div id = "decHidden">#:popupField2#</div><div id = "decHidden">#:popupField3#</div><div id = "decHidden">#:popupFieldName1#</div><div id = "decHidden">#:popupFieldName2#</div><div id = "decHidden">#:popupFieldName3#</div>'
                        template : "#=getTemplateItem(e,Type,Name,popupField1,popupField2,popupField3,popupFieldName1,popupFieldName2,popupFieldName2,popupFieldName3,itemRecordId,isEditable,typeClass,isReadable)#"
                     }                   
                    ,{
                        field: "Type",
                        title: "Item Type",
                        width: 80,
                        template: "#:Type#"
                    }
                    ,
                    {
                        field: "Owner",
                        title: "Accountable/<br />Owner",
                        template: "#:Owner#"
                    },
                    {
                        field: "description",
                        title: "Description",
                        template: '<div class = "item-editable"  title="Edit">#=description#</div>'
                    }],
                    columnResize: function(e) {
                     setPosition();setPositionStance();setPositionWorkEstimation();
                  }
            }).data("kendoGrid");
               //define kendo sortable
               gridOverview.table.kendoSortable({
                       filter: dragfilter ,  // filter based on user permission
                       handler:".handler",
                       hint: $.noop,     // define the drag hint
                       cursor: "move",
                       ignore: "td,input,span,div",
                       end:function(){ document.body.style.cursor='default'; },
                       placeholder: function(element) {
                            var holder= element.clone().css('background-color','#C4C4C4').css("opacity", 1).css('outline','2px solid #A2A2A2');   //  set outline for dragged row and opacity
                            holder.find('td:nth-child(1)').find('span').css('background-color','green');//  set grren color for handler
                            return holder;
                        },
                       container: "#planItemViewOverview tbody",
                       
                        change: function(e) {  
                               try{
                                var source; 
                                var dest;  
                                //get source and destination items and extract id and position then send to controller
                                if(e.oldIndex > e.newIndex ){
                                 source=     gridOverview.dataSource.at(e.oldIndex-1)  ; 
                                 dest   =     gridOverview.dataSource.at( e.newIndex -1)   ; 
                                }
                                else{
                                 source=     gridOverview.dataSource.at(e.oldIndex)  ; 
                                 dest   =     gridOverview.dataSource.at( e.newIndex )   ; 
                                } 
                                planItemOrderChanged(source.Id, source.Position, dest.Id, dest.Position);
                               }catch(err){} 
                          }
                    });

            /*  var grid = $("#planItemView1").data("kendoGrid");
            var row = grid.thead.find("tr:eq(0)");
              $(row).find('th:nth-child(1)').attr('colspan','2'); 

            var row = grid.thead;             
               $(row).first().prepend("<tr><th></th><th></th><th></th><th></th><th class='duration' colspan='3'>Duration</th><th></th><th></th></tr>");  */
              
            if(!convertStringToBoolean('{!JSENCODE(peopleEditPermission)}')) {
                $('#itemView1 .k-toolbar').html('');
                $('#itemView1 .k-grid-content .item-editable').removeAttr('title');
                $('#itemView1 .k-grid-content .item-editable').css('cursor','default');
            }
            
            $(".new-item-decision").click(function(e) {
                
                //decisionTitle = '';
                mouseY = e.pageY - 100;
                mouseX = e.pageX - 16;
                $(".smart-menu").css({
                top: mouseY,
                left: mouseX 
                }).fadeIn('slow');
                
            }); 
        }
        
        function getTemplateItem(event,Type,Name,popupField1,popupField2,popupField3,popupFieldName1,popupFieldName2,popupFieldName2,popupFieldName3,itemRecordId,isEditable,typeClass,isReadable){
            if(Type == 'Task' || Type == 'Note'){
                return '<a onmouseout=\'hideItemDetails()\'; onmouseover=\'showItemDetails(event,"'+Type+'","'+Name+'","'+popupField1+'","'+popupField2+'","'+popupField3+'","'+popupFieldName1+'","'+popupFieldName2+'","'+popupFieldName3+'")\'; href="/'+itemRecordId+'" onclick=\'viewItemClicked("'+itemRecordId+'","'+Type+'","'+isEditable+'","'+isReadable+'");return false\'; ><span  class="'+typeClass+'">'+Name+'</span></a><div id = "decHidden">'+Type+'</div><div id = "decHidden">'+Name+'</div><div id = "decHidden">'+popupField1+'</div><div id = "decHidden">'+popupField2+'</div><div id = "decHidden">'+popupField3+'</div><div id = "decHidden">'+popupFieldName1+'</div><div id = "decHidden">'+popupFieldName2+'</div><div id = "decHidden">'+popupFieldName3+'</div>'
            } else {
                return '<a onmouseout=\'hideItemDetails()\'; onmouseover=\'showItemDetails(event,"'+Type+'","'+Name+'","'+popupField1+'","'+popupField2+'","'+popupField3+'","'+popupFieldName1+'","'+popupFieldName2+'","'+popupFieldName3+'")\'; href="/'+itemRecordId+'" ><span  class="'+typeClass+'">'+Name+'</span></a><div id = "decHidden">'+Type+'</div><div id = "decHidden">'+Name+'</div><div id = "decHidden">'+popupField1+'</div><div id = "decHidden">'+popupField2+'</div><div id = "decHidden">'+popupField3+'</div><div id = "decHidden">'+popupFieldName1+'</div><div id = "decHidden">'+popupFieldName2+'</div><div id = "decHidden">'+popupFieldName3+'</div>'
            }
        }
        
        
        
           // Kendo table View Meeting enabled with autoSync attribute for auto save functionality
          function  kendoItemViewMeeting (gridData) {
            var draggableItem = {!JSENCODE(peopleEditPermission)} == true ?  "tbody > tr:not(.k-grid-edit-row) td:nth-child(2) ,tbody > tr:not(.k-grid-edit-row) td:nth-child(1)" :  "tbody >tr > tr";
             
            // assign number of records on tab
            if(gridData != null)
                $('.items-tab').html('('+gridData.length+')');
            
            //$('#durTotal').css('display','none');
            var data1 = gridData;
            
            function SortByValue1(x,y) {
                                  return x.Position- y.Position; 
                           }
            if(data1 != null){
               data1.sort(SortByValue1);
            }
            
            $.ajaxSetup({ cache: false }); 
            
            // new way or style
            var dataSource = new kendo.data.DataSource({
                autoSync: true, 
                edit:function (e) {
                        // Check for field accessabilty before edit
                       // alternative (if you don't have the name attribute in your editable):
                        var columnIndex = this.cellIndex(e.container);
                        var fieldName = this.thead.find("th").eq(columnIndex).data("field");
                        if (fieldName == 'Progress') {
                            this.closeCell(); // prevent editing
                        }
                },    
                transport: {  
                    read: function(e) {  
                        dataSource.sync();
                        e.success(data1);
                    },
                    
                    update: function(e) {  
                        var t = JSON.stringify(e);
                        var modifiedDataForKendo = parsingModifieData(t);
                        e.success();
                    }
                 },
                 batch : true,
                 schema: {
                    model: {
                        id: "Id",
                        fields: {
                            Id: { type: "string", editable: false },
                            Name: { type: "string" , editable: false  },
                            isDeletable: { type: "boolean" , editable: false},
                            actionClassName : { type: "string"},
                            actionClassNameDecision : { type: "string"},
                            Type: {type:"string", editable:false},
                            Position: { type: "number"  },
                            Minutes: { type: "number" ,validation: { max: 59, min : 0 } },
                            Hours: { type: "number" ,validation: { max: 23, min : 0 } },
                            Days : { type: "number" ,validation: { max: 999, min : 0 } },
                            Owner: { type: "string", editable: false },
                            OwnerId: { type: "string", editable: false },
                            canUserCreateTask: {type: "string", editable : false},
                            description: { type: "string", 
                                validation: { 
                                    maxlength:
                                        function(input) { 
                                            if (input.val().length > 255) {
                                               input.attr("data-maxlength-msg", "Max length is 255");
                                               return false;
                                            }                                   
                                            return true;
                                        }
                                } 
                          }
                        }
                    }
                },
                aggregate: [ { field: "Minutes", aggregate: "sum"}, 
                             { field: "Hours", aggregate: "sum"}
                             
                           ]
            });
            
            var isEdit = false;
            var peopleEditPermissionClass =  '{!if( peopleEditPermission == 'true','grid-drag','grid-drag-disabled' )}';
            var dragfilter =  '{!if( peopleEditPermission == 'true','>tbody >tr ','>tbody >tr > tr' )}';
            var gridMeeting = $("#planItemViewMeeting").kendoGrid({
                
                dataSource: dataSource, 
                scrollable: true, 
                sortable: false,
                resizable: true,
                navigatable: false,
                editable: {!JSENCODE(peopleEditPermission)},
                edit:function (e) {
                       // alternative (if you don't have the name attribute in your editable):
                        var columnIndex = this.cellIndex(e.container);
                        var fieldName = this.thead.find("th").eq(columnIndex).data("field");
                        if (fieldName == 'Progress') {
                            this.closeCell(); // prevent editing
                        }
                },
                columns: [ 
                     {   // ======== added div with class=grid-drag for drag icon =========== //
                        field: "",
                        title: "",   
                        template: "<p class='handler'> ï¿½</p>",
                        width: 24,
                        sortable: false
                    },
                    {   // ======== added div with class=grid-drag for drag icon =========== //
                        field: "Id",
                        title: "Action",   
                        template: "<div class='editButtonGroupDiv'><div class='grid-action' id='Delete'><img class='#:actionClassName#' onclick=\"deleteItemViewOne('#:Id#','#:isDeletable#')\" src=/#:delItem# title='Delete'></div> <div class='grid-action'><img src=/#:newTaskFromDecision# class='#:decisionClass#' onclick=\"createNewTaskOrIssues(event,'#:itemRecordId#','#:Name#','#:Type#','#:canUserCreateTask#')\" title='#:newTaskFromDecisionIconTitle#'></div></div>",
                        width: 70,
                        sortable: false
                    },
                    {
                        field: "Progress",
                        title: "Progress",
                        template: "<div style='position:relative'><div id='PIholdermeeting#:itemRecordId#'></div></div><div style='background-position:0px  #:  -15*progressValue#px;display: #: (Type== \'Decision\' ? \'block\': \'none\' ) #' id='indicator#:itemRecordId#' class='indicatorPlan' onmouseover=\'showIndicator(event,\"meeting#:itemRecordId#\")\'; onmouseout=\'hideIndicator(\"meeting#:itemRecordId#\")\'; onclick=\'openIndicator(event,\"meeting#:itemRecordId#\",\"#:itemRecordId#\",\"#:piPermission#\"    )\';> </div>",
                         width: 80,
                        sortable: false  
                    }                   
                    ,
                    {
                        field: "Name",
                        title: "Name/Title",
                        template : "#=getTemplateItem(e,Type,Name,popupField1,popupField2,popupField3,popupFieldName1,popupFieldName2,popupFieldName2,popupFieldName3,itemRecordId,isEditable,typeClass,isReadable)#"
                    }                   
                    ,{
                        field: "Type",
                        title: "Item Type",
                        width: 90,
                        template: "#:Type#",
                        footerTemplate: '<div class="sumAlign" > Duration Sum: </div>',
                    },
                    {
                        field: "Hours",
                        title: "<br/>Hours",
                        template: '<div class = "item-editable" align = "right" title="Edit">#:Hours#</div>',
                        width: 70,
                        footerTemplate:  " #=window.calcHours()#"
                    },
                    {
                        field: "Minutes",
                        title: "<br/>Minutes",
                        template: '<div class = "item-editable" align = "right" title="Edit">#:Minutes#</div>',
                        width: 70,
                        footerTemplate:  " #=window.calcMinutes()#"  
                    },
                    {
                        field: "Owner",
                        title: "Accountable/<br />Owner",
                        template: "#:Owner#"
                    },
                    {
                        field: "description",
                        title: "Description",
                        template: '<div class = "item-editable"  title="Edit">#=description#</div>'
                    }]
                     
            }).data("kendoGrid");
            
            
             //define kendo sortable
               gridMeeting.table.kendoSortable({
                       filter: dragfilter ,  // filter based on user permission
                       handler:".handler",
                       hint: $.noop,     // define the drag hint
                       cursor: "move",
                       ignore: "td,input,span,div", 
                       end:function(){ document.body.style.cursor='default'; },
                       placeholder: function(element) {
                            var holder= element.clone().css('background-color','#C4C4C4').css("opacity", 1).css('outline','2px solid #A2A2A2');   //  set outline for dragged row and opacity
                            holder.find('td:nth-child(1)').find('span').css('background-color','green');//  set grren color for handler
                            return holder;
                        },
                       container: "#planItemViewMeeting tbody",
                       
                        change: function(e) {  
                               try{
                                var source; 
                                var dest;  
                                //get source and destination items and extract id and position then send to controller
                                if(e.oldIndex > e.newIndex ){
                                 source=     gridOverview.dataSource.at(e.oldIndex-1)  ; 
                                 dest   =     gridOverview.dataSource.at( e.newIndex -1)   ; 
                                }
                                else{
                                 source=     gridOverview.dataSource.at(e.oldIndex)  ; 
                                 dest   =     gridOverview.dataSource.at( e.newIndex )   ; 
                                } 
                                planItemOrderChanged(source.Id, source.Position, dest.Id, dest.Position);
                               }catch(err){} 
                          }
                    });
            
        }
        function calcMinutes() {
          // assume this to be dynamically determined  
          var field = "Minutes";
          
          // assume this to be dynamically determined
          var dataSource = $("#planItemViewMeeting").data("kendoGrid").dataSource;
          
          // some custom calc logic
          var newValue = 0;
          
          $.each(dataSource.data(), function(index, model) {
              newValue += parseInt(model.get(field));
          });
          newValue = newValue%60;
          newValue = newValue+ ' minutes'
          return newValue;
        }
        
         function calcHours() {
          // assume this to be dynamically determined  
          var field = "Minutes";
          
          // assume this to be dynamically determined
          var dataSource = $("#planItemViewMeeting").data("kendoGrid").dataSource;
          
          // some custom calc logic
          var newValue = 0;
          
          $.each(dataSource.data(), function(index, model) {
              newValue += parseInt(model.get(field));
          });
          
          var carry = Math.floor( newValue/60);
          field = "Hours";
           // assume this to be dynamically determined
          var dataSource = $("#planItemViewMeeting").data("kendoGrid").dataSource;
          
          // some custom calc logic
          var newValueHours = carry;
          
          $.each(dataSource.data(), function(index, model) {
              newValueHours += parseInt( model.get(field));
          });
        
          
          var days = Math.floor( newValueHours/24);
          var hours =  Math.floor( newValueHours%24);
          var daystring  =  days > 0 ?  days+ (days == 1? ' day <br/>': ' days <br/>' )  :' 0 hours ';
          var hourstring  =  hours > 0 ?  hours + (hours  == 1? ' hour ': ' hours ' )  :' 0 days';
          var hoursanddays = daystring + hourstring;
          return hoursanddays; 
        }
        
        
        function showItemDetails(e,itemType,Name,popupField1,popupField2,popupField3,popupFieldName1,popupFieldName2,popupFieldName3){
          $('#item-hover-tbl tr:nth-child(2)').show();
          $('#item-hover-tbl tr:nth-child(3)').show();
          var itemType = itemType; //$(this).next().html();
          var itemTitle = Name;//$(this).next().next().html();
          var itemField1 = popupField1;//$(this).next().next().next().html();
          var itemField2 = popupField2; //$(this).next().next().next().next().html();
          var itemField3 = popupField3;//$(this).next().next().next().next().next().html();
          var itemTitle1 = popupFieldName1;//$(this).next().next().next().next().next().next().html();
          var itemTitle2 = popupFieldName2;//$(this).next().next().next().next().next().next().next().html();
          var itemTitle3 = popupFieldName3;//$(this).next().next().next().next().next().next().next().next().html();
          if(itemType == "Note") {
              $('#item-hover-tbl tr:nth-child(2)').hide();
              $('#item-hover-tbl tr:nth-child(3)').hide();
          }
          if(itemType == "Account" || itemType == "Decision" || itemType == "Task" ) {
              $('#item-hover-tbl tr:nth-child(3)').hide();
          }
          if(itemType == "Decision"){
            $('#item-call').css('border-top-color','#333333');
            $('#callout-border').css('border-bottom-color','#333333');
          } else if(itemType == "Task"){
                $('#item-call').css('border-top-color','#4ab471');
                $('#callout-border').css('border-bottom-color','#4ab471');
          } else if(itemType == "Account"){
                $('#item-call').css('border-top-color','#236FBD');
                $('#callout-border').css('border-bottom-color','#236FBD');
          } else if(itemType == "Asset"){
                $('#item-call').css('border-top-color','#317992');
                $('#callout-border').css('border-bottom-color','#317992');
          } else if(itemType == "Campaign"){
                $('#item-call').css('border-top-color','#CC9933'); 
                $('#callout-border').css('border-bottom-color','#CC9933');
          } else if(itemType == "Case"){
                $('#item-call').css('border-top-color','#B7A752'); 
                $('#callout-border').css('border-bottom-color','#B7A752');
          } else if(itemType == "Contact"){
                $('#item-call').css('border-top-color','#56458C'); 
                $('#callout-border').css('border-bottom-color','#56458C');
          } else if(itemType == "Contract"){
                $('#item-call').css('border-top-color','#66895F'); 
                $('#callout-border').css('border-bottom-color','#66895F');
          } else if(itemType == "Idea"){
                $('#item-call').css('border-top-color','#178AFF'); 
                $('#callout-border').css('border-bottom-color','#178AFF');
          } else if(itemType == "Lead"){
                $('#item-call').css('border-top-color','#E39321'); 
                $('#callout-border').css('border-bottom-color','#E39321');
          } else if(itemType == "Opportunity"){
                $('#item-call').css('border-top-color','#E5C130'); 
                $('#callout-border').css('border-bottom-color','#E5C130');
          } else if(itemType == "Price Book"){
                $('#item-call').css('border-top-color','#027C6F'); 
                $('#callout-border').css('border-bottom-color','#027C6F');
          } else if(itemType == "Product"){
                $('#item-call').css('border-top-color','#317992'); 
                $('#callout-border').css('border-bottom-color','#317992');
          } else if(itemType == "Quote" || itemType == "Quote Line Item"){
                $('#item-call').css('border-top-color','#E5C130'); 
                $('#callout-border').css('border-bottom-color','#E5C130');
          } else if(itemType == "Solution"){
                $('#item-call').css('border-top-color','#567A00'); 
                $('#callout-border').css('border-bottom-color','#567A00');
          } else if(itemType == "User"){
                $('#item-call').css('border-top-color','#3A6690'); 
                $('#callout-border').css('border-bottom-color','#3A6690');
          } else {
                $('#item-call').css('border-top-color','#993399');
                $('#callout-border').css('border-bottom-color','#993399');
          }
          $('.popover-title').html(itemTitle);
          if(itemTitle1 == 'Problem Statement'){
              $('.fld-title1').html('Description');
          }else{
              $('.fld-title1').html(itemTitle1);
          }
          $('.fld-title1').html(itemTitle1);
          $('.fld-title2').html(itemTitle2);
          $('.fld-title3').html(itemTitle3);
          $('.fld-value1').html(itemField1);
          $('.fld-value2').html(itemField2);
          $('.fld-value3').html(itemField3);
          $('#item-call').show()
            .css('top', e.clientY - 45 + $(document).scrollTop())
            .css('left', e.clientX + 30)
            .appendTo('body');
                    
             
        }
        
        function hideItemDetails(){
            $('#item-call').hide();
        }
        
        // Kendo table implementation for  status view 
        function  kendoItemViewStatus (gridData) {
            // assign number of records on tab
            if(gridData != null)
                $('.items-tab').html('('+gridData.length+')');
            
            //$('#durTotal').css('display','none');
            var data1 = gridData;
            
            function SortByValue1(x,y) {
                                  return x.Position- y.Position; 
                           }
            if(data1 != null){
                data1.sort(SortByValue1);
            }
            
            $.ajaxSetup({ cache: false }); 
            
            // new way or style
            var dataSource = new kendo.data.DataSource({
                autoSync: true, 
                batch : true,
                edit:function (e) {
                       // this used only to prevent editing inside progress column other columns are locked
                       // alternative (if you don't have the name attribute in your editable):
                        var columnIndex = this.cellIndex(e.container);
                        var fieldName = this.thead.find("th").eq(columnIndex).data("field");
                        if ( fieldName == "Progress" ) {
                            this.closeCell(); // prevent editing
                        }
                }, 
                transport: {
                    read: function(e) {  
                        dataSource.sync();
                        e.success(data1);
                    },
                    
                    update: function(e) {  
                        var t = JSON.stringify(e);
                        var modifiedDataForKendo = parsingModifieData(t);
                        e.success();
                    }
                 },
                 schema: {
                    model: {
                        id: "Id",
                        fields: {
                            Id: { type: "string"},
                            Title: { type: "string"},
                            approve: { type: "string"},
                            nostance: { type: "string"},
                            disapprove: { type: "string"},
                            veto: { type: "string"},
                            issue: { type: "string"},
                            status : { type: "string" },
                            mood: { type: "string"},
                            moodClass:{ type: "string"},
                            Position: { type: "number"  },
                            actionClassName : { type: "string"}
                        }
                    }
                }
            });
            
            var isEdit = false;
            
            var grid = $("#planItemViewStatus").kendoGrid({ 
                
                dataSource: dataSource, 
                scrollable: true,
                resizable: true,
                columns: [ 
                {
                        field: "Progress",
                        title: "Progress",
                        template: "<div style='position:relative'><div id='PIholderstatus#:itemRecordId#'></div></div><div style='background-position:0px  #:  -15*progressValue#px;display: #: (Type== \'Decision\' ? \'block\': \'none\' ) #' id='indicator#:itemRecordId#' class='indicatorPlan' onmouseover=\'showIndicator(event,\"status#:itemRecordId#\")\'; onmouseout=\'hideIndicator(\"status#:itemRecordId#\")\'; onclick=\'openIndicator(event,\"status#:itemRecordId#\",\"#:itemRecordId#\",\"#:piPermission#\"    )\';> </div>",
                         width: 80,
                        sortable: false  
                }                   
                 ,  
             
                {
                    field: "Name",
                    title: "Name/Title",
                    template : "#=getTemplateItem(e,Type,Name,popupField1,popupField2,popupField3,popupFieldName1,popupFieldName2,popupFieldName2,popupFieldName3,itemRecordId,isEditable,typeClass,isReadable)#"
                }
                ,
                    
                {
                    field: "Type",
                    title: "Item Type",
                    width: 80,
                    template: "#:Type#"
                }
                ,
                {
                    field: "approve",
                    headerTemplate: '<div align = "center"><br /><img src = "{!URLFOR($Resource.Images, "common/icon-approved-16x16.png")}" /><div>',
                    width: 50,
                    template: '<div class = "" align = "right" >#:approve#</div>',
                    
                },
                {
                    field: "nostance",
                    headerTemplate: '<div align = "center"><br /><img src = "{!URLFOR($Resource.Images, "common/icon-pending-16x16.png")}" /><div>',
                    width: 50,
                    template:  '<div class = "" align = "right" >#:nostance#</div>',
                },
                {
                    field: "disapprove",
                    headerTemplate: '<div align = "center"><br /><img src = "{!URLFOR($Resource.Images, "common/icon-rejected-16x16.png")}" /><div>',
                    width: 50,
                    template: '<div class = "" align = "right" >#:disapprove#</div>',
                    
                },
                {
                    field: "veto",
                    title: "Veto",
                    width: 45,
                    template: "#:veto#"
                },                 
                {
                    field: "mood",
                    title: "Mood",
                    template: '<div align = "center"><div class=#:moodClass# title=#:mood# /><div>',
                    width: 60
                },
                {
                    field: "status",
                    title: "Status",
                    width: 110,
                    template: "#:status#"
                },
                {
                    field: "phase",
                    title: "Phase",
                    width: 80,
                    template: "#:phase#"
                }]
            }).data("kendoGrid"); 
        }
       // Kendo grid implementation for Financials view same as old view 4
       function  kendoItemViewFinancials (gridData) {
         var itemdata4 =  gridData;
            function SortByValue2(x,y) {
                   return x.Position- y.Position; 
            }
            if(itemdata4 != null){
                itemdata4.sort(SortByValue2);
            }
            
            var dataSource = new kendo.data.DataSource({
                data: itemdata4, 
                //autoSync: true, 
                //batch : true,   
               /* transport: {
                    read: function(e) {  
                        dataSource.sync();
                        e.success(itemdata4);
                    },
                    
                    update: function(e) {  
                        var t = JSON.stringify(e);  
                        var modifiedDataForKendo = parsingModifieData(t);
                        e.success();
                    }
                }, */         
                schema: {
                    model: {
                        id: "Id",
                        fields: {
                            Id: { type: "string"},
                            Title: { type: "string"},
                            Investment : {type: "number"},         
                            DirectCost : { type: "number"},
                            Revenue : { type: "number"},
                            NetPresentValue : { type: "number"},
                            PeopleInvolved : { type: "number" },
                            FTE: { type: "number"},
                            Position: { type: "number"  },  
                            actionClassName : { type: "string"}
                        },
                    }
                },
                aggregate: [ { field: "Investment", aggregate: "sum"}, 
                             { field: "DirectCost", aggregate: "sum"}, 
                             { field: "Revenue", aggregate: "sum"}, 
                             { field: "NetPresentValue", aggregate: "sum"}, 
                             { field: "PeopleInvolved", aggregate: "sum"},    
                             { field: "FTE", aggregate: "sum"}
                           ]
            });
            var grid = $("#planItemViewFinancials").kendoGrid({
                dataSource: dataSource,  
                scrollable: true,
                sortable: false,
                resizable: true,
                columns: [    
                  
                    {
                        field: "Name",
                        title: "Name/Title",
                        template : "#=getTemplateItem(e,Type,Name,popupField1,popupField2,popupField3,popupFieldName1,popupFieldName2,popupFieldName2,popupFieldName3,itemRecordId,isEditable,typeClass,isReadable)#"
                    },
                    {
                        field: "Type",
                        title: "Item Type",                       
                        width: 80,
                        template: "#:Type#"
                       
                    },
                    {
                        field: "Investment",
                        title: "Investment",
                        width:130,
                        footerTemplate: '<div class="sumAlignValue">#: (sum == null)? kendo.toString(0, "n2"): kendo.toString(sum, "n2") #</div>',
                        template: "<div style='word-wrap:break-word;text-align:right'>#:   Investment != null ? kendo.toString( Investment , 'n2') : ''#</div>"
                    
                    },
                    {
                        field: "DirectCost",
                        title: "Direct Cost",
                        width:130,
                        footerTemplate: '<div class="sumAlignValue">#: (sum == null)?  kendo.toString(0, "n2"): kendo.toString(sum, "n2") #</div>',
                        template: "<div style='word-wrap:break-word;text-align:right'>#: DirectCost != null ?  kendo.toString(DirectCost , 'n2'): ''#</div>"
                    },
                    {
                        field: "Revenue",
                        title: "Revenue",
                        width:130,
                        footerTemplate: '<div class="sumAlignValue">#: (sum == null)?  kendo.toString(0, "n2"): kendo.toString(sum, "n2") #</div>',
                        template: "<div style='word-wrap:break-word;text-align:right'>#: Revenue != null ? kendo.toString(Revenue, 'n2') : ''#</div>"
                    },
                    {
                        field: "NetPresentValue",
                        title: "NPV",
                        width:130,
                        footerTemplate: '<div class="sumAlignValue">#: (sum == null)?  kendo.toString(0, "n2"): kendo.toString(sum, "n2") #</div>',
                        template: "<div style='word-wrap:break-word;text-align:right'>#: NetPresentValue != null ? kendo.toString(NetPresentValue, 'n2')  : ''#</div>"
                    },
                    {
                       field: "PeopleInvolved",
                       title: "People<br />Involved",
                       width:90,
                       footerTemplate: '<div class="sumAlignValue">#: (sum == null)?  kendo.toString(0, "n2"): kendo.toString(sum, "n0") #</div>',
                       template: "<div style='word-wrap:break-word;text-align:right'>#: PeopleInvolved != null ? kendo.toString(PeopleInvolved, 'n0')  : ''#</div>"
                    },
                    {
                        field: "FTE",
                        title: "FTE",
                        width:90,
                        footerTemplate: '<div class="sumAlignValue">#: (sum == null)?  kendo.toString(0, "n2"): kendo.toString(sum, "n2") #</div>',
                        template: "<div style='word-wrap:break-word;text-align:right'>#: FTE != null ?  kendo.toString(FTE, 'n2') : ''#</div>",
                        
                    }], 
            }).data("kendoGrid");
      
            $(function() {
                $('.decisionLink4').hover(function(e) {
                    $('#item-hover-tbl tr:nth-child(2)').show();
                    $('#item-hover-tbl tr:nth-child(3)').show();
                    var itemType = $(this).next().html();
                    var itemTitle = $(this).next().next().html();
                    var itemField1 = $(this).next().next().next().html();
                    var itemField2 = $(this).next().next().next().next().html();
                    var itemField3 = $(this).next().next().next().next().next().html();
                    var itemTitle1 = $(this).next().next().next().next().next().next().html();
                    var itemTitle2 = $(this).next().next().next().next().next().next().next().html();
                    var itemTitle3 = $(this).next().next().next().next().next().next().next().next().html();
                    if(itemType == "Note") {
                        $('#item-hover-tbl tr:nth-child(2)').hide();
                        $('#item-hover-tbl tr:nth-child(3)').hide();
                    }
                    if(itemType == "Account" || itemType == "Decision" || itemType == "Task" ) {
                        $('#item-hover-tbl tr:nth-child(3)').hide();
                    }
                    if(itemType == "Decision"){
                        $('#item-call').css('border-top-color','#333333');
                        $('#callout-border').css('border-bottom-color','#333333');
                      }else if(itemType == "Task"){
                            $('#item-call').css('border-top-color','#4ab471');
                            $('#callout-border').css('border-bottom-color','#4ab471');
                      }else{
                        $('#item-call').css('border-top-color','#CE007C');
                        $('#callout-border').css('border-bottom-color','#CE007C');
                      }
                    $('.popover-title').html(itemTitle);
                    if(itemTitle1 == 'Problem Statement'){
                        $('.fld-title1').html('Description');
                    }else{
                        $('.fld-title1').html(itemTitle1);
                    }
                    $('.fld-title2').html(itemTitle2);
                    $('.fld-title3').html(itemTitle3);
                    $('.fld-value1').html(itemField1);
                    $('.fld-value2').html(itemField2);
                    $('.fld-value3').html(itemField3);
                    $('#item-call').show()
                      .css('top', e.pageY - 45)
                      .css('left', e.pageX + 30)
                      .appendTo('body');
                    
                }, function() {
                    $('#item-call').hide();
                });
              });
            
        }
         // Kendo table  work view  only notes and task are shown. Task permission are according to task record apart from role under plan only task is editable if permitted 
          function  kendoItemViewWork (gridData) {
           
            // assign number of records on tab
            if(gridData != null)
                $('.items-tab').html('('+gridData.length+')');
            
            //$('#durTotal').css('display','none');
            var data1 = gridData;
            
            function SortByValue1(x,y) {
                                  return x.Position- y.Position; 
                           }
            if(data1 != null){
               data1.sort(SortByValue1);
            }
            
            $.ajaxSetup({ cache: false }); 
            
            
            // new way or style
            var dataSource = new kendo.data.DataSource({
                autoSync: true,  
                filter: {
                    // leave data items which are "Task" or "Notes"
                    logic: "or",
                    filters:[ { field: "Type", operator: "eq", value: "Task" },{ field: "Type", operator: "eq", value: "Note" }]
                },
                transport: {  
                    read: function(e) {  
                        dataSource.sync();
                        e.success(data1);
                    },
                    
                    update: function(e) {  
                        var t = JSON.stringify(e);
                       // console.log(t);
                        var modifiedDataForKendo = parsingModifieData(t);
                        e.success();
                    }
                 },
                 batch : true,
                 schema: {
                     parse : function(gridData) {
                                $.each(gridData,function(idx,elem) {
                                     if(typeof elem.dueDateSort=="string") {
                                        elem.dueDateSort =  kendo.parseDate(elem.dueDateSort); 
                                     } 
                                 });
                                 return gridData
                    },
                    model: {
                        id: "Id",
                        fields: {
                            Id: { type: "string", editable: false },
                            Name: { type: "string" , editable: false  },
                            isDeletable: { type: "boolean" , editable: false},
                            actionClassName : { type: "string"},
                            actionClassNameDecision : { type: "string"},
                            Type: {type:"string", editable:false},
                            Position: { type: "number"  },
                            estimatedHours :{ type: "number",validation: { max: 9999999999999999, min : 0 },aggregate: "sum"  },
                            actualHours :{ type: "number",validation: {  max: 9999999999999999, min : 0 }  },
                            complexity :{ type: "string"  },
                            skillLevel :{ type: "number"  },
                            stage:{ type: "string"  },
                            status:{ type: "string"  },
                            dueDateSort : {type : "date", editable: true},
                            delayTaskClass: { type: "string", editable: false},
                            Owner: { type: "string", editable: false },
                            OwnerId: { type: "string", editable: false },
                            canUserCreateTask: {type: "string", editable : false},
                            description: { type: "string", 
                                validation: { 
                                    maxlength:
                                        function(input) { 
                                            if (input.val().length > 255) {
                                               input.attr("data-maxlength-msg", "Max length is 255");
                                               return false;
                                            }                                   
                                            return true;
                                        }
                                } 
                          }
                        }  
                    }
                } ,
                
                aggregate: [ { field: "estimatedHours", aggregate: "sum"}, 
                             { field: "actualHours", aggregate: "sum"}
                             
                           ]
                
            });
           viewModelWork = new kendo.observable({  ds:dataSource });
            
            var isEdit = false;
            var peopleEditPermissionClass =  '{!if( peopleEditPermission == 'true','grid-drag','grid-drag-disabled' )}';
            var grid = $("#planItemViewWork").kendoGrid({
                
                dataSource: dataSource, 
                scrollable: true, 
                sortable: true,
                filterable: true,
                navigatable: false,
                editable: true,
                resizable: true,
                edit: function (e) {
                       // alternative (if you don't have the name attribute in your editable):
                        var columnIndex = this.cellIndex(e.container);
                        var fieldName = this.thead.find("th").eq(columnIndex).data("field");
                        if (!isEditable(fieldName, e.model)) {
                            this.closeCell(); // prevent editing
                        }
                },
                columns: [  
                
                     
                     
                    {
                        field: "Name",
                        title: "Name/Title",
                        template : "#=getTemplateItem(e,Type,Name,popupField1,popupField2,popupField3,popupFieldName1,popupFieldName2,popupFieldName2,popupFieldName3,itemRecordId,isEditable,typeClass,isReadable)#",
                        sortable:true,
                        filterable: true                    
                     }                   
                    ,{
                        field: "Type",
                        title: "Item <br/> Type",
                        width: 50,
                        template: "#:Type#",
                        sortable:true,
                        filterable: false
                       
                    },
                    {
                        field: "Owner",
                        title: "Owner",
                        template: "#:Owner#",
                        sortable:true,
                        filterable: true
                    },
                    {
                        field: "status",
                        title: "Status",
                        width: 150,
                        editor: statusDropDownEditorWork,
                        template: '<div title="#:(isEditable &&(Type==\'Task\'))?\'Edit\':\'\'#">#:status#</div>',
                        footerTemplate: '<div class="sumAlign" > Sum: </div>',
                        sortable:true,
                        filterable: false
                    } ,
                    {
                       field: "dueDateSort",
                       title: "Due Date",
                       format:dateFormat,
                       editor: dateTimeEditorforActivities,
                       template: "<div>#:   kendo.toString(( dueDateSort == null ? '' :dueDateSort ), kendo.culture().calendar.patterns.d)#</div>",
                       width: 100,
                       sortable:true,
                       filterable: true
                    },
                    {
                        field: "estimatedHours",
                        title: "Estimated <br/> Hours",
                        width: 80, 
                        template: '<div style="word-wrap:break-word"  class = "item-editable" align = "right" title="#:(isEditable &&(Type==\'Task\'))?\'Edit\':\'\'#">#:estimatedHours== null?\'\':kendo.toString(estimatedHours, "n0") #</div>',
                        footerTemplate: '<div style="word-wrap:break-word" align = "right">#: kendo.toString(sum, "n0") #</div>',
                        sortable:true, 
                        filterable: false
                    } ,
                    {
                        field: "actualHours",
                        title: "Actual <br/> Hours",
                        width: 80, 
                        template: '<div style="word-wrap:break-word" class = "item-editable" align = "right" title="#:(isEditable &&(Type==\'Task\'))?\'Edit\':\'\'#">#:actualHours== null?\'\':  kendo.toString(actualHours, "n0")#</div>',
                        footerTemplate: '<div style="word-wrap:break-word" align = "right">#: kendo.toString(sum, "n0") #</div>',
                        sortable:true,
                        filterable: false
                    } ,
                    {
                        field: "complexity",
                        title: "Complexity",
                        width: 80,
                        editor:complexityDropDownEditorWork,
                        template: '<div align = "right" title="#:(isEditable &&(Type==\'Task\'))?\'Edit\':\'\'#">#:complexity== null?\'\':complexity#</div>',
                        sortable:false,
                        filterable: false   
                                        
                    } ,
                    {
                        field: "skillLevel",
                        title: "Skill Level",
                        width: 80,
                        editor:skillsDropDownEditorWork, 
                        template: '<div  align = "right" title="#:(isEditable &&(Type==\'Task\'))?\'Edit\':\'\'#">#:skillLevel== null?\'\':skillLevel#</div>',
                        sortable:false,
                        filterable: false   
                    } ,
                    {
                        field: "description",
                        title: "Description", 
                        template: '<div class = "item-editable"  title="#: (isEditable &&(Type==\'Task\'))?\'Edit\':\'\'#">#=description#</div>',
                        sortable:false,
                        filterable: false                    
                    }]
                     
            }).data("kendoGrid");
            
        }
        function numberEditor(container, options) {
            $('<input name="' + options.field + '"/>')
                    .appendTo(container)
                    .kendoNumericTextBox({
                        format  : "{0:n0}",
                        decimals: 3,
                        step    : 0.001
                    });
        }
        function parsingModifieData(t){
            parseItemModifiedData('{!JSENCODE(plan.Id)}',t);
           // renderTotalMins('{!JSENCODE(plan.Id)}');
        }  
        // function to check for each field permission under each view
        function isEditable(fieldName, model)  {  
            // prevent progress field from editing
            if (fieldName == "Progress") {  
                return false;
            }
            console.log(model)
            //editable if useraccess and type is task
            if (fieldName == "status") {  
                return model.hasOwnProperty("status") && model.Type == "Task"&&model.isEditable;
            }
            //editable if useraccess and type is task
            if (fieldName == "actualHours") {  
                return model.hasOwnProperty("actualHours") && model.Type == "Task"&&model.isEditable;
            }
            //editable if useraccess and type is task
            if (fieldName == "dueDateSort") {  
                return model.hasOwnProperty("dueDateSort") && model.Type == "Task"&&model.isEditable;
            }
            //editable if useraccess and type is task
            if (fieldName == "status") {   
                return model.hasOwnProperty("status") && model.Type == "Task"&&model.isEditable;
            }
            
            //editable if useraccess and type is task
            if (fieldName == "estimatedHours") {  
                return model.hasOwnProperty("estimatedHours") && model.Type == "Task"&&model.isEditable;
            }
            //editable if useraccess and type is task
            if (fieldName == "complexity") {  
                return model.hasOwnProperty("complexity") && model.Type == "Task"&&model.isEditable;
            }
            //editable if useraccess and type is task
            if (fieldName == "skillLevel") {  
                return model.hasOwnProperty("skillLevel") && model.Type == "Task"&&model.isEditable;
            }
            //editable if useraccess and type is task
            if (fieldName == "description") {  
                return model.hasOwnProperty("description") && model.Type == "Task"&&model.isEditable;
            }
            return true; // default to editable
        }  
    </script> 
    <script type="text/javascript">
     // Collabrator  table
     var  viewModel ; 
      var  viewModelWork ; 
        function kendoPeople(gridData) {
            // assign number of records on tab
            $('.people-tab').html('('+gridData.length+')');
            
            $("#gridPeople").kendoGrid({
               dataSource:{
                   data:gridData,
                   transport: {
                        read: function(event) {  
                          //data.sync();
                            event.success(gridData);
                        }
                        ,
                        update: function(event) {   
                            event.success();
                        }
                   },     
                   schema: {
                       model: {
                           id: "id",
                           fields: {
                               id: { type: "string" },
                               name: { type: "string" },
                               userImage: { type: "string" },
                               role: { type: "string"},
                              // The below lines are commented because the Participation Acceptance and Plan Approval columns are removed
                              // roleAcceptance : { type: "string"},
                              // planApproval: { type: "string"},
                              // roleAcceptanceImage : { type: "string"},
                              // planApprovalImage : { type: "string"},
                               description : { type: "string"},
                               backupforAccountable : { type: "string"},
                               vetoRights : { type: "string"},
                               isDeletable : { type: "Boolean"},
                               deleteImage : { type: "string"},
                               planOnApprvalForCallOut : {type: "String"},
                               groupName : { type: "string"},
                               infoImage: { type: "string"},
                               actionClassName : { type: "string"}
                               
                           }
                       }
                   },
                   pageSize: 25
               },
               columns: [
                  {
                       field: "id",
                       title: "Action",
                       filterable: false,
                       width: 55,
                       template: "<div class = 'grid-action-single' align ='center'><img src=/#:deleteImage# class='#:actionClassName#' onclick=\"deleteItemCollab('{!JSENCODE(plan.Id)}','#:id#','#:isDeletable#')\"; /></div>",
                       sortable: false
                       
                   },
                   {
                       field: "name",
                       title: "Name",
                       width : 260,
                       template: '<div class = "grid-user-img"><img src=#:userImage# title= "#:name#" height="24px" width="24px"/></div><a class = "#:groupClassName#" href=#:url# onclick=\'groupMemberPopup("#:userId#","#:name#","#:isGroup#")\'; ><div class = "grid-username">#:name#</div></a><div id = "decHidden">#:userNameList#</div>'
                   },
                   {
                       field: "groupName",
                       title: " ",
                       filterable: false,
                       template: '<img src=/#:infoImage# class="ft-right" title="#:groupName#">',
                       width: 30,
                       sortable: false
                   },
                   {
                       field: "role",
                       title: "Role",
                       width: 220,
                       template: "#:role#"
                   },
                   // The below lines are commented because the Participation Acceptance and Plan Approval columns are removed
                   /* {
                       field: "roleAcceptance",
                       title: "Participation<br />Acceptance",
                       filterable: false,
                       template: '<div align="center"><img src=/#:roleAcceptanceImage# title = "#:roleAcceptance#"  /></div>',
                       width: 100
                   }, */
                   
                   /* {
                       field: "planApproval",
                       title: "Plan<br /> Approval",
                       filterable: false,
                       width: 85
                       
                    }, */
                   {
                       field: "description",
                       title: "Description",
                       filterable: false,
                       template: "#:description#"
                   }
              ],
              sortable: true,
              pageable: true,
              filterable: true,
              resizable: true,
              pageable: {
                            refresh: true,
                            pageSizes: [5,10,25,40]
                        },
           });
         
           $('.group-link').hover(function(e) {
              var content = $(this).next().html();
              if(content != ''){
                  content = content.replace(/,/g, '<br>');
                  $('.popover-social-content').html(content);                   
                  $('.popover-social').show()
                  .css('top', e.pageY - 25)
                  .css('left', e.pageX + 50)
                  .appendTo('body');
              }
           },function() {
           $('.popover-social').hide();
          });
        }
        
        
        // Activities Kendo table enabled with autoSync attribute for auto save functionality
        var selectedTasks = new Array();
        var chkMassDeletePermission = new Array();
        function kendoTaskEvent(gridData) {
            // assign number of records on tab
            if(gridData != null)
                $('.task-tab').html('('+gridData.length+')');
            
            //$('#durTotal').css('display','none');
            var data1 = gridData;
            
            // To enable kendo sorting.
            function SortByValue1(x,y) { 
                                  return x.Position- y.Position; 
            }
            if(data1 != null){
                data1.sort(SortByValue1);
            }
            
            // To remove the cache on kendo table
            $.ajaxSetup({ cache: false }); 
            
            // To enable or disable the task check box when cloning a decision.
            if(gridData != null){
                if(gridData.length > 0 ) {
                    $("#taskClone").attr('disabled', false);
                }
                else {
                    $("#taskClone").attr('disabled', true);
                }    
            }
            
            // To highlight the users for any delayed activities.
            var isTaskDelay;
            if(gridData != null){
                for(var i = 0; i < gridData.length; i ++ ) {
                    if(gridData[i].delayTaskClass == 'delayTask' ) {
                        isTaskDelay = true;
                    }
                }
            }
            if(isTaskDelay) {
                $('#planTab li:nth-child(5) a').css('color','#ff0000');
            }
            else {
                $('#planTab li:nth-child(5) a').css('color','#222');
            }
          
           // new way or style [Using transport]
           //  dataSource
            var dataSource = new kendo.data.DataSource({
                autoSync: true, 
                batch: {!socialInput.Accountable__c} || {!socialInput.Backup_for_Accountable__c} || {!socialInput.Responsible__c} == true ? true : false,   
                transport: {
                    read: function(e) {
                        dataSource.sync();
                        e.success(data1);
                    },
                    update: function(e) { 
                          var stringifiedData = JSON.stringify(e);
                          var updatedData = parsingModifieDataforActivities(stringifiedData);
                          e.success();
                    }
                 },
                 schema: {
                              parse : function(gridData) {
                                $.each(gridData,function(idx,elem) {
                                     if(typeof elem.dueDateSort=="string") {
                                        elem.dueDateSort =  kendo.parseDate(elem.dueDateSort); 
                                     } 
                                 });
                                 return gridData
                          },
                 
                    model: {
                        id: "id",
                        fields: { 
                            id : { type: "string", editable: false },
                            toDisable : { type: "string", editable: false },
                            isSelected : { type: "boolean", editable: false},
                            subject: { type: "string", editable: true, validation: { required: {message: "is required"}} },
                            dueDate  : { type: "string" , editable: true },
                            status : { type: "string", editable: true },
                            isTask :  { type: "string", editable: false },
                            priority :  { type: "string", editable: true },
                            assignedTo :  { type: "string", editable: false },
                            assignedToImage : { type: "string", editable: false },
                            deleteImage : { type: "string", editable: false},
                            isDeletable : { type: "boolean", editable: false},
                            isEditable : { type: "boolean", editable: false},
                            editImage : { type: "string", editable: false},
                            isDeletable : { type: "boolean", editable: false},
                            isEditable : { type: "boolean", editable: false},
                            url  : { type: "string", editable: false},
                            actionClassNameEdit : { type: "string", editable: false},
                            actionClassNameDelete : { type: "string", editable: false},
                            delayTaskClass: { type: "string", editable: false},
                            comment : { type: "string", editable: false },
                            subjectClass  : { type: "string", editable: false},
                            subjectClassLink : { type: "string", editable: false},
                            ownerId : {type : "string", editable: false},
                            commentsImage : { type: "string", editable: false},
                            title : {type : "string", editable: false},
                            imgEditTitle : {type : "string", editable: false},
                            imgDeleteTitle : {type : "string", editable: false},
                            dueDateSort : {type : "date", editable: true}
                        }
                    }
                },
                sort: { field: "subject", dir: "asc" },
                pageSize: 25,
            });
            viewModel = new kendo.observable({  ds:dataSource });
            
            //  start of functions
            
            var grid = $("#gridTaskEvent").kendoGrid({
                
                
                dataSource:dataSource,
                sortable: true,
                resizable: true,
                editable: ( ( {!socialInput.Accountable__c} || {!socialInput.Backup_for_Accountable__c} || {!socialInput.Responsible__c} )  == true ) ? true : false, 
                <apex:panelgroup rendered="{! socialInput.Accountable__c || socialInput.Backup_for_Accountable__c || socialInput.Responsible__c}">
                   toolbar:    ["save","cancel"] ,
                </apex:panelgroup>
                filterable: {
                            extra: false,
                            operators: {
                                 string: {
                                    startswith: "Starts with",
                                    eq: "Is equal to",
                                    neq: "Is not equal to"
                                }
                            }
                        },
                pageable: {
                            refresh: true,
                            pageSizes: [5,10,25,40]
                            //select : onchange
                        },
                columns: [
                    {
                       field: "isSelected",
                       title: "Select",
                       width: 60,
                       filterable: false,
                       template: kendo.template($("#checkbox-template").html()),
                       sortable: false
                   },
                    {
                       field: "id",
                       title: "Action",
                       width: 60,
                       filterable: false,
                       template: "<div class='grid-action'><img class='#:actionClassNameEdit#' onclick=\"editTaskEvent('#:id#','#:isEditable#', '#:isTask#','EditMode');\";  src=/#:editImage# title=#:imgEditTitle# ></img> </div> <div class='grid-action'><img src=/#:deleteImage# class='#:actionClassNameDelete#'  onclick=\"deleteTaskEventWarning('{!JSENCODE(plan.Id)}','#:id#','#:isDeletable#', '#:isTask#')\"; title=#:imgDeleteTitle# ></img> </div>",
                       sortable: false
                   },
                   {
                       field: "subject",
                       title: "Subject",
                       template: "<div title=#:title#><a href=#:url# onclick=\"editTaskEvent('#:id#','#:isEditable#', '#:isTask#','ReadMode');return false;\"; >#=subject#</a></div>",
                   },
                   {
                       field: "comment",
                       title: "Comments",
                       filterable: false,
                       editable: false,
                       template: '<div  align="center"><img src=/#:commentsImage# title="#=comments#" /></div>',
                       width: 85
                       
                   },
                   {
                       field: "isTask",
                       title: "Type",
                       width: 60,
                       //template: "#:isTask#"
                   },
                   /*{
                      field: "dueDate",
                       title: "Due Date",
                       format:dateFormat,
                       editor: dateTimeEditorforActivities,
                       template: "<div class = '#:delayTaskClass#' title=#:title# >#:kendo.toString(  ( dueDate == null ?'':dueDate)   ,'{!JSENCODE(dateFormat)}')#</div>",
                       width: 100
                     
                   }, */
                    {
                      field: "dueDateSort",
                       title: "Due Date",
                       format:dateFormat,
                       editor: dateTimeEditorforActivities,
                       template: "<div class = '#:delayTaskClass#' title=#:title# >#:   kendo.toString(( dueDateSort == null ? '' :dueDateSort ), kendo.culture().calendar.patterns.d)#</div>",
                       width: 100
                     
                   }, 
                   {
                       field: "status",
                       title: "Status",
                       editor: statusDropDownEditor ,
                       template: "<div title=#:title#>#:status#</div>",
                       width: 130
                   },
                   {
                       field: "priority",
                       title: "Priority",
                       editor: priporityDropDownEditor,
                       template: "<div title=#:title#>#:priority#</div>",
                       width: 100
                   },
                   {
                       field: "assignedTo",
                       title: "Assigned To",
                       filterable: true,
                       template: '<div class = "grid-user-img"><img src=#:assignedToImage# title= "#:assignedTo#" height="24px" width="24px"  /></div><div class = "grid-user-img"><a href="/#:ownerId#" target="_parent" >#:assignedTo#</a></div>'
                   }
               ]
            }).data("kendoGrid");
            var grid = $("#gridTaskEvent").data("kendoGrid");
            grid.tbody.on("change", ".taskCheckbox", function (e) {
                var row = $(e.target).closest("tr");
                var item = grid.dataItem(row);
                var $target = $(e.currentTarget);
                item.isSelected = $(e.target).is(":checked") ? true : false;
             });
            
        } 
        
        function getTemplate(val,taskId,isDelete,isSelect){
            if(val == 'disabled'){
                return "<input type='checkbox' style='margin-left: 10px;margin-top: 8px;' value='#:isSelected#' disabled='disabled' onclick=selectTaskFunc('"+taskId+"','"+isDelete+"','"+isSelect+"') />";
            } else {
                return "<input type='checkbox' style='margin-left: 10px;margin-top: 8px;' value='#:isSelected#' onclick=selectTaskFunc('"+taskId+"','"+isDelete+"','"+isSelect+"') />";
            }
        }
        
        // Group member table //
       
       function kendoGroupMember(gridData) {
            
            $("#gridGroupMember").kendoGrid({
               dataSource:{
                   data:gridData ,
                   schema: {
                       model: {
                          name: "name",
                          fields: {
                              name: { type: "string" },
                              userImage: { type: "string" },
                              department: { type: "string" }
                          }
                      }
                   },
                   pageSize: 10
               },resizable: true,
               columns: [
                   {
                       field: "name",
                       title: "Name",
                       template: '<div class="grid-user-img"><img src=#:userImage# title= "#:name#" height="24px" width="24px"  /></div><div class="grid-user-img group-link">#:name#</div>'
                      
                   },
                   {
                       field: "department",
                       title: "Department", 
                       template: "#:department#",                      
                       width: 180
                   }
              ],
              sortable: true,
              pageable: true,
           });
           
        }
        
         function kendoRelationship(gridData) {
            // assign number of records on tab
            $('.relation-tab').html('('+gridData.length+')');
            
            $("#gridRelationship").kendoGrid({
               dataSource:{
                   data:gridData ,
                   schema: {
                       model: {
                          id: "id",
                          fields: {
                              id: { type: "string" },
                              relation:{type: "string" },
                              recordName:{type: "string" },
                              objectName:{type: "string" },
                              strength:{type: "string" },
                              notes:{type: "string" },
                              type:{type: "string" },
                              deleteImage : { type: "string"},
                              isDeletable : { type: "boolean"},
                              isEditable : { type: "boolean"},
                              editImage : { type: "string"},
                              url  : { type: "string"},
                              actionClassName : { type: "string"}
                          }
                      }
                   },
                   pageSize: 25
               },
               resizable: true,
               columns: [
                   {
                       field: "id",
                       title: "Action",
                       width: 60,
                       template: "<div class='grid-action'><a href=#=url#> <img src=/#:editImage# class='#:actionClassName#' /></a> </div> <div class='grid-action'><img src=/#:deleteImage# class='#:actionClassName#' onclick=\"deleteRelationship('{!JSENCODE(plan.Id)}','#:id#','#:isDeletable#')\"; /></div>",
                        sortable: false
                   },
                   {
                       field: "relation",
                       title: "Relation",
                       width: 100,
                       template: '<div>#:relation#</div>'
                   },
                   {
                       field: "recordName",
                       title: "Object Name",
                       template: '<a href=/#:recordId#>#:recordName#</a>'
                   },
                   {
                       field: "objectName",
                       title: "Object Type",
                       width: 110,
                       template: "#:objectName#"
                   },
                   
                   {
                       field: "strength",
                       title: "Strength",
                       width: 80,
                       template: "#:strength#"
                   },
                   
                   {
                       field: "notes",
                       title: "Notes",
                       template: '<div>#:notes#</div>'
                   }
              ],
              sortable: true,
              pageable: true,
              pageable: {
                  refresh: true,
                  pageSizes: [5,10,25,40]
              }
           });
        }
        
        //Notes and attachment table
        function kendoAttachmentNote(gridData) {
       
            // assign number of records on tab
            $('.attachment-tab').html('('+gridData.length+')');
            var j = 0;
            for(i=0;i<gridData.length;i++){
                if(gridData[i].type == 'Attachment')
                    j++;
            }
            $('#attachmentOnly').html('('+j+')');
           $("#gridAttachmentNote").kendoGrid({
               dataSource:{
                   data:gridData ,
                   schema: {
                       model: {
                           id: "id",
                           fields: {
                               id: { type: "string"},
                               type: { type: "string"},
                               name : { type: "string"},
                               lastModifiedDate : {type : "string"},
                               createdByUser : { type: "string"},
                               createdByUserImage : { type: "string"},
                               deleteImage : { type: "string"},
                               isDeletable : { type: "boolean"},
                               isEditable : { type: "boolean"},
                               editImage : { type: "string"},
                               actionClassName : { type: "string"}
                           }
                       }
                   },
                  pageSize: 25
               },
               resizable: true,
               columns: [
                   {
                       field: "id",
                       title: "Action",
                       width: 60,                       
                       template: "<div class='grid-action'><a href=#:url#> <img src=/#:editImage# class='#:actionClassName#' /></a> </div><div class='grid-action'> <img class='#:actionClassName#' src=/#:deleteImage#  onclick=\"deleteNotesAttachment('{!JSENCODE(plan.Id)}','#:id#','#:isDeletable#', '#:type#')\"; /></div>",
                        sortable: false
                   },
                   {
                       field: "type",
                       title: "Type",
                       width: 130,
                       template: "#:type#"
                   },
                   {
                       field: "name",
                       title: "Name",
                       template: '<a href=/#:id#>#:name#</a>'
                   },
                   {
                       field: "lastModifiedDate",
                       title: "Last Modified Date",
                       format:"{0:'{!JSENCODE(dateFormat)}' HH:mm}",
                       width: 130
                   },
                   {
                       field: "createdByUser",
                       title: "Created By",                      
                       template: '<div class = "grid-user-img"><img src=#:createdByUserImage# title= "#:createdByUser#" height="24px" width="24px"  /></div><div class = "grid-user-img">#:createdByUser#</div>'
                   }
               ],
               sortable: true,
               pageable: true
           });
        }
        
        // History table
        function kendoHistory (gridData) {
        
            // assign number of records on tab
            $('.history-tab').html('('+gridData.length+')');
            
            $("#gridHistory").kendoGrid({
               dataSource:{
                   data:gridData ,
                   schema: {
                       model: {
                           duedate: "duedate",
                           fields: {
                               duedate: { type: "string"  },
                               relatedTo: { type: "string" },
                               assignedTo : {type : "string"},
                               assignedToId : {type : "string"},
                               status : {type : "string"},
                               comments : { type: "string"  },
                               duedateSort : { type: "date"  }
                           }
                       }
                   },
                   pageSize: 25
               },
               resizable: true,
               columns: [
                   /*{
                       field: "duedate",
                       title: "Date",
                       format:"{0:{!JSENCODE(dateFormat)}}",
                       width: 150,
                       template: "#:duedate#"
                   },*/
                   {
                       field: "duedateSort",
                       title: "Date",
                       //format:"{0:{!JSENCODE(dateFormat)}}",
                       template: '<div >#:duedate#</div>',
                       width: 150, 
                   }, 
                   {
                       field: "relatedTo",
                       title: "Related To",
                       width: 120,
                       template: "#:relatedTo#"
                   },
                   {
                       field: "assignedTo",
                       title: "User",
                       template: '<div class = "grid-user-img"><img src=#:assignedToId# title= "#:assignedTo#" height="24px" width="24px"  /></div><div class = "grid-user-img">#:assignedTo#</div>'
                   },
                   {
                       field: "status",
                       title: "Action",
                       template: "#:status#"
                   },
                   {
                       field: "comments",
                       title: "Comments",
                       template: '<div>#:comments#</div>'
                   }
               ],
               sortable: true,
               pageable: true,
               pageable: {
                  refresh: true,
                  pageSizes: [5,10,25,40]
              }
           });
        }
    </script>
    
    
    <!-- Javascripts for action functions/command buttons -->
    
    <script type="text/javascript">
        $(document).ready(function(){
            $('.edit').css('display','none');
            $('.view').css('display','block');   
            setPosition(); 
        });
        
        function addAttach(){
            window.location ="/p/attach/NoteAttach?pid="+'{!JSINHTMLENCODE(plan.Id)}'+"&parentname="+'{!JSINHTMLENCODE(plan.Name)}'+"&retURL=/apex/PlanView?id="+'{!JSINHTMLENCODE(plan.Id)}'+"&sfdc.override=1&addNote=true";
        }
    
        function addNote(){
            window.location = "/002/e?parent_id="+'{!JSINHTMLENCODE(planIDNote)}'+"&retURL=/apex/PlanView?id="+'{!JSINHTMLENCODE(planIDNote)}'+"&sfdc.override=1&addNote=true";
        }
        
        function addEditPeople(){
            window.location = "/apex/AddEditPeopleOnPlan?id="+'{!JSINHTMLENCODE(plan.Id)}'+"&ObjType=Plan";     
        }
       
        function newTask(){
            window.location = "/00T/e?what_id="+'{!JSINHTMLENCODE(plan.ID)}'+"&retURL=/"+'{!JSINHTMLENCODE(plan.Id)}'+"&addTask=true";     
        }
        function newEvent(){
            window.location = "/00U/e?what_id="+'{!JSINHTMLENCODE(plan.ID)}'+"&retURL=/"+'{!JSINHTMLENCODE(plan.Id)}'+"&addTask=true";    
        }
        
        function logCall(){
            window.location = "/00T/e?title=Call&what_id="+'{!JSINHTMLENCODE(plan.Id)}'+"&followup=1&tsk5=Call&retURL=/apex/planView?id="+'{!JSINHTMLENCODE(plan.Id)}'+"&&addAct=true";
        }
        
        function sendEmail(){
            window.location = "/_ui/core/email/author/EmailAuthor?p3_lkid="+'{!JSINHTMLENCODE(plan.Id)}'+"&retURL=/apex/planView?id={!JSINHTMLENCODE(plan.Id)}&&";
        }
        
        /*function AddRelations(){
            window.location = "/apex/AddRelationship?id="+'{!JSINHTMLENCODE(plan.Id)}'+"&recType=Plan&relType=Relation";         
        }*/
        
        function AddItems(){
            window.location = "/apex/AddItem?id="+'{!JSINHTMLENCODE(plan.Id)}'+"&recType=Plan&relType=Item";
        }
    
        
        
        // remove quotes from json string 
        function removeQuotes(mystring) {
            newString = mystring.replace(/&(lt|gt|quot);/g, function (m, p) { 
                
                return (p == "lt") ? "<" : ((p == "gt") ? ">" : "\"");
            });
            var newJ= $.parseJSON(newString);
            return newJ;
        }
        
        
    </script>
    
    <!-- Information on people table -->
    <script type="text/javascript">
     
    
    
    function showInformationOnPeople(){
       // Variables declaration
        var addCIM = '{!plan.Add_C_I_Members__c}';
        var accountable =  '{!socialInput.Accountable__c}';
        var res = '{!socialInput.Responsible__c}';
        var cons = '{!socialInput.Consulted__c}';
        var info = '{!socialInput.Informed__c}';
        var chkSocial = '{!socialInput}';
        var chkRecPermission =  {!chkRecPermission};
        if(!convertStringToBoolean(addCIM) && (convertStringToBoolean(accountable) || convertStringToBoolean(res) || chkRecPermission == true)){
            $('#people-content').html('Consulted or Informed people cannot add/edit others to be Consulted or Informed.');
            $('.people-hover').css('display','block');
        }
        else if(convertStringToBoolean(addCIM) && (convertStringToBoolean(accountable) || convertStringToBoolean(res) || chkRecPermission== true)){
            $('#people-content').html('Consulted or Informed people can add/edit others to be Consulted or Informed.');
            $('.people-hover').css('display','block');
             
        }
        else if(convertStringToBoolean(addCIM) && (convertStringToBoolean(cons) || convertStringToBoolean(info)) && chkRecPermission != true){
            $('#people-content').html('You can add/edit other Consulted or Informed members.');
            $('.people-hover').css('display','block');
            
        }
        else if(!convertStringToBoolean(addCIM) && (convertStringToBoolean(cons) || convertStringToBoolean(info)) && chkRecPermission != true){
            $('#people-content').html('You need permission to add/edit other Consulted or Informed members.');
            $('.people-hover').css('display','block');
        }
        else if((chkSocial == null || chkSocial == '') && chkRecPermission != true){
            $('#people-content').html('You need permission to add/edit other Consulted or Informed members.');
            $('.people-hover').css('display','block');
        }
    }
    
    
    
    
    <!------------ Popups ------------> 
    
     
   
    function callKendoHistory() {
       PlanView.viewHistory('{!JSENCODE($CurrentPage.parameters.Id)}' , function(result, event)
       {
           if (event.status)
           {  
               var newItemViewOne = removeQuotes(result);
               kendoHistory (newItemViewOne);    
           }
        }, {escape:true});
    }
   
    
   
    function clonePlan(items,people,task,attach,relations,resetDate,relateClone,assignToMe,relationValue){
        clonePlanAction(items,people,task,attach,relations,resetDate,relateClone,assignToMe,relationValue);
        
    }
    
    function htmlUnescape(value){
        return String(value)
        .replace(/&quot;/g, '"')
        .replace(/&#39;/g, "'")
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&amp;/g, '&');
    }
    function htmlDecode(value){
        return $('<div/>').html(value).text();
    }
    
    // Code for search on enter for Activities tab
    $('#searchActivity').keypress(function(e){
        if (e.keyCode == '13'){
          searchTaskEvent('{!JSENCODE(plan.id)}',$('#searchActivity').val());
          return false;
        }
    });
    
    //Batch update for Activites tab method
    function parsingModifieDataforActivities(t){
        var searchTextforActivities = $('#searchActivity').val();
        //js method to call controller method to update Activities.
        //alert('update');
        parseModifiedData(t,searchTextforActivities,'{!plan.Id}');
        
    }
    
    // Code for search on enter for People tab
    $('#searchPeople').keypress(function(e){
        if (e.keyCode == '13'){
          searchPeople('{!JSENCODE(plan.id)}',$('#searchPeople').val());
          return false;
        }
    });
    
</script>
<script>
    function deleteItemViewOne(id,isDeletable){
        parseDeleteItemViewOne('{!JSENCODE(plan.Id)}',id,isDeletable);
    }
    
    function upItemViewOne(id, isDeletable){  
        parseUpItemViewOne('{!JSENCODE(plan.Id)}',id,isDeletable);
    }
    
    function downItemViewOne(id,isDeletable){
        parseDownItemViewOne('{!JSENCODE(plan.Id)}',id,isDeletable);
    }
    movePositionUp = 'true';
    movePositionDown = 'true';
    DeletePosition = 'true';
    function parseUpItemViewOne(planId,id,isDeletable) {
       if(movePositionUp == 'true')
       {
            movePositionUp = 'true';
       }
       if(movePositionUp == 'true'){
           movePositionUp = 'false';
           if(convertStringToBoolean(isDeletable)){
               PlanView.moveUp(planId, id , function(result, event)
               {
                   if (event.status)
                   {   
                       var newItemViewOne = removeQuotes(result);   
                        grid = $("#planItemViewOverview").data("kendoGrid");
                        grid.dataSource.data(newItemViewOne );
                        grid = $("#planItemViewMeeting").data("kendoGrid");
                        grid.dataSource.data(newItemViewOne );
                        grid = $("#planItemViewStatus").data("kendoGrid");
                        grid.dataSource.data(newItemViewOne );
                        grid = $("#planItemViewFinancials").data("kendoGrid");
                        grid.dataSource.data(newItemViewOne);               
                        grid = $("#planItemViewWork").data("kendoGrid");
                        grid.dataSource.data(newItemViewOne);
                        viewModelWork.ds.data(viewModelWork.ds.options.schema.parse(newItemViewOne || []));
                        renderTotalMins(planId);
                        movePositionUp = 'true';
                        return newItemViewOne;
                   }
               }, {escape:true});
           }
       }
    }
   
    function parseDownItemViewOne(planId,id,isDeletable) {
       if(movePositionDown == 'true')
       {
            movePositionDown = 'true';
       }
       if(movePositionDown == 'true'){
           movePositionDown = 'false';
           if(convertStringToBoolean(isDeletable)){
               PlanView.moveDown(planId, id , function(result, event)
               {
                   if (event.status)
                   {   
                        var newItemViewOne = removeQuotes(result);   
                        grid = $("#planItemViewOverview").data("kendoGrid");
                        grid.dataSource.data(newItemViewOne );
                        grid = $("#planItemViewMeeting").data("kendoGrid");
                        grid.dataSource.data(newItemViewOne );
                        grid = $("#planItemViewStatus").data("kendoGrid");
                        grid.dataSource.data(newItemViewOne );
                        grid = $("#planItemViewFinancials").data("kendoGrid");
                        grid.dataSource.data(newItemViewOne);               
                        grid = $("#planItemViewWork").data("kendoGrid");
                        viewModelWork.ds.data(viewModelWork.ds.options.schema.parse(newItemViewOne || []));
                        grid.dataSource.data(newItemViewOne);
                        renderTotalMins(planId);
                        movePositionDown = 'true';   
                   }
                   
               }, {escape:true});
           }
       }
    }
    
    
    
    function parseDeleteItemViewOne(planId,id,isDeletable) {
       if(convertStringToBoolean(isDeletable)){
           PlanView.DeleteItem(planId, id , function(result, event)
           {
               if (event.status)
               {   
                    renderTotalMins(planId);
                    var newItemViewOne = removeQuotes(result);   
                    grid = $("#planItemViewOverview").data("kendoGrid");
                    grid.dataSource.data(newItemViewOne );
                    grid = $("#planItemViewMeeting").data("kendoGrid");
                    grid.dataSource.data(newItemViewOne );
                    grid = $("#planItemViewStatus").data("kendoGrid");
                    grid.dataSource.data(newItemViewOne );
                    grid = $("#planItemViewFinancials").data("kendoGrid");
                    grid.dataSource.data(newItemViewOne);               
                    grid = $("#planItemViewWork").data("kendoGrid");
                    viewModelWork.ds.data(viewModelWork.ds.options.schema.parse(newItemViewOne || []));
                    grid.dataSource.data(newItemViewOne);
                    $('.items-tab').html('('+newItemViewOne.length+')'); 
                    renderTotalMins(planId); 
               }
           }, {escape:true});
       }
       
       // update note records 
       attachmentTabRefresh(planId);
    }
     function showItemView(num){
                  
                $('#itemView'+num).css('display','block');
                 if(num == 'Meeting'){
                    $('#items-callout2').css('display','block');
                    setPosition();  
                }else{
                    $('#items-callout2').css('display','none');
                    
                }
                 if(num == 'Overview'){
                    $('#items-callout').css('display','block');
                    setPosition(); 
                }else{
                    $('#items-callout').css('display','none');
                }
                if(num == 'Status'){
                    setPositionStance();
                }
                if(num == "Work"){
                 setPositionWorkEstimation();
                }
                if(num == 'Financials'){
                    $('#items-callout1').css('display','block');
                }else{
                    $('#items-callout1').css('display','none');
                }
                $('.view-btns').css('backgroundPosition','0 0');
                $('#view'+num).css('backgroundPosition','0 -48px');
                var itemViewArray = ['Overview','Meeting','Status','Financials','Work']
                for(i=0;i<5;i++){
                    if(itemViewArray[i]!=num){  
                        $('#itemView'+itemViewArray[i]).css('display','none');    
                    }
                }
            }
            
        
</script> 
<script>
        // the following script is used to refresh the activities tab when a task is created from chatter.
        // here I am refreshing the activity tab by delaying 3 secs once I create a task because the task has to be inserted and then refreshed.
        $("#publishersharebutton").click(function() {
            setTimeout(function(){
              getAllTaskEvent('{!plan.id}');
            }, 3000);
        });
</script>
<script>        
        function chatterRefresh(){
            setTimeout(function(){   
              chatterRerender();
            }, 3000);
        }
        
        function refreshActivities(){
            var searchTextActivity = $('#searchActivity').val();
            PlanView.viewTaskEventTabWithSearch('{!plan.Id}', null, '', function(result, event)
             {
                 if (event.status)
                 {
                    var newTaskEvent = removeQuotes(result.taskEvent);
                    var grid =$("#gridTaskEvent").data("kendoGrid");
                    grid.dataSource.data(newTaskEvent );
                    viewModel.ds.data(viewModel.ds.options.schema.parse(newTaskEvent || []));

                    $('.task-tab').html('('+newTaskEvent.length+')');
                    isTaskDelay  = false;
                    if(newTaskEvent != null){
                        for(var i = 0;  newTaskEvent.length > i; i ++ ) {
                            if(newTaskEvent[i].delayTaskClass == 'delayTask' ) {
                                isTaskDelay = true;
                            }
                        }
                    }
                    if(isTaskDelay) {
                        $('#activityTab a').css('color','#ff0000 !important');
                    }
                    else {
                        $('#activityTab a').css('color','#222');
                    }
                    hidefade();
                 }
             }, {escape:true});
        }
        
        function closeTaskPopup(){
            hideTaskPopup();
            selectedTasks = new Array();
            $('#enableMassDelete').addClass('btn-disabled');
            $('#enableMassDelete').attr('onclick','').unbind('click');
            $('#enableMassEdit').addClass('btn-disabled');
            $('#enableMassEdit').attr('onclick','').unbind('click');
            PlanView.viewTaskEventTabWithSearch('{!plan.Id}', null, '', function(result, event)
             {
                 if (event.status)
                 {
                     //update Activities tab
                    var newTaskEvent = removeQuotes(result.taskEvent);
                    $('.task-tab').html('('+newTaskEvent.length+')');
                    isTaskDelay  = false;
                    if(newTaskEvent != null){
                        for(var i = 0;  newTaskEvent.length > i; i ++ ) {
                            if(newTaskEvent[i].delayTaskClass == 'delayTask' ) {
                                isTaskDelay = true;
                            }
                        }
                    }
                    if(isTaskDelay) {
                        $('#activityTab a').css('color','#ff0000 !important');
                    }
                    else {
                        $('#activityTab a').css('color','#222');
                    }
                    kendoTaskEvent(newTaskEvent);
                    itemTabRefresh('{!plan.Id}');
                 }
             }, {escape:true});
             chatterRerender();
        }
        
        kendo.ui.TabStrip.fn._keydown = function(e) {
        var that = this,
        key = e.keyCode;

        that._last = key;

                clearTimeout(that._typing);
            
                if (  key !== kendo.keys.DOWN && key !== kendo.keys.UP && key !== kendo.keys.LEFT && key !== kendo.keys.RIGHT ) {
                    //that._search();
               }
            };
        $(document).ready(function () {
            hideLoaderAndFade();
             $('#tabs-7 .pbButton input').addClass('k-button'); $('#tabs-7 .pbButton input').removeClass('btn');
       });
        function alignTaskPopup(){
            var scrollPosY = $(window).height();
               var scrollPosX = $(window).width();
               scrollPosY = (scrollPosY/2)-(($('.modal-window-newTaskPopup').height())/2);
               scrollPosX = (scrollPosX/2)-(($('.modal-window-newTaskPopup').width())/2);
               $('.modal-window-newTaskPopup').css('position', 'fixed')
                   .css('background-color','white')
                   .css('border-radius','5px')
                   .css('width','75em');
               $('.modal-window-newTaskPopup').css('z-index', '11000');
               $('.modal-window-newTaskPopup').css('top',scrollPosY+'px');  
               $('.modal-window-newTaskPopup').css('right',scrollPosX+'px'); 
           //    $("#tabstask").tabs("option","disabled", [1]);
        dragModal();        
       } 
</script>
  <!-- // ========== used for progress indicator dropdown ========== // sendil 01-08-2014 -->
<script>
            
        var selectedIndicatorID = "";
            function showIndicator(e,num){   
                  if(document.getElementById("indicatorDropDown").style.display=="none"){
                        $('#indicatorDropDownDisplay').show()
                            .css('position','absolute')
                            .css('z-index','9000')
                            .css('top', e.clientY - 125 + $(document).scrollTop())
                            .css('left', e.clientX - 25)
                   }
            }
            function hideIndicator(num){  
                     document.getElementById("indicatorDropDownDisplay").style.display="none";
                   //  document.getElementById("indicatorDropDown").style.display="none";
             } 
            var globalDecisionId ;
            function openIndicator(e,decisionId, num, pi){ 
          if(pi != 'true' )
          return false;
               globalDecisionId = decisionId.replace('meeting','').replace('status','') ;
               selectedIndicatorID = document.getElementById("indicator"+num);
               $('#indicatorDropDown').hide();
                if(document.getElementById("indicatorDropDown").style.display !="block"){
                        //document.getElementById("indicatorDropDown").style.display="block";
                        $('#indicatorDropDown').show()
                            .css('position','absolute')
                            .css('z-index','10000')
                            //.appendTo('body');
                            .css('top', e.clientY - 125 + $(document).scrollTop())
                            .css('left', e.clientX - 25)
                            //alert('  ');
                    }else{
                        document.getElementById("indicatorDropDown").style.display="none";
                    }
            }
           function selectIndicator(indicatorID){
                document.getElementById("indicatorDropDown").style.display="none";
                switch(indicatorID) {
                    case "notGiven":
                        PlanView.updatePulse('Not Given',globalDecisionId,function(result,event){ itemTabRefresh('{!Plan__c.id}');})
                        selectedIndicatorID.style.backgroundPosition="0px 0px";
                        break;
                    case "good":
                        PlanView.updatePulse('Good',globalDecisionId,function(result,event){ itemTabRefresh('{!Plan__c.id}');})
                        selectedIndicatorID.style.backgroundPosition="0px -15px";
                        break;
                    case "minorChallenges":
                        PlanView.updatePulse('Minor Challenges',globalDecisionId,function(result,event){ itemTabRefresh('{!Plan__c.id}');})
                        selectedIndicatorID.style.backgroundPosition="0px -30px";
                        break;
                    case "critical": 
                        PlanView.updatePulse('Critical',globalDecisionId,function(result,event){ itemTabRefresh('{!Plan__c.id}');})
                        selectedIndicatorID.style.backgroundPosition="0px -45px";
                        break;
                    case "completed":
                        PlanView.updatePulse('Completed',globalDecisionId,function(result,event){ itemTabRefresh('{!Plan__c.id}');})
                        selectedIndicatorID.style.backgroundPosition="0px -60px";
                        break;
                    case "completedProb":
                        PlanView.updatePulse('Completed with Problems',globalDecisionId,function(result,event){ itemTabRefresh('{!Plan__c.id}');})
                        selectedIndicatorID.style.backgroundPosition="0px -75px";
                        break;        
                    }
                     document.getElementById("indicatorDropDownDisplay").style.display="none";
                     document.getElementById("indicatorDropDown").style.display="none";

            }
            
             
            // convert string to boolean 
            function convertStringToBooleanPlan(srcValue) {
                
                var destinationValue;
                if(srcValue == 'true') {
                    destinationValue = true;
                }
                else if (srcValue == 'True') {
                    destinationValue = true;
                }
                else if  (srcValue == true) {
                    destinationValue = true;
                }
                else if  (srcValue == '1') {
                    destinationValue = true;
                }
                else if  (srcValue == '0') {
                    destinationValue = false;
                }
                else if(srcValue == 'false') {
                    destinationValue = false;
                }
                else if (srcValue == 'False') {
                    destinationValue = false;
                }
                else if  (srcValue == false) {
                    destinationValue = false;
                }
                return destinationValue;
            }
     </script>   
     <!-- // ========== Ends for progress indicator dropdown ========== // sendil 01-08-2014 -->
      <!-- // ========== used for progress indicator dropdown ========== // sendil 01-08-2014 -->
                            <div id="indicatorDropDown" class="indicatorDropDown floatRight"  style="display:none;">
                               <div id="notGiven" class="toClear " onclick="selectIndicator(this.id)" style="width:100%;height:100%">   
                                    <div class="floatLeft notGiven"> </div> <div class="floatLeft fontBold indicatorLable">Not Given</div>
                               </div> 
                                <div id="good" class="toClear topBorder" onclick="selectIndicator(this.id)" style="width:100%;height:100%"> 
                                    <div class="floatLeft good"> </div> <div class="floatLeft fontBold indicatorLable">Good</div>
                                </div>    
                                <div id="minorChallenges" class="toClear topBorder" onclick="selectIndicator(this.id)" style="width:100%;height:100%">
                                    <div class="floatLeft minorChallenges"> </div> <div class="floatLeft fontBold indicatorLable">Minor Challenges</div>
                                    </div>
                                <div id="critical" class="toClear topBorder" onclick="selectIndicator(this.id)" style="width:100%;height:100%">
                                    <div class="floatLeft critical"> </div><div class="floatLeft fontBold indicatorLable">Critical</div>
                                </div>
                                <div id="completed" class="toClear topBorder" onclick="selectIndicator(this.id)" style="width:100%;height:100%">
                                    <div class="floatLeft completed"> </div><div class="floatLeft fontBold indicatorLable">Completed</div>
                                </div>
                                <div id="completedProb" class="toClear topBorder" onclick="selectIndicator(this.id)" style="width:100%;height:100%">
                                    <div class="floatLeft completedProb"> </div><div class="floatLeft fontBold indicatorLable">Completed with Problems</div>
                                </div>  
                            </div>
                            <div id="indicatorDropDownDisplay" class="indicatorDropDownDisplay floatRight"  style="display:none;">  
                                <div id="notGiven" class="toClear "  >
                                    <div class="floatLeft notGiven"> </div> <div class="floatLeft fontBold indicatorLable">Not Given</div>
                                </div>
                                <div id="good" class="toClear topBorder"  >
                                    <div class="floatLeft good"> </div> <div class="floatLeft fontBold indicatorLable">Good</div>
                                    </div>
                                <div id="minorChallenges" class="toClear topBorder"  >
                                    <div class="floatLeft minorChallenges"> </div> <div class="floatLeft fontBold indicatorLable">Minor Challenges</div>
                                   </div>
                                <div id="critical" class="toClear topBorder"  >
                                    <div class="floatLeft critical"> </div><div class="floatLeft fontBold indicatorLable">Critical</div>
                                </div>
                                <div id="completed" class="toClear topBorder"  >
                                    <div class="floatLeft completed"> </div><div class="floatLeft fontBold indicatorLable">Completed</div>
                                </div>
                                <div id="completedProb" class="toClear topBorder"  >
                                    <div class="floatLeft completedProb"> </div><div class="floatLeft fontBold indicatorLable">Completed with Problems</div>
                                </div>
                            </div>
                             <!-- // ========== End of progress indicator dropdown ========== //sendil 01-08-2014 -->
    <style>
        #planItemView4 th.k-header:nth-child(4) { text-align:left; }  
        #planItemView4 th.k-header:nth-child(5) { text-align:left; }
        #planItemView4 th.k-header:nth-child(6) { text-align:left; }
        #planItemView4 th.k-header:nth-child(7) { text-align:left; }
        #planItemView4 th.k-header:nth-child(8) { text-align:left; }
        #planItemView4 th.k-header:nth-child(9) { text-align:left; }  
        .floatRight{
            float:right;
          }
          #lookUp div{
            margin-right: 6.5em !important;
        }
                .decisionSearch, .taskSearch, .planSearch {
            margin-top: -3px;
        }
        .taskSearch .k-textbox, .decisionSearch .k-textbox, .planSearch .k-textbox{
            height: 32px;
            background-image: none,linear-gradient(to bottom,rgba(255,255,255,.6) 0,rgba(255,255,255,.0) 100%);
            background-position: 50% 50%;
            background-color: #e3e3e3;
            outline: 0;
            padding: 2px .3em;
            line-height: 1.6em;
            display: inline-block;
            vertical-align: middle;
        }
        .decisionSearch .k-textbox > input, .taskSearch .k-textbox > input, .planSearch .k-textbox > input{
            height: 0.6em;
            width: 9.5em;
        }
        div#tabs {
            border: 0px;
        }
    </style> 
    <script>
            $(document).click(function(e) { 
            if (e.target.id.indexOf('indicator') == -1) {
                 $('#indicatorDropDown').hide();
            }
            
            var kendoWindows = $(".modal-window-relation,.modal-window,.modal-window-activitywarning,.modal-window-massEditing,.modal-window-massDelete,.modal-window-noPermission")  
            var onClose = function() {
                $('.bg-fade').fadeOut('slow');
                $('body').css('overflow','auto'); 
            }
            if (!kendoWindows.data("kendoWindow")) {
                kendoWindows.kendoWindow({
                    actions: [ 
                        "Close" 
                    ],
                    close: onClose 
                });
            }
            
            
        });
         
    </script>
    <script id="checkbox-template" type="text/kendo-ui-template">
      <div align="center"> <input type="checkbox" class="taskCheckbox" onclick="selectTaskFunc('#:id#','#:isDeletable#',this)" #if(isSelected){# checked="checked" #}# #if(toDisable == 'disabled'){# disabled="disabled" #}# ></input></div>
    </script>
</html>
</apex:page>